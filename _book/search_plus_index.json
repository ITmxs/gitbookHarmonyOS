{"./":{"url":"./","title":"前言","keywords":"","body":"© luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 20:40:07 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/00鸿蒙开发资料汇总.html":{"url":"connent/鸿蒙/00鸿蒙开发资料汇总.html","title":"鸿蒙开发资料汇总","keywords":"","body":" 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 鸿蒙社区 51cto鸿蒙专区 华为鸿蒙专区 电子发烧友鸿蒙专区 官方资源 鸿蒙开发者文档 harmonyos开发文档 gitee源码地址 鸿蒙应用开发IDE(DevEco studio) 鸿蒙设备开发IDE(DevEco Device Tool) 开放原子基金会 DevEco Marketplace 鸿蒙官网地址汇总 https://harmonyos.51cto.com/posts/7704 旨在提供一个精选的鸿蒙库、工具、开源项目、书籍、博客、教程的集合。减少大家漫无目的的搜索时间，帮助大家在学习鸿蒙的过程中少踩坑、少走弯路。 https://gitee.com/isrc_ohos/ultimate-harmony-reference?_from=gitee_search 鸿蒙系统的资料整理 https://gitee.com/hiharmonica/awesome-harmony-os-kapok 华为开发者学堂（https://developer.huawei.com/consumer/cn/training/result） 华为开发者学堂 - HarmonyOS应用开发系列课（基础篇）链接地址 华为开发者学堂 - HarmonyOS应用开发系列课（进阶篇）链接地址 W3Cschool编程教学网站-鸿蒙OS开发 https://www.w3cschool.cn/harmonyos/ 鸿蒙学堂的文档 https://hmxt.org/documents Gitee开源平台 https://gitee.com/ 木棉花（链接地址） 数字经济及其核心产业统计分类（2021）（链接地址） 国家标准2011国民经济行业分类 （链接地址） 更多的参考资料 链接地址 鸿蒙课程公开资料 https://gitee.com/cluo29/harmonyos-open-materials 百图画鸿蒙 | 百文说内核 | 百万注源码 http://weharmonyos.com/ 线上demo https://playground.harmonyos.com/#/cn/onlineDemo 类Flutter开发 https://developer.harmonyos.com/cn/docs/documentation/doc-references/ts-components-versions-0000001231119333 © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 20:02:07 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/01鸿蒙开发第一节.html":{"url":"connent/鸿蒙/01鸿蒙开发第一节.html","title":"01鸿蒙开发第一节","keywords":"","body":"鸿蒙开发初体验 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 在体验之前，大家可以先看这张图，然后按图索骥，不过不会在这个教程教如何如何安装nodejs， 接下来开始正文 1.第一步，打开链接，点击下载 https://developer.harmonyos.com/cn/develop/deveco-studio/ 目前最新版本 https://developer.harmonyos.com/cn/develop/deveco-studio#download_beta 两个版本都可以下载，看你自己需要 Release版本提供更稳定的功能特性， Beta版本提供了支持HarmonyOS 3.0.0 开发者预览版的开发能力，让您尝鲜体验HarmonyOS 3.0.0最新功能， 下载到本地之后双击exe可执行文件 2.一路next，在这步记得勾选，这样后续开发比较方便。至于为什么鸿蒙不支持vs和as开发，大家可以自己去探究。 3.运行已安装的DevEco Studio，首次使用，请选择Do not import settings，点击OK。 进入配置向导页面，设置npm registry，DevEco Studio已预置对应的仓，直接点击Start using DevEco Studio进入下一步。 说明 如果配置向导界面出现的是设置Set up HTTP Proxy界面，说明网络受限，请根据参考信息配置DevEco Studio代理、NPM代理和Gradle代理后，再下载HarmonyOS SDK。 DevEco Studio向导指引开发者下载SDK，默认下载OpenHarmony SDK。SDK下载到user目录下，也可以指定对应的存储路径，SDK存储路径不支持中文字符，然后点击Next。 在弹出的SDK下载信息页面，点击Next，并在弹出的License Agreement窗口，点击Accept开始下载SDK。 等待OpenHarmony SDK及工具下载完成，点击Finish，界面会进入到DevEco Studio欢迎页。 4.配置HDC工具环境变量 HDC是为开发者提供HarmonyOS应用/服务的调试工具，为方便使用HDC工具，请为HDC工具及其端口号设置环境变量。 Windows环境变量设置方法： 在此电脑 > 属性 > 高级系统设置 > 高级 > 环境变量中，添加HDC端口变量名为：HDC_SERVER_PORT，变量值设置为7035。 在path变量中，添加HDC工具路径，HDC工具路径为：HarmonyOS SDK安装目录/toolchains。 F:\\HarmonySdk\\toolchains 环境变量配置完成后，关闭并重启DevEco Studio。 5.创建和运行Hello World 打开DevEco Studio，在欢迎页点击Create Project，创建一个新工程，选择js的方式，目前支持的有js，java和c++，这方面看自己的喜好。 6.填写工程相关信息，Device Type选择Phone，其他保持默认值即可，点击Finish。关于各个参数的详细介绍， 工程创建完成后，DevEco Studio会自动进行工程的同步，同步成功如下图所示。 7.使用模拟器运行HelloWorld DevEco Studio提供远程模拟器和本地模拟器，本示例以远程模拟器为例进行说明 DevEco Studio提供模拟器供开发者运行和调试HarmonyOS应用/服务。 在DevEco Studio菜单栏，点击Tools > Device Manager。 在Remote Emulator页签中点击Login，在浏览器中弹出华为开发者联盟帐号登录界面，请输入已实名认证的华为开发者联盟帐号的用户名和密码进行登录（查看远程模拟器登录常见问题）。 说明 推荐使用最新版本Chrome浏览器，如果使用Safari、360等其他浏览器，要取消阻止跨站跟踪和阻止所有Cookie功能。 登录后，请点击界面的允许按钮进行授权。 在设备列表中，选择Phone设备P40，并点击按钮，运行模拟器。 点击DevEco Studio工具栏中的按钮运行工程，或使用默认快捷键Shift+F10（Mac为Control+R）运行工程。 8.已成功运行了第一个HarmonyOS应用/服务， 到此华为鸿蒙os 的环境搭建和初体验就讲完了 最后总结： 作为一枚Flutter开发程序员，第一点，第一次上手这个IDE和语言环境还是比较顺利的 基本能看懂 具体的还要看官网文档和api使用情况，没有具体去深入写， 个人看法学起来应该不难，第二点，如果有空了解和学习鸿蒙OS开发 没有坏处 ，不要等到书到用书方恨少 那就不好了 ，有兴趣的同学可以根据教程安装开发环境学习和了解 ，最后希望我的文章能帮助到各位解决问题 。 https://developer.harmonyos.com/cn/docs/documentation/doc-guides/develop-overview-0000001071291809 © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-20 20:22:51 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/02工程介绍.html":{"url":"connent/鸿蒙/02工程介绍.html","title":"02工程介绍","keywords":"","body":"上一节教大家跑通了demo 这一节一起来了解HarmonyOS工程 春节不停更，此文正在参加「星光计划-春节更帖活动」 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 HarmonyOS APP工程结构 在进行HarmonyOS应用/服务开发前，应该掌握HarmonyOS应用/服务的逻辑结构 HarmonyOS应用/服务发布形态为APP Pack（Application Package，简称APP），它是由一个或多个HAP（HarmonyOS Ability Package）包以及描述APP Pack属性的pack.info文件组成。 一个HAP在工程目录中对应一个Module，它是由代码、资源、第三方库及应用/服务配置文件组成，可以分为Entry和Feature两种类型。 Entry：应用/服务的主模块，可独立安装运行。一个APP中，对于同一类型的设备，可以包含一个或多个entry类型的HAP，如果同一设备类型包含多个entry模块，需要配置distroFilter分发规则。，运行的时候也是这样。你会发现这个模块。 Feature：应用/服务的动态特性模块。一个APP可以包含一个或多个feature类型的HAP，也可以不含。 HAP是Ability的部署包，HarmonyOS应用/服务代码围绕Ability组件展开，它是由一个或多个Ability组成。Ability分为两种类型：FA（Feature Ability，中文名称：元程序）和PA（Particle Ability，中文名称：元服务）。FA/PA是应用/服务的基本组成单元，能够实现特定的业务功能。FA有UI界面，而PA无UI界面。 工程目录结构 DevEco Studio工程目录结构提供工程视图和HarmonyOS视图。工程创建或打开，默认显示工程视图，如果要切换到HarmonyOS视图，在左上角点击Project > Ohos进行切换。 JS工程目录结构 JS工程目录结构如下图所示。 java目录：仅Phone、Tablet、TV和Wearable设备的JS工程才存在，作为HarmonyOS应用/服务的启动入口。 common目录：用于存放公共资源文件，如媒体资源、自定义组件和JS文档等。 i18n目录用于存放多语言的json文件， pages目录： pages文件夹下可以包含1个或多个页面，每个页面都需要创建一个文件夹（如图中的index）。页面文件夹下主要包含3种文件类型：css、js和hml文件。 pages>index>index.hml文件hml文件定义了页面的布局结构，使用到的组件，以及这些组件的层级关系，如果你会html，那么这个不成问题。 pages>index>index.css文件css文件定义了页面的样式与布局，包含样式选择器和各种样式属性等，如果你会css，那么这个不成问题。 pages>index>index.js文件js文件描述了页面的行为逻辑，此文件里定义了页面里所用到的所有的逻辑关系，比如数据、事件等，如果你会js，那么这个不成问题。 对于上面提到的这些，如果你不会的话，可以关注我的公众号“大前端之旅”，来一起学习。 resources用于存放资源配置文件，比如：全局样式、多分辨率加载等配置文件。 app.js文件全局的JavaScript逻辑文件和应用/服务的生命周期管理。 对于HarmonyOS工程中的目录结构就了解到这儿 由于DevEco Studio支持包括手机、平板、车机、智慧屏、智能穿戴、轻量级智能穿戴和智慧视觉设备的HarmonyOS应用/服务开发，预置了丰富的工程模板，可以根据工程向导轻松创建适应于各类设备的工程，并自动生成对应的代码和资源模板。同时，DevEco Studio还提供了多种编程语言供开发者进行HarmonyOS应用/服务开发，包括Java、JS、eTS和C/C++编程语言。 下面是工程模板和对应开发语言的对应关系 到此华为鸿蒙目录结构和工程模板和对应开发语言的对应关系就讲完了 了解了这些对于你的上手速度就会达到事半功倍的效果。 最后总结： 作为一枚Flutter开发程序员，第一点，第一次上手这个IDE和语言环境还是比较顺利的 基本能看懂 具体的还要看官网文档和api使用情况，没有具体去深入写， 个人看法学起来应该不难，第二点，如果有空了解和学习鸿蒙OS开发 没有坏处 ，不要等到书到用书方恨少 那就不好了 ，有兴趣的同学可以根据教程安装开发环境学习和了解 ，最后希望我的文章能帮助到各位解决问题 。乾坤未定，你我皆是黑马 参考文档：https://developer.harmonyos.com/ © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 12:06:09 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/03编辑器使用技巧.html":{"url":"connent/鸿蒙/03编辑器使用技巧.html","title":"03编辑器使用技巧","keywords":"","body":"这一节一起来了解编辑器使用技巧 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 开发鸿蒙少不了对编辑器的使用，今天就先从编辑器使用技巧开始，俗话说，工欲善其事必先利其器，下面先给我汇总的快捷键， 快捷键 Windows Mac 代码高亮 File > Settings或快捷键Ctrl+Alt+S DevEco Studio > Preferences，快捷键为Command+英文逗号 代码自动跳转 按住Ctrl键 按住Ctrl键 代码格式化 Ctrl + Alt + L，可以快速对选定范围的代码进行格式化。Ctrl + Alt + Shift + L，可以快速对当前整个文件进行格式化 Command+Option +L，可以快速对选定范围的代码进行格式化。Command+Option+L，可以快速对当前整个文件进行格式化 代码折叠 Ctrl + 加号键 Command+Option+加号键 代码快速注释 Ctrl+/ Command+/ 代码结构树 Alt + 7 / Ctrl + F12 Command+7 代码查找 两次Shift 两次Shift 查看Java接口文档 Ctrl+Q F1 快捷键大家可以截图保存，接下来了解一些别的开发技巧。 汉化（V3.0 Beta2（2021-12-31）版本以上支持） 还有一个问题可能就是目前编辑器大家看着不太习惯，需要汉化一下，那么如何汉化呢，结合Androidstudio的经验，分为如下几步 第一步点击File-setting 第二步plugins里面选择如图所示的插件，并安装。 第三步，重启，汉化完成 代码高亮 支持对代码关键字、运算符、字符串、类名称、接口名、枚举值等进行高亮颜色显示，可以在菜单栏打开File > Settings或快捷键Ctrl+Alt+S（Mac为DevEco Studio > Preferences，快捷键为Command+英文逗号）面板，在Editor > Color Scheme自定义各语言高亮显示颜色。 同时还可以对变量名和参数名进行语义高亮，默认情况下为关闭状态，可以在菜单栏打开File > Settings或快捷键Ctrl+Alt+S（Mac为DevEco Studio > Preferences，快捷键为Command+英文逗号）面板，在Editor > Color Scheme > Language Defaults > Semantic highlighting中，打开语义高亮开关。 代码智能补齐 基于HuaweiCloud SmartAssist提供Java代码的智能补齐能力，编辑器工具会分析上下文并理解项目内容，并根据输入的内容，提示可补齐的类、方法、字段和关键字的名称等。（编辑器版本大于2.1才可以），使用SmartAssist智能编码辅助工具，需要在File > Settings >DevEco Labs > SmartAssist中勾选“Enable SmartAssist”开启。SmartAssist默认最大允许占用的内存为1.5G，如果出现卡顿，可以尝试适当调整该阈值。调整后，还是出现卡顿现象，并提示内存不足，建议升级电脑主机内存。 代码自动跳转 在编辑器中，可以按住Ctrl键，鼠标点击代码中的类、方法、参数、变量等名称，自动跳转到定义处。 代码结构树 支持快速查看代码文档的结构树，包括全局变量和函数，类成员变量和方法等，并可以跳转到对应代码行。可使用快捷键Alt + 7 / Ctrl + F12（Mac为Command+7）快速打开代码结构树。 代码快速注释 支持对选择的代码块进行快速注释，使用快捷键Ctrl+/（Mac为Command+/）快速进行注释。对于已注释的代码快，再次使用快捷键Ctrl+/（Mac为Command+/）取消注释。 代码格式化 支持对选定范围的代码或者当前整个文件进行代码格式化操作，可以很好的提升代码的美观度和可读性。 使用快捷键Ctrl + Alt + L（Mac为Command+Option +L） 可以快速对选定范围的代码进行格式化。 使用快捷键Ctrl + Alt + Shift + L（Mac为Command+Option+L）可以快速对当前整个文件进行格式化。 如果在进行格式化时，对于部分代码片段不需要进行自动的格式化处理，可以通过如下方式进行设置： 在File>Settings>Editor>Code Style，点击“Formatter”，勾选“Turn formatter on/off with markers in code comments”。 在Java或C/C++代码中，在不需要进行格式化操作的代码块前增加“//@formatter:off”，在不格式化代码块的最后增加“//@formatter:on”，即表示对该范围的代码块不需要进行格式化操作。 代码折叠 支持对代码块的快速折叠和展开，可以使用快捷键Ctrl + 加号键（Mac为Command+Option+加号键）快速展开已折叠的代码；使用快捷键Ctrl + 减号键（Mac为Command+Option+减号键）折叠已展开的代码块。 代码查找 通过对符号、类或文件的即时导航来查找代码。检查调用或类型层次结构，轻松地搜索工程里的所有内容。通过使用连续按压两次Shift快捷键，打开代码查找界面。 查看Java接口文档 在Java代码选中HarmonyOS API或选中Java类时，使用快捷键Ctrl+Q（Mac为F1），在弹出的“Documentation”最下方，会显示相应文档的链接。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 12:36:57 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/04鸿蒙webview的使用和JS交互.html":{"url":"connent/鸿蒙/04鸿蒙webview的使用和JS交互.html","title":"04鸿蒙webview的使用和JS交互","keywords":"","body":"春节不停更，此文正在参加「星光计划-春节更帖活动 04鸿蒙-webview的使用和JS交互（附源码） 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 日常我们在开发项目时，为了项目快速的开发和迭代，难免会用到H5页面。使用鸿蒙进行项目开发时，也一样免不了要加载H5页面，在移动开发中打开H5页面需要使用WebView组件。同时，为了和H5页面进行数据交换，有时候还需要借助JSBridge来实现客户端与H5之间的通讯。 那么鸿蒙之中用到的技术是什么呢？WebView 在此之前，先看一个报错 ​ App Launch: The Huawei Lite Simulator supports only Lite projects. 这是什么原因呢，其实简单，就是你没有登陆 所以解决这个的问题就是你重新登录就好了。 汉化（V3.0 Beta2（2021-12-31）版本以上支持） 还有一个问题可能就是目前编辑器大家看着不太习惯，需要汉化一下，那么如何汉化呢，结合Androidstudio的经验，分为如下几步 第一步点击File-setting 第二步plugins里面选择如图所示的插件，并安装。 第三步，重启，汉化完成 第一步创建项目 点击next 第二步等依赖安装安装完成 第三步打开模拟器 点击登录，打开浏览器授权 选择p40 启动模拟器 第五步开始正文 接下来开始正文。 应用预览： 点击\"打开网址\"按钮会加载上方网址的Web页面，通过后退\"和\"前进\"按钮实现Web页面间的导航。 点击\"加载本地网页\"按钮加载本地Web页面，点击\"发送消息给本地html\"或者Web页面中的\"调用Java方法\"按钮，实现应用与Web页面间的交互。 这里是http访问方式，鸿蒙的默认是https访问模式，如果您的请求网址是http开头的，可以继续查看后面的教程。 1. 增加一个WebView组件 步骤 1 - 在\"resources/base/layout/ability_main.xml\"文件中创建WebView，示例代码如下： 步骤 2 - 在\"slice/MainAbilitySlice.java\"文件中通过如下方式获取WebView对象，示例代码如下： WebView webview = (WebView) findComponentById(ResourceTable.Id_webview); 2. 通过WebView加载Web页面 WebView加载页面分为加载Web页面和加载本地Web页面两种情况，接下来我们将分别进行介绍。 1.WebView加载网络Web页面 跟Android类似，要访问网络，我们首先要配置网络访问权限，在config.json的\"module\"节点最后，添加上网络权限代码 module\": { ...... \"reqPermissions\": [ { \"name\": \"ohos.permission.INTERNET\" } ] } 2 设置访问模式 鸿蒙的默认是https访问模式，如果您的请求网址是http开头的，请在config.json文件中的deviceConfig下，添加如下设置 \"deviceConfig\": { \"default\": { \"network\": { \"cleartextTraffic\": true } } }, 在\"slice/MainAbilitySlice.java\"文件中通过webview.load(String url)方法访问具体的Web页面，通过WebConfig类对WebView组件的行为进行配置，示例代码如下： WebConfig webConfig = webview.getWebConfig(); // WebView加载URL，其中urlTextField为输入URL的TextField组件 webview.load(urlTextField.getText()); 在Web页面进行链接跳转时，WebView默认会打开目标网址，通过WebAgent对象可以定制该行为，示例代码如下： webview.setWebAgent(new WebAgent() { @Override public boolean isNeedLoadUrl(WebView webView, ResourceRequest request) { if (request == null || request.getRequestUrl() == null) { LogUtil.info(TAG,\"WebAgent isNeedLoadUrl:request is null.\"); return false; } String url = request.getRequestUrl().toString(); if (url.startsWith(\"http:\") || url.startsWith(\"https:\")) { webView.load(url); return false; } else { return super.isNeedLoadUrl(webView, request); } } }); 除此之外，WebAgent对象还提供了相关的回调函数以观测页面状态的变更，如onLoadingPage、onPageLoaded、onError等方法。WebView提供Navigator类进行历史记录的浏览和处理，通过getNavigator()方法获取该类的对象，使用canGoBack()或canGoForward()方法检查是否可以向后或向前浏览，使用goBack()或goForward()方法向后或向前浏览，示例代码如下： Navigator navigator = webView.getNavigator(); if (navigator.canGoBack()) { navigator.goBack(); } if (navigator.canGoForward()) { navigator.goForward(); } 3.WebView加载本地Web页面 将本地的HTML文件放在\"resources/rawfile/\"目录下，在本教程中命名为test.html。在HarmonyOS系统中，WebView要访问本地Web文件，需要通过DataAbility的方式进行访问，DataAbility的具体使用方法可以参考开发 DataAbility,关于DataAbility的相关知识，后面也会继续展示，谁让他是最重要的内容呢。 在\"entry/src/main/config.json\"中完成DataAbility的声明，示例代码如下： module\": { ...... \"abilities\": [ { \"name\": \"com.huawei.codelab.DataAbility\", \"type\": \"data\", \"uri\": \"dataability://com.example.harmonyosdemo.DataAbility\" } ] } 另外需要实现一个DataAbility，通过实现openRawFile(Uri uri, String mode)方法，完成WebView对本地Web页面的访问，示例代码如下： public class DataAbility extends Ability { ... @Override public RawFileDescriptor openRawFile(Uri uri, String mode) throws FileNotFoundException { if (uri == null) {; return super.openRawFile(uri, mode); } String path = uri.getEncodedPath(); int splitIndex = path.indexOf('/', 1); String providerName = Uri.decode(path.substring(1, splitIndex)); String rawFilePath = Uri.decode(path.substring(splitIndex + 1)); RawFileDescriptor rawFileDescriptor = null; try { rawFileDescriptor = getResourceManager().getRawFileEntry(rawFilePath).openRawFileDescriptor(); } catch (IOException e) { // 异常处理 } return rawFileDescriptor; } } 在\"slice/MainAbilitySlice.java\"中声明需要访问的文件路径，通过webview.load(String url)方法加载本地Web页面，可以通过WebConfig类的对象对WebView访问DataAbility的能力进行配置，示例代码如下： private static final String URL_LOCAL = \"dataability://com.huawei.codelab.DataAbility/resources/rawfile/test.html\"; // 配置是否支持访问DataAbility资源，默认为true webConfig.setDataAbilityPermit(true); webview.load(URL_LOCAL); 4. 实现应用与WebView中的Web页面间的通信 本教程以本地Web页面\"resources/rawfile/test.html\"为例介绍如何实现应用与WebView中的Web页面间交互。 首先需要对WebConfig进行配置，使能WebView与Web页面JavaScript交互的能力，示例代码如下： // 配置是否支持JavaScript，默认值为false webConfig.setJavaScriptPermit(true); 1.应用调用Web页面 在\"resources/rawfile/test.html\"中编写callJS方法，待应用调用，示例代码如下： // 应用调用Web页面 function callJS(message) { alert(message); } 在\"slice/MainAbilitySlice.java\"中实现应用对JavaScript的调用，示例代码如下： webview.executeJs(\"javascript:callJS('这是来自JavaSlice的消息')\", msg -> { // 在这里处理Js的方法的返回值 }); 我们可以通过setBrowserAgent方法设置自定义BrowserAgent对象，以观测JavaScript事件及通知等，通过复写onJsMessageShow方法来接管Web页面弹出Alert对话框的事件，示例代码如下： webview.setBrowserAgent(new BrowserAgent(this) { @Override public boolean onJsMessageShow(WebView webView, String url, String message, boolean isAlert, JsMessageResult result) { LogUtil.info(TAG,\"BrowserAgent onJsMessageShow : \" + message); if (isAlert) { // 将Web页面的alert对话框改为ToastDialog方式提示 new ToastDialog(getApplicationContext()).setText(message).setAlignment(LayoutAlignment.CENTER).show(); // 对弹框进行确认处理 result.confirm(); return true; } else { return super.onJsMessageShow(webView, url, message, isAlert, result); } } }); 2.Web页面使用JavaScript调用应用 在\"resources/rawfile/test.html\"中编写按钮，当按钮被点击时实现JavaScript对应用的调用，示例代码如下： 调用Java方法 function sendData() { if (window.JsCallJava && window.JsCallJava.call) { // Web页面调用应用 var rst = window.JsCallJava.call(\"这个是来自本地Web页面的消息\"); } else { alert('发送消息给WebviewSlice失败'); } } 在\"slice/MainAbilitySlice.java\"中实现应用对JavaScript发起的调用的响应，示例代码如下： private static final String JS_NAME = \"JsCallJava\"; webview.addJsCallback(JS_NAME, str -> { // 处理接收到的JavaScript发送来的消息，本教程通过ToastDialog提示确认收到Web页面发来的消息 new ToastDialog(this).setText(str).setAlignment(LayoutAlignment.CENTER).show(); // 返回给JavaScript return \"Js Call Java Success\"; }); 总结 通过上面的完整代码，我们已经完成了webbiew的基本使用 仓库地址：https://github.com/ITmxs/hm_webview 第二步删除默认代码 打开index.hml文件，里面有默认代码如下： 山茶 第三步，开始学习 首先将图片放到common文件夹下面的images里面，注意，我的图片文件名是flutter.png， 从上面布局效果图可以看到，界面主要由image组件和text组件组成，我们现在index.html中添加image组件和text组件，并添加对应的class，用于设置组件的显示效果，代码如下： translate rotate rotateY scale opacity 第四步，为页面设计样式 在这个任务中，我们将一起为任务二中写好的页面添加样式，上面所有的组件都定义了class属性，它对应的样式都定义在index.css中，有关css更多的知识可以参考css语法参考。 这部分定义了整个页面中各个组件的样式。在index.css中先添加如下代码： .container { background-color: #F8FCF5; flex-direction: column; justify-content: center; align-items: center; } .img { margin-top: 10px; height: 100px; width: 100px; animation-timing-function: ease; animation-duration: 2s; animation-delay: 0s; animation-fill-mode: forwards; animation-iteration-count: infinite; } .text { font-size: 20px; } .img-translate { animation-name: translateAnim; } .img-rotate { animation-name: rotateAnim; } .img-rotateY { animation-name: rotateYAnim; } .img-scale { animation-name: scaleAnim; } .img-mixes { animation-name: mixesAnim; } .img-opacity { animation-name: opacityAnim; } /*从-100px平移到100px*/ @keyframes translateAnim { from { transform: translate(-100px); } to { transform: translate(100px); } } /*从0°旋转到360°*/ @keyframes rotateAnim { from { transform: rotate(0deg); } to { transform: rotate(360deg); } } /*沿Y轴旋转，从0°旋转到360°*/ @keyframes rotateYAnim { from { transform: rotateY(0deg); } to { transform: rotateY(360deg); } } /*从0倍缩放到1.2倍大小*/ @keyframes scaleAnim { from { transform: scale(0); } to { transform: scale(1.2); } } /*透明度从0变化到1*/ @keyframes opacityAnim { from { opacity: 0; } to { opacity: 1; } } 通过一个代码示例，实现image组件的平移、缩放、旋转和透明度变化动效。希望通过本教程，各位开发者可以对JS通用动画样式具有更深刻的认识。 在实现过程过也遇到一些问题，顺便做个记录 使用标签引入的本地图片无法加载 使用标签引入本地图片，但图片无法加载的可能情况有三种： 没有给图片设置宽度和高度，需要在对应的“page”目录下的 css 样式文件中设置图 片的宽高。 使用标签的图片不会自动缩放，图片宽高超过组件的宽高会自动 截取。 图片引入路径错误。图片引入的路径必须是项目编译后的静态文件的路径。  在导入图片或添加/删除页面后没有重新编译。 参考 动画样式： https://developer.huawei.com/consumer/cn/codelabsPortal/carddetails/HarmonyOS-WebView https://flutter.cn/docs/cookbook/design/themes © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 20:57:11 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/05从零到1学鸿蒙.html":{"url":"connent/鸿蒙/05从零到1学鸿蒙.html","title":"05从零到1学鸿蒙","keywords":"","body":" 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 今天我从认识鸿蒙开始，然后从零到1写个demo，我与鸿蒙结缘，还得是坚果大哥的推荐，当时是坚果老师说可以了解一下鸿蒙，运气好的话，还可以顺便拿个鸿蒙手环，这不，就来了。 首先认识一下鸿蒙系统是什么？ 鸿蒙系统是什么 鸿蒙OS分布式操作系统简介鸿蒙系统（HarmonyOS)，是第一款基于微内核的全场景分布式OS，是华为自主研发的操作系统。现被华为捐献给开放原子基金会管理，为开放原子基金会下的一个项目。 从 系统定位 上来说，HarmonyOS是一款“面向未来”、面向全场景（移动办公、运动健康、社交通信、媒体娱乐等）的分布式操作系统。 HarmonyOS有三大特征： 搭载该操作系统的设备在系统层面融为一体、形成超级终端，让设备的硬件能力可以弹性扩展，实现设备之间硬件互助，资源共享 面向开发者，实现一次开发，多端部署，这和Flutter差不多，就是不知道有没有人做过这方面的测评。 一套操作系统可以满足不同能力的设备需求，实现统一OS，弹性部署 鸿蒙HarmonyOS和OpenHarmony的关系 HarmonyOS 实际上分为两个部分，一部分是OpenHarmonyOS，另一部分是包括 HMS 在内的闭源应用与服务。 OpenHarmonyOS 是鸿蒙操作系统中开源的部分，类似于安卓系统中的 AOSP 项目，该项目目前由开放原子开源基金会负责社区化的开源运营，而 HarmonyOS 是基于 OpenHarmonyOS 的商用发行版。 鸿蒙社区 51cto鸿蒙专区 华为鸿蒙专区 电子发烧友鸿蒙专区 官方资源 鸿蒙开发者文档 gitee源码地址 鸿蒙应用开发IDE(DevEco studio) 鸿蒙设备开发IDE(DevEco Device Tool) 开放原子基金会 DevEco Marketplace 鸿蒙官网地址汇总 https://harmonyos.51cto.com/posts/7704 接下来就开始做自己的第一个鸿蒙应用 第一步，新建项目 打开编辑器选择新建项目，我们选择Java 按照如下方式，创建 点击finish即可完成，此时可以 第二步，远程调试 这个时候可以选择虚拟机进行调式，这里我选择远程调试， 在这儿的话要注册成为开发者才可以，如何成为开发者，我会视情况，在后面的文章中更新， 点击即可，稍等就会出现下图所示的运行界面，这样我们的第一个demo 接下来我们就来了解一下项目结构，这样也方便后面的开发， Java工程目录结构 Java工程目录结构如下图所示。 .gradle：Gradle配置文件，由系统自动生成，一般情况下不需要进行修改。 entry ：默认启动模块（主模块），开发者用于编写源码文件以及开发资源文件的目录。 entry>libs：用于存放entry模块的依赖文件。 entry>src>main>Java：用于存放Java源码。 entry>src>main>resources：用于存放应用/服务所用到的资源文件，如图形、多媒体、字符串、布局文件等。 好的，这样我们把目录结构也就了解完了 总结 今天我主要从鸿蒙是什么，到鸿蒙具备的那些特征，以及鸿蒙相关的资料，到最后运行了Java版的鸿蒙、顺便了解了Java目录结构，下一节会带来第一个小实例。 在Java UI框架中，提供了两种编写布局的方式：在XML中声明UI布局和在代码中创建布局。我将通过XML的方式编写第一个页面，通过代码的方式编写第二个页面，这样 © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 20:53:48 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/06路由跳转.html":{"url":"connent/鸿蒙/06路由跳转.html","title":"06Java UI框架初探和路由跳转实现","keywords":"","body":"春节不停更，此文正在参加「星光计划-春节更帖活动 Java UI框架初探和路由跳转实现 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 上一节demo是已经跑起来了，这个时候其实你已经比好多人厉害了，不过和运营沟通的时候，说是用了外链，然后好多社区的小伙伴已经都是对鸿蒙有一定认识的，而且外链老用户也加了，所以不建议加，不过有个疑惑就是能保证下一个读者看到类似的外链，对鸿蒙有更深的认识吗，好的，废话不多说，我们继续今天 的内容。 Java UI框架概述 应用将在屏幕上显示一个用户界面，该界面用来显示所有可被用户查看和交互的内容。 应用中所有的用户界面元素都是由Component和ComponentContainer对象构成。Component是绘制在屏幕上的一个对象，用户能与之交互。ComponentContainer是一个用于容纳其他Component和ComponentContainer对象的容器。 Java UI框架提供了一部分Component和ComponentContainer的具体子类，即创建用户界面（UI）的各类组件，包括一些常用的组件（比如：文本、按钮、图片、列表等）和常用的布局（比如：DirectionalLayout和DependentLayout）。用户可通过组件进行交互操作，并获得响应。 在UI框架中，具体的布局类通常以XXLayout命名，完整的用户界面是一个布局，用户界面中的一部分也可以是一个布局。布局中容纳Component与ComponentContainer对象。 在Java UI框架中，提供了两种编写布局的方式： 在XML中声明UI布局 在代码中创建布局。 我将通过XML的方式编写第一个页面，通过代码的方式编写第二个页面，这样两种方法就都学会了，我是不是很机智呢，哈哈。 在Project窗口，点击“entry > src > main > resources > base > layout”，打开“ability_main.xml”文件。在Project窗口，点击“entry > src > main > resources > base > layout”，打开“ability_main.xml”文件。这点和安卓类似， （可选）在Project窗口，点击“entry > src > main > resources > base > element”，打开“string.json”文件，可在此文件内声明所需引用的资源内容。关于取值为string类型的文本属性，可以直接设置文本字串，也可以引用string资源（推荐使用）。string.json的示例代码如下： { \"string\":[ { \"name\":\"entry_MainAbility\", \"value\":\"entry_MainAbility\" }, { \"name\":\"mainability_description\", \"value\":\"Java_Empty Ability\" }, { \"name\":\"mainability_HelloWorld\", \"value\":\"Hello World\" }, { \"name\":\"button_Next\", \"value\":\"NextPage\" } ] } 1第一个页面内有一个文本和一个按钮，使用DependentLayout布局，通过Text和Button组件来实现，其中vp和fp分别表示虚拟像素和字体像素。本次示例展示两个组件的显示文本分别采用直接设置文本字串、引用string资源（推荐使用）的方式。“ability_main.xml”的示例代码如下： 按钮的背景是蓝色胶囊样式，可以通过graphic目录下的XML文件来设置。 右键点击“graphic”文件夹，选择“New > File”，命名为“background_button.xml”，单击回车键。 “background_button.xml”的示例代码如下： 在layout目录下的“ability_main.xml”文件中，使用background_element=\"$graphic:background_button\"的方式引用“background_button.xml”文件： 在XML文件中添加组件后，需要在Java代码中加载XML布局。 在Project窗口，选择“entry > src > main > java > com.example.myapplication > slice” ，打开“MainAbilitySlice.java”文件，使用setUIContent方法加载“ability_main.xml”布局。此外，运行代码前需采用import（可使用Alt+Enter快捷键）引入对应类，否则会产生报错提示。 说明 package com.example.harmonyosjava.slice; import com.example.harmonyosjava.ResourceTable; import ohos.aafwk.ability.AbilitySlice; import ohos.aafwk.content.Intent; public class MainAbilitySlice extends AbilitySlice { @Override public void onStart(Intent intent) { super.onStart(intent); super.setUIContent(ResourceTable.Layout_ability_main);// 加载layout目录下的XML布局 } @Override public void onActive() { super.onActive(); } @Override public void onForeground(Intent intent) { super.onForeground(intent); } } 创建另一个页面 在上一节中，我们用XML的方式编写了一个包含文本和按钮的页面。为了帮助开发者熟悉在代码中创建布局的方式，接下来我们使用代码的方式编写第二个页面。 1.在Project窗口，打开“entry > src > main > java > com.xxx.myapplication”，右键点击“slice”文件夹，选择“New > Java Class”，命名为“SecondAbilitySlice”，单击回车键。 2.第二个页面上有一个文本。打开“SecondAbilitySlice”文件，添加一个Text，示例代码如下 package com.example.harmonyosjava.slice; import com.example.harmonyosjava.ResourceTable; import ohos.aafwk.ability.AbilitySlice; import ohos.aafwk.content.Intent; public class MainAbilitySlice extends AbilitySlice { @Override public void onStart(Intent intent) { super.onStart(intent); super.setUIContent(ResourceTable.Layout_ability_main);// 加载layout目录下的XML布局 } @Override public void onActive() { super.onActive(); } @Override public void onForeground(Intent intent) { super.onForeground(intent); } } 实现页面跳转 打开第一个页面的“MainAbilitySlice.java”文件，添加按钮的响应逻辑，实现点击按钮跳转到下一页，示例代码如下： //请根据实际工程/包名引入 package com.example.harmonyosjava.slice; import com.example.myapplication.ResourceTable; import ohos.aafwk.ability.AbilitySlice; import ohos.aafwk.content.Intent; import ohos.agp.components.Button; public class MainAbilitySlice extends AbilitySlice { @Override public void onStart(Intent intent) { super.onStart(intent); super.setUIContent(ResourceTable.Layout_ability_main); Button button = (Button) findComponentById(ResourceTable.Id_button); // 点击按钮跳转至第二个页面 button.setClickedListener(listener -> present(new SecondAbilitySlice(), new Intent())); } } 好的，页面跳转的实现就是这样，是不是感觉和安卓开发有点类似，希望我们可以将所学融会贯通。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-20 20:46:44 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/07config.json.html":{"url":"connent/鸿蒙/07config.json.html","title":"07Config.json","keywords":"","body":"春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 上一节我在webview的实现中，用到了几个文件夹，这是单独拎出来，做一个介绍，这样的好处就是可以使你更加容易理解一个应用的开发流程。 第一个就是config.json 配置文件“config.json”采用JSON文件格式，其中包含了一系列配置项，每个配置项由属性和值两部分构成： 属性出现顺序不分先后，但是每个属性最多只允许出现一次。 每个属性的值为JSON的基本数据类型（数值、字符串、布尔值、数组、对象或者null类型） 那我我们来看一下他的这个文件里都包含那些内容，按照我学习小程序的经验，小程序里有app.json文件，我们就结合小程序来看看他的这里面的东西 小程序启动之后首先就是解析app.json，其实鸿蒙也一样，应用启动之后，先解析config.json文件。 config.json分为三个部分：app 、deviceConfig 、module 也可以通过这个截图查看，我这里展示的三块是缩放后的内容，也是为了方便观察。 app是整个项目的配置，包含了厂商信息、版本号等。 deviceConfig：表示应用在设备上的配置信息。 module：表示整个代码的配置信息。 接下来就详细了解一下 1.app \"app\": { \"package\": \"com.example.harmonyosdemo\", //新建项目时指定的PackageName，而且IDE建议以 com.开头 \"name\": \".MyApplication\", \"mainAbility\": \"com.example.harmonyosdemo.MainAbility\", //根据新建项目时指定的PackageName 的第一个 . 之后的字符串 \"version\": { //版本 \"code\": 1, //版本号，目前测试看，系统并不会阻止降级安装。 \"name\": \"1.0\" //版本名 }, \"apiVersion\": { //依赖的鸿蒙SDK版本 \"compatible\": 3, //兼容版本 \"target\": 3 //编译版本 } }, bundleName包名，你创建时候的 vendor，是应用开发厂商的描述，也就是开发公司的名字。我这是这是一个demo，所以是example，后面正式开发的时候记得修改。 version：版本号，包含：name、code。通常通过检查code，进行版本升级。 2.deviceConfig解析 deviceConfig：应用在设备上配置信息，进程名等等，可以包含default、phone、tablet、tv、car、wearable、liteWearable和smartVision等属性。default标签内的配置是适用于所有设备通用，其他设备类型如果有特殊的需求，则需要在该设备类型的标签下进行配置。 比如我这里设置的是为了能在http下也可以请求成功，鸿蒙的默认是https访问模式，如果您的请求网址是http开头的，请在config.json文件中的deviceConfig下，添加如下设置 \"deviceConfig\": { \"default\": { \"network\": { \"cleartextTraffic\": true } } }, 3.module解析 \"module\": { //模块列表，有三个必填的属性 : package,deviceType,distro \"package\": \"com.example.harmonyosdemo\", //模块的包名 \"name\": \".Learning\", //模块名称 \"reqCapabilities\": [ \"video_support\" ], \"deviceType\": [ //目前看是有 \"default\",\"tv\",\"wearable\",smartVision 。 \"tv\" ], \"distro\": { //distro下面都是必填项 \"deliveryWithInstall\": true, //是否在应用安装时，安装此模块的 hap \"moduleName\": \"entry\", \"moduleType\": \"entry\" //现在是有 entry,feature,har 三种。 }, \"defPermissions\": { //其它应用要访问你的App时需要拥有的权限。 \"name\": \"com.example.harmonyosdemo.DataAbilityShellProvider.PROVIDER\", //权限名称 \"grantMode\": \"user_grant\" //user_grant 或者 system_grant }, \"reqPermissions\": [ //你的应用需要的权限列表，这里写明后，同样需要运行时申请。 { \"name\": \"ohos.permission.INTERNET\" //举例：网络访问权限。 } ], \"abilities\": [ //Ability列表 { \"skills\": [ { \"entities\": [ \"entity.system.home\" //在全部应用上面显示此Ability ], \"actions\": [ \"action.system.home\" //默认启动此Ability ] } ], \"orientation\": \"landscape\", //横屏 \"formEnabled\": false, //是否支持AbilityForm。 \"name\": \"com.aos.learning.MainAbility\", //Ability名称 \"icon\": \"$media:icon\", //Ability图标 \"description\": \"$string:mainability_description\", //Ability描述 \"label\": \"Learning\", //Ability标题 \"type\": \"page\", //Ability类型 ：PageAbility or ServiceAbility or DataAbility \"launchType\": \"standard\" //启动模式，目前支持 standard模式和 singleton模式。 } ] } } 参考表来自于 package 包名 name是hap包的名字，至于什么是HAP,我在后面介绍 mainAbility表示HAP包的入口ability名称，可自定义，这样你后期调试也会简单 deviceType表示项目可以在哪些设备上运行。 因为可能有多个设备，所以有个方括号，表示这些值可以写到一个数组中。如下，你能看懂是那些设备吧，其实这些你应该在创建项目的时候就观察到。 \"deviceType\": [ \"phone\", \"tablet\", \"tv\", \"wearable\", \"car\" ], distro表示HAP包的描述信息 deliveryWithInstall 当前hap包是否可以支持随应用安装。一般都写成true。 moduleName：当前HAP的名称 moduleType：表示当前HAP的类型。entry也表示当前的hap是一个主要的模块，可以单独安装并运行 abilities：代码中每一个页面的配置信息。 HarmonyOS的DevEco Studio支持两种编辑config.json的方式，分别是代码编辑视图和可视化编辑视图。 1.代码视图 { \"app\": { \"bundleName\": \"com.example.harmonyosdemo\", \"vendor\": \"example\", \"version\": { \"code\": 1000000, \"name\": \"1.0.0\" } }, \"deviceConfig\": { \"default\": { \"network\": { \"cleartextTraffic\": true } } }, \"module\": { \"package\": \"com.example.harmonyosdemo\", \"name\": \".MyApplication\", \"mainAbility\": \"com.example.harmonyosdemo.MainAbility\", \"deviceType\": [ \"phone\", \"tablet\", \"tv\", \"wearable\", \"car\" ], \"distro\": { \"deliveryWithInstall\": true, \"moduleName\": \"entry\", \"moduleType\": \"entry\", \"installationFree\": false }, \"abilities\": [ { \"skills\": [ { \"entities\": [ \"entity.system.home\" ], \"actions\": [ \"action.system.home\" ] } ], \"orientation\": \"unspecified\", \"visible\": true, \"name\": \"com.example.harmonyosdemo.MainAbility\", \"icon\": \"$media:icon\", \"description\": \"$string:mainability_description\", \"label\": \"$string:entry_MainAbility\", \"type\": \"page\", \"launchType\": \"standard\" }, { \"name\": \"com.example.harmonyosdemo.DataAbility\", \"icon\": \"$media:icon\", \"description\": \"$string:dataability_description\", \"type\": \"data\", \"uri\": \"dataability://com.example.harmonyosdemo.DataAbility\" } ], \"defPermissions\": [ { \"name\": \"com.example.harmonyosdemo.DataAbilityShellProvider.PROVIDER\" } ], \"reqPermissions\": [ { \"reason\": \"\", \"name\": \"ohos.permission.INTERNET\" } ] } } 2. 编辑视图 总结： 这里了解了config.json的三个部分，app 、deviceConfig 、module，以及他的两种编辑方式，大家可以按照自己的需求实现自己想要的。 参考文档：应用配置介绍 © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-22 11:44:52 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/08为自己的鸿蒙应用增加卡片.html":{"url":"connent/鸿蒙/08为自己的鸿蒙应用增加卡片.html","title":"08为自己的鸿蒙应用增加卡片","keywords":"","body":"春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 Java卡片开发 在开始之前可以先看下这张图，我们不仅陷入思索，这种卡片是如何制作的，接下来我们就一探究竟，当然，由于我是刚开始做，所以布局这方面如果做的不好，还是希望大家见谅。 在此之前，我们先来了解一下 什么是服务卡片 服务卡片是FA的一种主要信息呈现形式，开发者可以在卡片中展示用户最关心的FA数据，并可以通过点击卡片内容直接打开FA。例如， 支付类FA，可以在服务卡片中展示付钱，收钱功能，点击就可以直接启动，支付类FA, 天气类FA，可以在服务卡片中展示当前的基本天气信息，点击卡片启动天气FA， 支持的尺寸包括：12、22、24和44。 服务卡片提供了多种类型的模板，开发者可以根据需要展示的信息类型灵活选择模板，快速构建服务卡片。 https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ide_service_widget-0000001078566997 使用方面需要了解到的 每个FA最多可以配置16张服务卡片。其实16张完全用不到，3.5个足以。 JS卡片不支持调试。我在本文用的Java，但是你也要了解js相关的不是。 创建服务卡片 DevEco Studio提供服务卡片的一键创建功能，可以快速创建和生成服务卡片模板。 对于创建新工程，可以在工程向导中勾选“Show in service center”，该参数表示是否在服务中心露出，勾选该参数会同步创建服务卡片模板。 如果Project type为Atomic service，则会同步创建一个2*2的服务卡片模板，同时还会创建入口卡片。 如果Project type为Application，则只会创建一个2*2的服务卡片模板。 卡片创建完成后，会在工程目录下生成EntryCard目录。 在该目录下，每个拥有EntryCard的模块，都会生成一个和模块名相同的文件夹，同时还会默认生成一张2x2的快照型EntryCard图片（png格式）。 开发者可以将其替换为提前设计好的2x2快照图：将新的快照图拷贝到上图目录下，删除默认图片，新图片命名遵循格式“卡片名称-2x2.png”。 在已有工程中，新添加服务卡片，可以通过如下方法进行创建。 打开一个工程，创建服务卡片，创建方法包括如下两种方式： 选择模块（如entry模块）下的任意文件，点击菜单栏File > New > Service Widget创建服务卡片。 选择模块（如entry模块）下的任意文件，点击右键 > New > Service Widget创建服务卡片。 在Choose a Template for Your Service Widget界面中，选择卡片模板，点击Next。 说明 如果选择带有Super Visual的卡片模板，则支持使用低代码进行开发，具体请参考使用低代码开发服务卡片。 在Configure Your Service Widget界面中，配置卡片的基本信息，包括： Service widget name：卡片的名称，在同一个FA中，卡片名称不能重复，且只能包含数字、字母和下划线。 Description：卡片的描述信息。 Module name：卡片所属的模块。 Select ability/New ability ：选择一个挂靠服务卡片的Page Ability，或者创建一个新的Page Ability。 说明 如果选择的Ability是继承AceAbility时，请参考JS卡片开发指导的步骤2进行修改。 Type：卡片的开发语言类型。 JS component name：Type选择JS时需要设置卡片的JS Component名称。 Support dimensions：选择卡片的规格，同时还可以查看卡片的效果图预览。部分卡片支持同时设置多种规格。 点击Finish完成卡片的创建。创建完成后，工具会自动创建出服务卡片的布局文件，并在config.json文件中写入服务卡片的属性字段，关于各字段的说明请参考应用配置文件说明。 卡片创建完成后，请根据Java卡片开发指导或JS卡片开发指导，完成服务卡片的开发，详情请参考服务卡片开发指南。 预览服务卡片 在开发服务卡片过程中，支持对卡片进行实时预览。服务卡片通过XML或JS文件进行布局设计，在开发过程中，可以对布局XML/JS文件进行实时预览，只要在XML/JS布局文件中保存了修改的源代码，在预览器中就可以实时查看布局效果。在Phone和Tablet服务卡片的预览效果中，每个尺寸的服务卡片提供3种预览效果，分别为极窄（Minimum）、标准（Default）、极宽(Maximum)，开发者应确保三种尺寸的显示效果均正常，以便适应不同屏幕尺寸的设备。 config.json文件\"abilities\"配置forms模块细节如下，各属性详情可见表1。 \"forms\": [ { \"name\": \"Form_Java\", \"description\": \"form_description\", \"type\": \"Java\", \"colorMode\": \"auto\", \"isDefault\": true, \"updateEnabled\": true, \"scheduledUpdateTime\": \"10:30\", \"updateDuration\": 1, \"defaultDimension\": \"2*2\", \"formVisibleNotify\": true, \"supportDimensions\": [ \"1*2\", \"2*2\", \"2*4\", \"4*4\" ], \"landscapeLayouts\": [ \"$layout:form_ability_layout_1_2\", \"$layout:form_ability_layout_2_2\", \"$layout:form_ability_layout_2_4\", \"$layout:form_ability_layout_4_4\" ], \"portraitLayouts\": [ \"$layout:form_ability_layout_1_2\", \"$layout:form_ability_layout_2_2\", \"$layout:form_ability_layout_2_4\", \"$layout:form_ability_layout_4_4\" ], \"formConfigAbility\": \"ability://SecondFormAbility\", \"metaData\": { \"customizeData\": [ { \"name\": \"originWidgetName\", \"value\": \"com.huawei.weather.testWidget\" } ] } } ] 说明 \"forms\"模块中的name为卡片名，即在onCreateForm中根据AbilitySlice.PARAM_FORM_NAME_KEY可取到的值。 在卡片所在的\"abilities\"中还需要配置\"visible\": true和\"formsEnabled\": true。 参考文档 https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-service-widget-provider-java-0000001104082220 © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 12:06:12 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/09应用的生命周期.html":{"url":"connent/鸿蒙/09应用的生命周期.html","title":"09应用的生命周期","keywords":"","body":"应用的生命周期 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 在之前的文章里写了config.js的一些基础 当然如果你的项目是js开发的，那么你还会发现不仅仅只有三个模块，在module还加了一个js 它表示基于ArkUI框架开发的JS模块集合，其中的每个元素代表一个 JS模块的信息。 { \"app\": { \"bundleName\": \"com.example.myharmonydemo\", \"vendor\": \"example\", \"version\": { \"code\": 1000000, \"name\": \"1.0.0\" } }, \"deviceConfig\": {}, \"module\": { \"package\": \"com.example.myharmonydemo\", \"name\": \".MyApplication\", \"mainAbility\": \"com.example.myharmonydemo.MainAbility\", \"deviceType\": [ \"phone\" ], \"distro\": { \"deliveryWithInstall\": true, \"moduleName\": \"entry\", \"moduleType\": \"entry\", \"installationFree\": true }, \"abilities\": [ { \"skills\": [ { \"entities\": [ \"entity.system.home\" ], \"actions\": [ \"action.system.home\" ] } ], \"name\": \"com.example.myharmonydemo.MainAbility\", \"icon\": \"$media:icon\", \"description\": \"$string:mainability_description\", \"label\": \"$string:entry_MainAbility\", \"type\": \"page\", \"launchType\": \"standard\" } ], \"js\": [ { \"pages\": [ \"pages/index/index\" ], \"name\": \"default\", \"window\": { \"designWidth\": 720, \"autoDesignWidth\": true } } ] } } 那我们就来看一下这个js里都有些什么内容 \"js\": [ { \"name\": \"default\", \"pages\": [ \"pages/index/index\", \"pages/detail/detail\" ], \"window\": { \"designWidth\": 720, \"autoDesignWidth\": false }, \"type\": \"form\" } ] 由代码可知js标签包含三部分 标签 类型 默认值 必填 描述 name string default 是 表示JS Component的名字。该标签不可缺省，默认值为default。 pages Array - 是 表示JS Component的页面用于列举JS Component中每个页面的路由信息[页面路径+页面名称]。该标签不可缺省，取值为数组，数组第一个元素代表JS FA首页。 window Object - 否 window用于定义与显示窗口相关的配置。 type 字符串 表示JS应用的类型。取值范围如下：normal：标识该JS Component为应用实例。form：标识该JS Component为卡片实例 window包含两个属性 designWidth：自定义宽度,根据实际设备宽度来缩放元素大小 autoDesignWidth：自动适配,表示页面设计基准宽度是否自动计算。当配置为true时，designWidth将会被忽略，设计基准宽度由设备宽度与屏幕密度计算得出。 接下来就是app.js的一些基础 应用的生命周期 export default { data: { test: \"我是全局参数\" },//页面获取全局 export var appData = getApp().data; onCreate() { console.info('当应用创建时调用。'); }, onShow() { console.info('当应用处于前台时触发。'); }, onHide() { console.info('当应用处于后台时触发。'); }, onDestroy() { console.info('当应用退出时触发。'); } }; 看完之后是不是觉得和小程序的生命周期有一拼，下面是小程序的生命周期 App({ /** * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次） */ onLaunch: function () { }, /** * 当小程序启动，或从后台进入前台显示，会触发 onShow （应用进入前台） */ onShow: function (options) { }, /** * 当小程序从前台进入后台，会触发 onHide （应用进入后台） */ onHide: function () { }, /** * 当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息 */ onError: function (msg) { } }) 单个页面的生命周期 export default { data: { title:\"我是首页\", continueAbilityData: {} }, // shareData的数据会在onSaveData触发时与saveData一起传送到迁移目标FA，并绑定到其shareData数据段上 // shareData的数据可以直接使用this访问。eg:this.remoteShareData1 shareData: { remoteShareData1: 'share data for distribute', remoteShareData2: { item1: 0, item2: false, item3: 'inner string' }, remoteShareData3: [4, 5, 6] }, onInit() { console.info('当应用创建时调用。'); //$t代表国际化翻译 this.title = this.$t('strings.world'); }, onReady() { console.info('页面创建完成时触发，只触发一次。'); }, onShow() { console.info('页面显示时触发。'); }, onHide() { console.info('页面消失时触发。'); }, onDestroy() { console.info('页面销毁时触发。'); }, onBackPress() { /** * 返回true表示页面自己处理返回逻辑。 * 返回false表示使用默认的返回逻辑。 * 不返回值会作为false处理。 * */ console.info('当用户点击返回按钮时触发。'); }, onActive() { console.info('页面激活时触发。'); }, onInactive() { console.info('页面暂停时触发。'); }, onNewRequest() { console.info('FA已经启动时收到新的请求后触发。'); }, onStartContinuation() { console.info('判断当前的状态是不是适合迁移。'); return true; }, onSaveData(saveData) { console.info('数据保存到savedData中进行迁移。'); var data = this.continueAbilityData; Object.assign(saveData, data) }, onRestoreData(restoreData) { console.info('收到迁移数据，恢复。'); var data = this.continueAbilityData; this.continueAbilityData = restoreData; }, onCompleteContinuation(code) { console.info(\"迁移操作完成，code返回结果: code = \" + code); }, onConfigurationUpdated(configuration) { //onConfigurationUpdated页面事件需要在config.json中配置相应的configChanges标签。 console.info(\"当相应的系统配置发生变更时触发该回调，如系统字体大小，语言地区等。\"); }, } 下面是小程序单个页面的生命周期，可以对比来看。 /** * 生命周期函数--监听页面加载 */ onLoad: function (options) { }, /** * 生命周期函数--监听页面初次渲染完成 */ onReady: function () { }, /** * 生命周期函数--监听页面显示(页面打开的时候触发) */ onShow: function () { }, /** * 生命周期函数--监听页面隐藏（页面隐藏的时候触发）(打开其他页面时当前页面就认为被隐藏) */ onHide: function () { }, /** * 生命周期函数--监听页面卸载（打开A页面进入B页面，当返回A页面的时候就是B页面的卸载） */ onUnload: function () { }, /** * 页面相关事件处理函数--监听用户下拉动作 */ onPullDownRefresh: function () { }, /** * 页面上拉触底事件的处理函数 */ onReachBottom: function () { }, /** * 用户点击右上角分享 */ onShareAppMessage: function () { } 学习就是这样，如果有了参照屋，你就会发现，学习的效率高。理解起来也简单，所以如果允许的话，可以考虑先把一门技术学通，其他的就可以融会贯通。 最后我们看一下入口文件 AceAbility类是JS FA在HarmonyOS上运行环境的基类，继承自Ability。也是程序真实入口文件。 MainAbility 需要继承AceAbility package com.example.myapplication; import ohos.ace.ability.AceAbility; import ohos.aafwk.content.Intent; public class MainAbility extends AceAbility { @Override public void onStart(Intent intent) { setInstanceName(\"default\"); super.onStart(intent); } @Override public void onStop() { super.onStop(); } } 总结 这篇文章带你了解了应用的生命周期和单个页面的生命周期，通过对比发现，通过和小程序的对比，你就会发现，学习的效率高。理解起来也简单，所以如果允许的话，可以考虑先把一门技术学通，这样有了参照屋，其他的就可以融会贯通。 最后给大家带来一个彩蛋，也是因为刚安装的时候是浅色主题，不太喜欢，结合AS的修改策略，修改了华为DevEco Studio的主题色。 华为DevEco Studio怎么设置深色主题? 使用华为的DevEco Studio软件时，显示界面可以设置不同的显示主题，呈现不同的颜色，可以根据个人喜好来做更改。 点击文件菜单下的“设置”，在弹出的窗口中，选择“外观和行为” 在右侧的“外观”窗口中，点击主题边的下拉菜单，可以看到有多个主题可以选择，选择其中符合自己喜好的，点击右下角的应用，再点击确定即可。 Page Ability生命周期 https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-page-lifecycle-0000000000029840 © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-22 11:44:52 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/10Ability概述.html":{"url":"connent/鸿蒙/10Ability概述.html","title":"10Ability概述","keywords":"","body":"10Ability概述 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 鸿蒙开发核心之Ability详解 Ability是应用所具备能力的抽象，也是应用程序的重要组成部分。一个应用可以具备多种能力（即可以包含多个Ability），HarmonyOS支持应用以Ability为单位进行部署。Ability可以分为FA（Feature Ability）和PA（Particle Ability）两种类型，每种类型为开发者提供了不同的模板，以便实现不同的业务功能。   FA（Feature Ability） 中文意思是功能能力，支持Page Ability Page模板是FA唯一支持的模板，用于提供与用户交互的能力。一个Page实例可以包含一组相关页面，每个页面用一个AbilitySlice实例表示。 PA（Particle Ability） 这个里面也是支持两个能力， Service Ability 和 Data Ability 我相信你知道它们的意思，就是服务能力和数据能力。 Service模板：用于提供后台运行任务的能力。 Data模板：用于对外部提供统一的数据访问抽象。 例如，新闻APP可以通过一个Page来实现，其中包含了两个AbilitySlice：一个AbilitySlice用于展示新闻列表，另一个AbilitySlice用于展示新闻详情。Page和AbilitySlice的关系如图所示。 Page与AbilitySlice 上面的例子大家看懂了没？一个 Page 可以包含多个 AbilitySlice，但是 Page 进入前台时界面默认只展示一个AbilitySlice。默认展示的 AbilitySlice 是通过 setMainRoute() 方法来指定的。如果需要更改默认展示的 AbilitySlice，可以通过 addActionRoute() 方法为此 AbilitySlice 配置一条路由规则。 package com.example.harmonyosdemo; import com.example.harmonyosdemo.slice.MainAbilitySlice; import com.example.harmonyosdemo.slice.SecondAbilitySlice; import ohos.aafwk.ability.Ability; import ohos.aafwk.content.Intent; public class MainAbility extends Ability { @Override public void onStart(Intent intent) { super.onStart(intent); //默认显示 super.setMainRoute(MainAbilitySlice.class.getName()); //配置路由规则显示 addActionRoute( \"action.second\", SecondAbilitySlice.class.getName()); } } 看图可能更加容易理解。 此时，当其他 Page 实例期望导航到此 AbilitySlice 时，可以在 Intent 中指定 Action。addActionRoute() 方法中使用的动作命名，需要在应用配置文件（config.json）中注册： \"skills\": [ { \"entities\": [ \"entity.system.home\" ], \"actions\": [ \"action.system.home\", \"action.second\" ] } ], 当然在配置文件（config.json）中注册Ability时，可以通过配置Ability元素中的“type”属性来指定Ability模板类型，示例如下。 其中，“type”的取值可以为“page”、“service”或“data”，分别代表 Page 模板、Service 模板、Data 模板。结合下面这个图来看知道是怎么回事了，type的属性值取决于你创建Ability是选择的类型，当然你也可以后面再改。 { \"module\": { ... \"abilities\": [ { ... \"type\": \"page\" ... } ] ... } ... } 一 、Page Ability讲解 Android 中有Activity，Activity有生命周期，现在我们知道的是鸿蒙这个Page Ability是主要负责页面交互的，同样的Page Ability也是有生命周期的。 1. Page Ability 生命周期 系统管理或用户操作等行为均会引起Page实例在其生命周期的不同状态之间进行转换。Ability类提供的回调机制能够让Page及时感知外界变化，从而正确地应对状态变化（比如释放资源），这有助于提升应用的性能和稳健性。 首先来看官方的一张图 可以看到周期分别是onStart()、onActive()、onInactive()、onBackground()、onForeground()、onStop()六个，那么接下来我们就详细了解一下。 onStart() 当系统首次创建 Page Ability实例时，触发该回调。对于一个 Page Ability实例，该回调在其生命周期过程中仅触发一次，Page Ability在该逻辑后将进入 INACTIVE 状态。开发者必须重写该方法，并在此配置默认展示的 AbilitySlice。如下图所示 onActive() Page会在进入INACTIVE状态后来到前台，然后系统调用此回调。Page在此之后进入ACTIVE状态，该状态是应用与用户交互的状态。Page将保持在此状态，除非某类事件发生导致Page失去焦点，比如用户点击返回键或导航到其他Page。当此类事件发生时，会触发Page回到INACTIVE状态，系统将调用onInactive()回调。此后，Page可能重新回到ACTIVE状态，系统将再次调用onActive()回调。因此，开发者通常需要成对实现onActive()和onInactive()，并在onActive()中获取在onInactive()中被释放的资源。类似于Android的onResume。 onInactive() 当Page失去焦点时，系统将调用此回调，此后Page进入INACTIVE状态。开发者可以在此回调中实现Page失去焦点时应表现的恰当行为。类似于Android的onPause和onStop的集合体。 onBackground() 如果Page不再对用户可见，系统将调用此回调通知开发者用户进行相应的资源释放，此后Page进入BACKGROUND状态。开发者应该在此回调中释放Page不可见时无用的资源，或在此回调中执行较为耗时的状态保存操作。 onForeground() 处于BACKGROUND状态的Page仍然驻留在内存中，当重新回到前台时（比如用户重新导航到此Page），系统将先调用onForeground()回调通知开发者，而后Page的生命周期状态回到INACTIVE状态。开发者应当在此回调中重新申请在onBackground()中释放的资源，最后Page的生命周期状态进一步回到ACTIVE状态，系统将通过onActive()回调通知开发者用户。 onStop() 系统将要销毁Page时，将会触发此回调函数，通知用户进行系统资源的释放。销毁Page的可能原因包括以下几个方面： 用户通过系统管理能力关闭指定Page，例如使用任务管理器关闭Page。 用户行为触发Page的terminateAbility()方法调用，例如使用应用的退出功能。 配置变更导致系统暂时销毁Page并重建。 系统出于资源管理目的，自动触发对处于BACKGROUND状态Page的销毁。 2. AbilitySlice 生命周期 说实话一开始创建项目的时候就只有这个MainAbility和HelloWorld以及slice包下的MainAbilitySlice，后来新建了一个SecondAbility，而SecondAbilitySlice是自动生成的，这说明一个问题，它们之间有不可告人的秘密。我们可以一起来看看， 解释：AbilitySlice 作为 Page Ability的组成单元，其生命周期是依托于其所属 Page Ability生命周期的。AbilitySlice 和 Page Ability具有相同的生命周期状态和同名的回调，当 Page Ability生命周期发生变化时，它的 AbilitySlice 也会发生相同的生命周期变化。此外，AbilitySlice 还具有独立于 Page Ability的生命周期变化，这发生在同一 Page Ability中的 AbilitySlice 之间导航时，此时 Page Ability的生命周期状态不会改变。AbilitySlice 生命周期回调与 Page Ability的相应回调类似，因此不再赘述。由于 AbilitySlice 承载具体的页面，开发者必须重写 AbilitySlice 的 onStart()回调，并在此方法中通过 setUIContent()方法设置页面，如下所示： Page 与 AbilitySlice 生命周期关联   当 AbilitySlice 处于前台且具有焦点时，其生命周期状态随着所属 Page Ability的生命周期状态的变化而变化。当一个 Page Ability拥 有多个 AbilitySlice 时，例如：MyAbility 下有 FooAbilitySlice 和 BarAbilitySlice，当前 FooAbilitySlice 处于前台并获得焦点，并即将导航到 BarAbilitySlice，在此期间的生命周期状态变化顺序为： FooAbilitySlice 从 ACTIVE 状态变为 INACTIVE 状态。 BarAbilitySlice 则从 INITIAL 状态首先变为 INACTIVE 状态，然后变为 ACTIVE 状态（假定此前 BarAbilitySlice 未曾 启动）。 FooAbilitySlice 从 INACTIVE 状态变为 BACKGROUND 状态。对应两个 slice 的生命周期方法回调顺序为： FooAbilitySlice.onInactive() --> BarAbilitySlice.onStart() --> BarAbilitySlice.onActive() - -> FooAbilitySlice.onBackground() 在整个流程中，MyAbility 始终处于 ACTIVE 状态。但是，当 Page Ability被系统销毁时，其所有已 实例化的 AbilitySlice 将联动销毁，而不仅是处于前台的 AbilitySlice。 二、Service Ability Service Ability基本概念 基于Service模板的Ability（以下简称“Service”）主要用于后台运行任务（如执行音乐播放、文件下载等），但不提供用户交互界面。Service可由其他应用或Ability启动，即使用户切换到其他应用，Service仍将在后台继续运行。 Service是单实例的。在一个设备上，相同的Service只会存在一个实例。如果多个Ability共用这个实例，只有当与Service绑定的所有Ability都退出后，Service才能够退出。由于Service是在主线程里执行的，因此，如果在Service里面的操作时间过长，开发者必须在Service里创建新的线程来处理（详见线程间通信），防止造成主线程阻塞，应用程序无响应。 创建Service 介绍如何创建一个Service。 创建Ability的子类，实现Service相关的生命周期方法。Service也是一种Ability，Ability为Service提供了以下生命周期方法，开发者可以重写这些方法，来添加其他Ability请求与Service Ability交互时的处理方法。 onStart() 该方法在创建Service的时候调用，用于Service的初始化。在Service的整个生命周期只会调用一次，调用时传入的Intent应为空。 onCommand() 在Service创建完成之后调用，该方法在客户端每次启动该Service时都会调用，开发者可以在该方法中做一些调用统计、初始化类的操作。 onConnect() 在Ability和Service连接时调用，该方法返回IRemoteObject对象，开发者可以在该回调函数中生成对应Service的IPC通信通道，以便Ability与Service交互。Ability可以多次连接同一个Service，系统会缓存该Service的IPC通信对象，只有第一个客户端连接Service时，系统才会调用Service的onConnect方法来生成IRemoteObject对象，而后系统会将同一个RemoteObject对象传递至其他连接同一个Service的所有客户端，而无需再次调用onConnect方法。 onDisconnect() 在Ability与绑定的Service断开连接时调用。 onStop() 在Service销毁时调用。Service应通过实现此方法来清理任何资源，如关闭线程、注册的侦听器等。 创建Service的代码示例如下： public class ServiceAbility extends Ability { @Override public void onStart(Intent intent) { super.onStart(intent); } @Override public void onCommand(Intent intent, boolean restart, int startId) { super.onCommand(intent, restart, startId); } @Override public IRemoteObject onConnect(Intent intent) { return super.onConnect(intent); } @Override public void onDisconnect(Intent intent) { super.onDisconnect(intent); } @Override public void onStop() { super.onStop(); } } 注册Service。 Service也需要在应用配置文件中进行注册，注册类型type需要设置为service。 { \"module\": { \"abilities\": [ { \"name\": \".ServiceAbility\", \"type\": \"service\", \"visible\": true ... } ] ... } ... } 启动Service 介绍通过startAbility()启动Service以及对应的停止方法。 启动Service Ability为开发者提供了startAbility()方法来启动另外一个Ability。因为Service也是Ability的一种，开发者同样可以通过将Intent传递给该方法来启动Service。不仅支持启动本地Service，还支持启动远程Service。 开发者可以通过构造包含DeviceId、BundleName与AbilityName的Operation对象来设置目标Service信息。这三个参数的含义如下： DeviceId：表示设备ID。如果是本地设备，则可以直接留空；如果是远程设备，可以通过ohos.distributedschedule.interwork.DeviceManager提供的getDeviceList获取设备列表，详见Java API参考。 BundleName：表示包名称。 AbilityName：表示待启动的Ability名称。 启动本地设备Service的代码示例如下： Intent intent = new Intent(); Operation operation = new Intent.OperationBuilder() .withDeviceId(\"\") .withBundleName(\"com.domainname.hiworld.himusic\") .withAbilityName(\"com.domainname.hiworld.himusic.ServiceAbility\") .build(); intent.setOperation(operation); startAbility(intent); 启动远程设备Service的代码示例如下： Intent intent = new Intent(); Operation operation = new Intent.OperationBuilder() .withDeviceId(\"\") .withBundleName(\"com.domainname.hiworld.himusic\") .withAbilityName(\"com.domainname.hiworld.himusic.ServiceAbility\") .build(); intent.setOperation(operation); startAbility(intent); 执行上述代码后，Ability将通过startAbility() 方法来启动Service。 如果Service尚未运行，则系统会先调用onStart()来初始化Service，再回调Service的onCommand()方法来启动Service。 如果Service正在运行，则系统会直接回调Service的onCommand()方法来启动Service。 停止Service Service一旦创建就会一直保持在后台运行，除非必须回收内存资源，否则系统不会停止或销毁Service。开发者可以在Service中通过terminateAbility()停止本Service或在其他Ability调用stopAbility()来停止Service。 停止Service同样支持停止本地设备Service和停止远程设备Service，使用方法与启动Service一样。一旦调用停止Service的方法，系统便会尽快销毁Service。 连接Service 如果Service需要与Page Ability或其他应用的Service Ability进行交互，则须创建用于连接的Connection。Service支持其他Ability通过connectAbility()方法与其进行连接。 在使用connectAbility()处理回调时，需要传入目标Service的Intent与IAbilityConnection的实例。IAbilityConnection提供了两个方法供开发者实现：onAbilityConnectDone()是用来处理连接Service成功的回调，onAbilityDisconnectDone()是用来处理Service异常死亡的回调。 创建连接Service回调实例的代码示例如下： // 创建连接Service回调实例 private IAbilityConnection connection = new IAbilityConnection() { // 连接到Service的回调 @Override public void onAbilityConnectDone(ElementName elementName, IRemoteObject iRemoteObject, int resultCode) { // Client侧需要定义与Service侧相同的IRemoteObject实现类。开发者获取服务端传过来IRemoteObject对象，并从中解析出服务端传过来的信息。 } // Service异常死亡的回调 @Override public void onAbilityDisconnectDone(ElementName elementName, int resultCode) { } }; 连接Service的代码示例如下： // 连接Service Intent intent = new Intent(); Operation operation = new Intent.OperationBuilder() .withDeviceId(\"deviceId\") .withBundleName(\"com.domainname.hiworld.himusic\") .withAbilityName(\"com.domainname.hiworld.himusic.ServiceAbility\") .build(); intent.setOperation(operation); connectAbility(intent, connection); 同时，Service侧也需要在onConnect()时返回IRemoteObject，从而定义与Service进行通信的接口。onConnect()需要返回一个IRemoteObject对象，HarmonyOS提供了IRemoteObject的默认实现，用户可以通过继承LocalRemoteObject来创建自定义的实现类。Service侧把自身的实例返回给调用侧的代码示例如下： // 创建自定义IRemoteObject实现类 private class MyRemoteObject extends LocalRemoteObject { MyRemoteObject(){ } } // 把IRemoteObject返回给客户端 @Override protected IRemoteObject onConnect(Intent intent) { return new MyRemoteObject(); } Service Ability生命周期 与Page类似，Service也拥有生命周期，如图1所示。根据调用方法的不同，其生命周期有以下两种路径： 启动 Service 该Service在其他Ability调用startAbility()时创建，然后保持运行。其他Ability通过调用stopAbility()来停止Service，Service停止后，系统会将其销毁。 连接 Service 该Service在其他Ability调用connectAbility()时创建，客户端可通过调用disconnectAbility()断开连接。多个客户端可以绑定到相同Service，而且当所有绑定全部取消后，系统即会销毁该Service。 connectAbility()也可以连接通过startAbility()创建的Service。 图1 Service生命周期 前台Service 一般情况下，Service都是在后台运行的，后台Service的优先级都是比较低的，当资源不足时，系统有可能回收正在运行的后台Service。 在一些场景下（如播放音乐），用户希望应用能够一直保持运行，此时就需要使用前台Service。前台Service会始终保持正在运行的图标在系统状态栏显示。 使用前台Service并不复杂，开发者只需在Service创建的方法里，调用keepBackgroundRunning()将Service与通知绑定。调用keepBackgroundRunning()方法前需要在配置文件中声明ohos.permission.KEEP_BACKGROUND_RUNNING权限，同时还需要在配置文件中添加对应的backgroundModes参数。在onStop()方法中调用cancelBackgroundRunning()方法可停止前台Service。 使用前台Service的onStart()代码示例如下： // 创建通知，其中1005为notificationId NotificationRequest request = new NotificationRequest(1005); NotificationRequest.NotificationNormalContent content = new NotificationRequest.NotificationNormalContent(); content.setTitle(\"title\").setText(\"text\"); NotificationRequest.NotificationContent notificationContent = new NotificationRequest.NotificationContent(content); request.setContent(notificationContent); // 绑定通知，1005为创建通知时传入的notificationId keepBackgroundRunning(1005, request); 在配置文件中，“module > abilities”字段下对当前Service做如下配置： { \"name\": \".ServiceAbility\", \"type\": \"service\", \"visible\": true, \"backgroundModes\": [\"dataTransfer\", \"location\"] } 三 、Data Ability Data Ability基本概念 使用Data模板的Ability（以下简称“Data”）有助于应用管理其自身和其他应用存储数据的访问，并提供与其他应用共享数据的方法。Data既可用于同设备不同应用的数据共享，也支持跨设备不同应用的数据共享。 数据的存放形式多样，可以是数据库，也可以是磁盘上的文件。Data对外提供对数据的增、删、改、查，以及打开文件等接口，这些接口的具体实现由开发者提供。 URI介绍 Data的提供方和使用方都通过URI（Uniform Resource Identifier）来标识一个具体的数据，例如数据库中的某个表或磁盘上的某个文件。HarmonyOS的URI仍基于URI通用标准，格式如下： scheme：协议方案名，固定为“dataability”，代表Data Ability所使用的协议类型。 authority：设备ID。如果为跨设备场景，则为目标设备的ID；如果为本地设备场景，则不需要填写。 path：资源的路径信息，代表特定资源的位置信息。 query：查询参数。 fragment：可以用于指示要访问的子资源。 URI示例： 跨设备场景：dataability://device_id/com.domainname.dataability.persondata/person/10 本地设备：dataability:/// com.domainname.dataability.persondata/person/10 说明 本地设备的“device_id”字段为空，因此在“dataability:”后面有三个“/”。 总结  说实话写这一篇文章花费了一番功夫，不断的浏览官网上的文档然后结合实际来写，写的不是很好，请勿见怪，另外就是觉得官网的教程只是一部分，更多的需要开发者自行去探索和发现，正所谓师傅领进门，修行在个人，鸿蒙需要成长，我们开发者同样也要成长，也许不会前进的路上会很坎坷，但经历过后就会发现另一番风景，我是初学者，保持初学的态度和动力，感谢您的阅读，山高水长，后会有期！ 参考文档 https://aijishu.com/a/1060000000139663#item-1-2 https://aijishu.com/a/1060000000139663#item-1-4 © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 20:35:25 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/11我的第一个鸿蒙应用待办事项.html":{"url":"connent/鸿蒙/11我的第一个鸿蒙应用待办事项.html","title":"11我的第一个鸿蒙应用待办事项","keywords":"","body":"待办事项 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 在前几篇文章里也介绍了许多关于鸿蒙开发的技巧，今天我们就来做自己的第一个代办事项应用。鸿蒙开发和Flutter一样，都具有跨平台的特性，Flutter一套代码可以在Android，ios，web。linux，desk等部署，鸿蒙也有这样的特性，可同时在手机、大屏、手表生效，体验“一次开发、多设备部署”特性。 接下来我们开始正文 第一步必然是安装 DevEco Studio 。推荐安装3.0beta版，学习的话，用3.0还是蛮不错的。 第二部新建工程 自从微信小程序出现以来，各种“小程序”如雨后春笋一般出现。事实证明小程序这种开发方式非常好，鸿蒙 JS UI 框架采用类似的方式也是在意料之中的。 一个小程序（在鸿蒙 OS 中，也就是 Ability）由多个页面组成，每个页面由三部分组成： .hml 用来描述界面的元素 .css 用来描述界面的风格 .js 用来编写处理事件逻辑 我们来看个例子： js文件 const BUTTON_STATE_IMAGE = [\"/common/checkbutton.png\", \"/common/done.png\"]; const TAG_STATE = [\"show\", \"hide\"]; const TEXT_COLOR = [\"text-default\", \"text-gray\"]; const EVENT_LEVEL = [\"urgent\", \"senior\", \"middle\", \"low\"]; export default { title: \"任务列表\", taskList: [ { id: \"id-1\", event: \"购买礼物\", time: \"10:30\", checkBtn: BUTTON_STATE_IMAGE[1], color: TEXT_COLOR[1], showTag: TAG_STATE[1], tag: EVENT_LEVEL[1], }, { id: \"id-2\", event: \"健身锻炼\", time: \"15:30\", checkBtn: BUTTON_STATE_IMAGE[0], color: TEXT_COLOR[0], showTag: TAG_STATE[0], tag: EVENT_LEVEL[0], }, { id: \"id-3\", event: \"生日约会\", time: \"19:30\", checkBtn: BUTTON_STATE_IMAGE[0], color: TEXT_COLOR[0], showTag: TAG_STATE[0], tag: EVENT_LEVEL[2], }, ] }; css文件 .container { flex-direction: column; background-color: black; } .title { font-weight: 600; color: #ccc; background-color: black; opacity: 1; } .tag-list { width: 100%; } .todo-list-item { width: 100%; } .todo-item { width: 100%; border-radius: 2px; align-items: center; } .flex-row { display: flex; flex-direction: row; align-items: center; } .todo-name-mark { width: 100%; height: 100%; align-items: center; } .todo-name { font-size: 16px; color: white; margin-right: 2px; max-lines: 1; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; display: inline-block; vertical-align: middle; } .text-default { color: white; } .text-gray { color: gray; } .todo-mark { width: 9px; height: 9px; margin-left: 8px; border-radius: 25px; background-color: lightslategrey; } .todo-time { font-size: 14px; width: 100%; height: 100%; text-align: left; color: gray; margin-top:1px; } .urgent { background-color: firebrick; } .senior { background-color: gold; } .middle { background-color: mediumaquamarine; } .low { background-color: #0D9FFB; } .hide { display: none; } .show { display: inline-block; } .todo-image { width: 20px; height: 20px; object-fit: contain; margin-top: 1px; } .todo-text-wrapper { height: 100%; flex-grow: 1; margin: 0px 16px; flex-direction: column; } @media (device-type: tv) { .title { font-size: 22px; padding: 10px; } .tag-list { padding-top:30px; padding-left:12px; } .todo-list-item { margin-top: 20px; } .todo-image { width: 20px; height: 20px; } .todo-name { font-size: 18px; max-width: 460px } } @media (device-type: phone) { .title { font-size: 21px; padding-top: 10px; padding-bottom: 10px; padding-left: 10px; } .tag-list { padding-top:48px; } .todo-list-item { margin: 2px 8px; } .todo-name-mark { margin: 5px 0px; } .todo-name { max-width: 180px; } } @media (device-type: wearable) { .title { font-size: 26px; width: 100%; height: 54px; text-align: center; } .tag-list { padding-top:54px; } .todo-list-item { padding-left: 50px; padding-right: 25px; } .todo-name-mark { margin: 3px 0px; } .todo-name { max-width: 106px } } htm文件 2. 工作原理 要理解它的工作原理，先研究一下编译之后的代码是非常重要的。上面的三个文件，编译之后会生成一个文件，其位置在：./entry/build/intermediates/res/debug/lite/assets/js/default/pages/index/index.js index.hml 变成了创建函数： index.css 变成了 JSON 文件。 这种处理方式很妙，把 JS 不擅长处理的 XML/CSS 转换成了 JS 代码和 JSON 对象，这个转换由工具完成，避免了运行时的开销。 在没有研究编译之后的代码时，我尝试在 ace/graphic 两个包中寻找解析 HML 的代码，让我惊讶的是没有找到相关代码。看了这些生成的代码之后才恍然大悟。 计数器应用： index.hml index.css .container { flex-direction: column; justify-content: center; align-items: center; left: 0px; top: 0px; width: 454px; height: 454px; } index.js export default { data: { count: 5 }, inc() { this.count++; }, dec() { this.count--; } } 参考文档 https://my.oschina.net/u/3979680/blog/4613811?_from=gitee_search © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 19:33:36 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/12JS UI组件学习.html":{"url":"connent/鸿蒙/12JS UI组件学习.html","title":"12JS UI组件学习","keywords":"","body":"我与鸿蒙社区的一年 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 我了解鸿蒙社区其实只有一周，我学习鸿蒙也是，只有一周，但与鸿蒙结缘，时间就长了，接下来我就说一说我的故事，我是一名大三的在校生，也是坚果大哥的学弟，在坚果大佬的精神的感化下，我有了学习的方向，接下来就说一说我的故事， 我在鸿蒙社区写了第一篇帖子得到了张荣超老师的点赞，之前并不是很了解，后来才发现张荣超老师是 华为公司官方引进的首批HarmonyOS课程开发者 华为官方HDE（Huawei Developer Expert）认证 51CTO学院金牌讲师 Sun公司认证的Java工程师和Java Web工程师 Scrum联盟认证的敏捷项目管理专家等等 真的是真正的大佬，希望学习过程中能得到老师的指导就好la。 大学前了解的路径 找工作 传统路径简历，老师授课，同学交流 大学中了解到的路径 考证 竞赛 实习 学长带路 同学互助 接触到鸿蒙社区之后的路径 两个仓库github和gitee 博客平台和论坛 掘金，知乎，51CTO.华为云，开源中国，InfoQ等 开发者社区 如何成为HarmonyOS开发者 不是从编程语言开始，从开发样例玩起来开始才是正确姿势 如何导入样例 学习HarmonyOS开发，你的担心是什么？下图那个戳中了你的内心。 其实上面的这些不用担心的，只需要安装我下面的这个步骤，就可以上手， 第五步 https://playground.harmonyos.com/#/cn/onlineDemo/demo/jsUI/button © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 11:22:26 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/13实现HarmonyOS应用.html":{"url":"connent/鸿蒙/13实现HarmonyOS应用.html","title":"13四步实现HarmonyOS应用","keywords":"","body":"实现HarmonyOS应用（ets） 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 这里大概分为五步。 第一步：创建应用工程 创建开发工程 （这里以eTS工程）为例 打开DevEco Studio 2.创建一个新工程，选择模板，如Empty Ability： 3.进入配置工程界面，Project Type选择Application，Language选择eTS，其他参数根据实际需要设置即可。 修改代码文件 工程创建完成后，在Project窗口，点击“entry > src > main > ets > default > pages”，打开“index.ets”文件 第二步：实现用户界面 使用UI组件和装饰器 基础组件：Image、Text、 Video等 容器组件：Stack、Column、 List等 组件化装饰： @Component、@Entry、 @Builder 、@Extend等 实现组合目标面 配套实现页面组件开发及组件 自定义 状态管理装饰： @State 、 @Link 、@Observed、 @ObjectLink、 @StorageLink、 @Watch 实现数据驱动视图自动更新 使用UI渲染控制语法 条件渲染：if/elseif/else 进行UI描述时，根据不同状 态来动态控制组件的渲染 循环渲染： ForEach/LazyForEach 进行UI描述时，根据数据的 多少动态控制渲染的次数， 优化代码实现 引用UI资源 字符串引用： $ r (‘app.s t ring.name’ ) resources的element目录 下定义字符串，支持全球化 小语种 媒体资源引用： $ r (‘app.media.name’ ) resources的media目录下存 放资源，支持png、jpg、 svg等多种格式 添加UI交互事件 基础手势事件：onClick / onTouch等 定义基础用户交互，结合 TouchEvent信息可以实现自定 义手势 高级手势事件：长按手势 / 滑 动手势 / 组合手势等 通过gesture属性函数配置 内置高级手势支持， GestureGroup可支持多种 高级手势组合 第三步：完善功能逻辑 使用生命周期接口 页面生命周期接口：onPageShow、 onPageHide UI组件生命周期接口： aboutToAppear、aboutToDisappear 其它生命周期接口：onBackPressed、 onCreate、onDestroy等 结合页面、UI组件、系统状态的变化生命 周期接口添加功能逻辑 使用子系统能力接口 多个子系统提供大量系统能力接口 使用仅需两步： 一、导入依赖包。 二、直接调用系统能力接口。 调用系统能力实现具体功能逻辑 第四步：优化交互体验 实现动效 属性动画 animation ：自动监听组 件所有通用属性变化，自动增加动画 补间 显式动画animateTo ：指定特定 属性变化，为特定的属性动画自动增 加动画补间 修改组件属性，自动生成动画补 间，优化属性变化交互体验 转场动画 组件间转场： transition监听组件 的渲染状态变化，增加组件渲染、移除时的动画效果 页面间转场： pageTransition指定页面间跳转的切换动画效果 组件、页面切换时，自动生成动画 补间，优化切换交互体验 动画组件 ImageAnimator：支持逐帧图片播 放动画 使用多个图片组成动画，并动态控制 动画播放 Animator：组件形式提供动画控制器 动态控制播放状态，定制补间动画， 实现深度自定义动画效果。 第五步：模拟器调试 登录 选择p40Pro Failure[INSTALL_PARSE_FAILED_USESDK_ERROR] compileSdkVersion and releaseType of the app do not match the apiVersion and releaseType on the device. 源码地址：https://github.com/ITmxs/hm_ets_demo © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 12:43:34 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/14鸿蒙HarmonyOS应用开发之eTS文件说明.html":{"url":"connent/鸿蒙/14鸿蒙HarmonyOS应用开发之eTS文件说明.html","title":"14鸿蒙HarmonyOS应用开发之eTS文件说明","keywords":"","body":"鸿蒙HarmonyOS应用开发之为你解说eTS文件说明 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 eTS工程目录结构 FA应用的eTS工程目录结构如下图所示。 ets > default > pages > index.ets文件：.ets结尾的ETS（Extended TypeScript）文件，这个文件用于描述UI布局、样式、事件交互和页面逻辑。 ets > default > app.ets：用于全局应用/服务逻辑和应用/服务生命周期管理。 Java目录：作为HarmonyOS应用或原子化服务的启动入口。 resources目录：用于存放资源配置文件，比如：国际化字符串、资源限定相关资源和rawfile资源等。 app.ets文件用于全局应用逻辑和应用生命周期管理。 pages目录用于存放所有组件页面。 common目录用于存放公共代码文件，比如：自定义组件和公共方法。 C++工程目录结构 C++工程目录结构如下图所示。 entry>src>main>cpp：用于存放C++源码。 entry>src>main>Java：用于存放Java源码。 entry>src>main>resources：用于存放应用/服务所用到的资源文件，如图形、多媒体、字符串、布局文件等。关于资源文件的详细说明请参考 。 工程模板和开发语言介绍 DevEco Studio支持包括手机、平板、车机、智慧屏、智能穿戴、轻量级智能穿戴和智慧视觉设备的HarmonyOS应用/服务开发，预置了丰富的工程模板，可以根据工程向导轻松创建适应于各类设备的工程，并自动生成对应的代码和资源模板。同时，DevEco Studio还提供了多种编程语言供开发者进行HarmonyOS应用/服务开发，包括Java、JS、eTS和C/C++编程语言 此图是3.0版本才有，2.0和这个有点出入。 今天介绍是两种工程的目录结构。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 12:15:51 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/15鸿蒙HarmonyOS应用开发之资源文件.html":{"url":"connent/鸿蒙/15鸿蒙HarmonyOS应用开发之资源文件.html","title":"15鸿蒙HarmonyOS应用开发之资源文件","keywords":"","body":"15鸿蒙HarmonyOS应用开发之资源文件 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 resources目录 应用的资源文件（字符串、图片、音频等）统一存放于resources目录下，便于开发者使用和维护。resources目录包括两大类目录，一类为base目录与限定词目录，另一类为rawfile目录， resources |---base // 默认存在的目录 | |---element | | |---string.json | |---media | | |---icon.png |---en_GB-vertical-car-mdpi // 限定词目录示例，需要开发者自行创建 | |---element | | |---string.json | |---media | | |---icon.png |---rawfile // 默认存在的目录 资源组目录说明 base目录与限定词目录下面可以创建资源组目录（包括element、media、animation、layout、graphic、profile），用于存放特定类型的资源文件 资源文件的引用方法 base目录与限定词目录中的资源文件：通过指定资源类型（type）和资源名称（name）来引用。 Java文件引用资源文件的格式：ResourceTable.type_name。特别地，如果引用的是系统资源，则采用： ohos.global.systemres.ResourceTable.type_name 示例一：在Java文件中，引用string.json 文件中类型为“String”、名称为“app_name”的资源。 ohos.global.resource.ResourceManager resManager = this.getResourceManager(); String result = resManager.getElement(ResourceTable.String_app_name).getString(); 示例二：在Java文件中，引用color.json 文件中类型为“Color”、名称为“red”的资源。 ohos.global.resource.ResourceManager resManager = this.getResourceManager(); String result = resManager.getElement(ResourceTable.String_app_name).getString(); XML文件引用资源文件的格式：$type:name特别地，如果引用的是系统资源，则采用： $ohos:type:name在XML文件中，引用string.json文件中类型为“String”、名称为“app_name”的资源， rawfile目录中的资源文件：通过指定文件路径和文件名称来引用。 在Java文件中，引用一个路径为“resources/rawfile/”、名称为“example.js”的资源文件，示例如下： ohos.global.resource.ResourceManager resManager = this.getResourceManager(); ohos.global.resource.RawFileEntry rawFileEntry = resManager.getRawFileEntry(\"resources/rawfile/example.js\"); 系统资源文件 目前支持的部分系统资源文件详见1 © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 12:01:54 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/16使用低代码进行开发.html":{"url":"connent/鸿蒙/16使用低代码进行开发.html","title":"16使用低代码进行开发","keywords":"","body":"16使用低代码进行开发 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 不知不觉，我们已经尝试过了多种开发方式 而体验下来自己也有了一定的认识， ets对标的Flutter js对标的小程序 java对标的android 但是截至目前，我还没有用过低代码的方式玩过鸿蒙开发，今天就来体验一下。 在此之前了解一下 什么是低代码 所谓低代码开发，即无需编码或只需少量代码就可以快速生成应用程序。也就是说，企业的应用开发通过“拖拉拽”的方式即可完成。 HarmonyOS低代码开发方式，具有丰富的UI界面编辑功能，通过可视化界面开发方式快速构建布局，可有效降低用户的时间成本和提升用户构建UI界面的效率。 低代码开发功能包括：支持JS应用/服务或服务的UI界面开发和支持服务卡片的开发。 使用低代码开发应用或服务 使用低代码开发应用或服务有以下两种开发方式： 创建一个支持低代码开发的新工程，开发应用或服务的UI界面。 在已有工程中，创建JS Visual文件来开发应用或服务的UI界面。 创建新工程支持低代码开发 在工程模板中，提供了低代码开发的工程模块，您可以直接选择一个支持低代码开发的工程模板来开发应用或服务的UI界面，当前支持“Empty Ability”和“Sport and Health Ability”两个工程模板，支持的设备类型包括Phone、Tablet和Wearable。 说明 该功能在DevEco Studio 3.0 Beta2及更高版本中支持，且compileSdkVersion必须为7或以上。 接下来我们以创建一个Empty Alibity工程模板为示例进行说明。 1打开DevEco Studio，创建一个新工程，模板选择Empty Ability。 2.选择Super Visual，表示使用低代码开发功能开发应用/服务。点击Finish等待工程同步完成。 同步完成后，工程目录中自动生成低代码目录结构。 pages > index > index.js：低代码页面的逻辑描述文件，定义了页面里所用到的所有的逻辑关系，比如数据、事件等，详情请参考JS语法参考。如果创建了多个低代码页面，则pages目录下会生成多个页面文件夹及对应的js文件 pages > index > index.visual：visual文件存储低代码页面的数据模型，双击该文件即可打开低代码页面，进行可视化开发设计。如果创建了多个低代码页面，则pages目录下会生成多个页面文件夹及对应的visual文件。 3打开“page.visual”文件，即可进行页面的可视化布局设计与开发。 使用低代码开发界面过程中，如果界面需要使用到其它暂不支持可视化布局的控件时，可以在低代码界面开发完成后，点击按钮，将低代码界面转换为hml和css代码。注意，代码转换操作会删除visual文件及其父目录，且为不可逆过程，代码转换后不能通过hml/css文件反向生成visual文件 多设备开发的场景，可以点击界面画布右上角设备/模式切换按钮，进行设备切换或模式切换。 在已有工程中添加JS Visual支持低代码开发 在已有的HarmonyOS工程中，可以通过创建JS Visual文件的方式，使用低代码开发应用或服务的UI界面。支持的设备类型为Phone、Tablet、Wearable设备，且ompileSdkVersion必须为6或以上。 在打开的JS工程中，选中模块的pages文件夹，单击鼠标右键，选择New > JS Visual。 在弹出的对话框中，输入JS Visual Name，点击Finish。 创建JS Visual后，会在工程中自动生成低代码的目录结构，如下图所示。 低代码多语言支持 低代码页面支持多语言能力，让应用开发者无需开发多个不同语言的版本。开发者可以通过定义资源文件和引用资源两个步骤以使用多语言能力。 在指定的i18n文件夹内创建多语言资源文件及对应字符串信息。 低代码屏幕适配 对于屏幕适配问题，低代码页面支持两种配置方法。 指定designWidth为720px。designWidth为屏幕逻辑宽度，所有与大小相关的样式（例如Width、FontSize）均以designWidth和实际屏幕宽度的比例进行缩放。例如设置Width为100px时，在实际宽度为1440物理像素的屏幕上，Width实际渲染像素为200物理像素。 设置autoDesignWidth为true，此时designWidth字段将会被忽略，渲染组件和布局时按屏幕密度进行缩放。低代码页面仅支持分辨率1080*2340（P40），屏幕密度为3的场景，此场景下1px等于渲染出3个物理像素。例如设置Width为100px时，Width实际渲染像素为300物理像素。 低代码开发界面介绍 1：UI Control：UI控件栏，可以将相应的组件选中并拖动到画布（Canvas）中，实现控件的添加。 2：Component Tree：组件树，在低代码开发界面中，可以方便开发者直观地看到组件的层级结构、摘要信息以及错误提示。开发者可以通过选中组件树中的组件（画布中对应的组件被同步选中），实现画布内组件的快速定位；点击组件后的或图标，可以隐藏/显示相应的组件。 3：Panel：功能面板，包括常用的画布缩小放大、撤销、显示/隐藏组件虚拟边框、设备切换、模式切换、可视化布局界面一键转换为hml和css文件等。 4：Canvas：画布，开发者可在此区域对组件进行拖拽、拉伸等可视化操作，构建UI界面布局效果。 5：Attributes & Styles：属性样式栏，选中画布中的相应组件后，在右侧属性样式栏可以对该组件的属性样式进行配置。包括： Properties：对应图标，用于设置组件基本标识和外观显示特征的属性，如组件的ID、If等属性。 General：对应图标，用于设置Width、Height、Background、Position、Display等常规样式。 Feature：对应图标，用于设置组件的特有样式，如描述Text组件文字大小的FontSize样式等。 Flex：对应图标，用于设置Flex布局相关样式。 Events：对应图标，为组件绑定相关事件，并设置绑定事件的回调函数。 Dimension：对应图标，用于设置Padding、Border、Margin等与盒式模型相关的样式。 Grid：对应图标，用于设置Grid网格布局相关样式，该图标只有Div组件的Display样式被设置为grid时才会出现。 Atom：对应图标，用于设置原子布局相关样式。 低代码开发案例 第一个页面内有一个容器、文本和一个按钮，通过Div、Text和Button组件来实现。 打开 “page.visual” 文件，选中画布中的组件，单击鼠标右键，选择Delete删除画布原有模板组件。操作如下所示： 选中UI Control中的Div组件，将其拖至画布。点击右侧属性样式栏中的样式图标 （General），设置Div组件的高度Height为100%，使其占满屏幕；点击右侧属性样式栏中的样式图标 （Flex），设置Div组件的FlexDirection样式为column，使Div的主轴垂直；设置Div组件的JustifyContent样式为center，使得其子组件在主轴上居中显示；设置Div组件的AlignItems样式为center，使得其子组件在交叉轴上居中显示。操作如下所示： 选中UI Control中的Text组件，将其拖至Div组件的中央区域。点击右侧属性样式栏中的属性图标 （Properties），设置Text组件的Content属性为“title”；点击右侧属性样式栏中的样式图标 （Feature），设置组件的FontSize样式为60px，使得其文字放大；设置组件的TextAlign样式为center，使得组件文字居中显示。再选中画布上的Text组件，拖动放大。操作如下所示： 选中UI Control中的Button组件，将其拖至Text组件下面。点击右侧属性样式栏中的属性图标（Properties），设置Button组件的Value属性为“Next”，点击右侧属性样式栏中的样式图标（Feature），设置组件的FontSize样式为39px，使得其文字放大；再选中画布上的Button组件，拖动放大。操作如下所示： 创建另一个页面 在Project窗口，选择工程中的“entry > src > main > js > default > pages”，单击鼠标右键，选择“New > JS Visual”。创建完成后，点击提示框中的“Confirm”按钮，创建后的page2.visual文件目录结构如下 第二个页面中有一个容器和文本，通过Div、Text组件来实现。 实现页面跳转 在Project窗口，打开工程中的“entry > src > main > js > default > pages > index> index.js”,，导入router模块，页面路由router根据页面的uri来找到目标页面，从而实现跳转。示例代码如下： import router from '@system.router'; export default { data: { title: \"大前端之旅\", isHarmonyOS: true, next: \"下一页\", }, switchTitle() { let that = this; that.title = that.isHarmonyOS ? \"Hello World\" : \"Hello HarmonyOS\"; that.isHarmonyOS = !that.isHarmonyOS; }, launch() { router.push ({ uri:'pages/page2/page2', // 指定要跳转的页面 }) } } 打开“index.visual”，选中画布上的Button组件。点击右侧属性样式栏中的事件图标（Events)，鼠标点击Click事件的输入框，选择launch事件，操作如下所示： 3再次使用预览器或模拟器运行项目，效果如下图所示： 好的，今天的教程就演示到这儿。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 19:50:29 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/17使用ArkUI开发.html":{"url":"connent/鸿蒙/17使用ArkUI开发.html","title":"17使用ArkUI开发","keywords":"","body":"使用ArkUI开发 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 方舟开发框架概述 方舟开发框架，是HarmonyOS的一套UI开发框架，提供开发者进行应用UI开发时所必须的能力。 基本概念 组件：组件是界面搭建与显示的最小单位。开发者通过多种组件的组合，构建出满足自身应用诉求的完整界面。 页面：page页面是方舟开发框架最小的调度分割单位。开发者可以将应用设计为多个功能页面，每个页面进行单独的文件管理，并通过路由API实现页面的调度管理，以实现应用内功能的解耦。 主要能力 多种组件：方舟开发框架不仅提供了多种基础组件，如文本显示、图片显示、按键交互等，也提供了支持视频播放能力的媒体组件。并且针对不同类型设备进行了组件设计，提供了组件在不同平台上的样式适配能力，此种组件称为“多态组件”。 布局计算：UI界面设计离不开布局的参与。方舟开发框架提供了多种布局方式，不仅保留了经典的弹性布局能力，也提供了列表、宫格、栅格布局和适应多分辨率场景开发的原子布局能力。 动画能力：方舟开发框架对于UI界面的美化，除了组件内置动画效果外，也提供了属性动画、转场动画和自定义动画能力。 UI交互：方舟开发框架提供了多种交互能力，满足应用在不同平台通过不同输入设备均可正常进行UI交互响应，默认适配了触摸手势、遥控器、鼠标等输入操作，同时也提供事件通知能力。 绘制：方舟开发框架提供了多种绘制能力，以满足开发者绘制自定义形状的需求，支持图形绘制、颜色填充、文本绘制、图片绘制等。 平台API**通道：**方舟开发框架提供了API扩展机制，平台能力通过此种机制进行封装，提供风格统一的JS接口。 选择方案 方舟开发框架针对不同目的和技术背景的开发者提供了两种开发范式，分别是基于JS扩展的类Web开发范式（简称“类Web开发范式”）和基于TS扩展的声明式开发范式（简称“声明式开发范式”）。下面我们对这两种开发范式进行对比与描述。 类Web开发范式 类Web开发范式，采用经典的HML、CSS、JavaScript三段式开发方式。使用HML标签文件进行布局搭建，使用CSS文件进行样式描述，使用JavaScript文件进行逻辑处理。UI组件与数据之间通过单向数据绑定的方式建立关联，当数据发生变化时，UI界面自动触发更新。此种开发方式，更接近Web前端开发者的使用习惯，快速将已有的Web应用改造成方舟开发框架应用。主要适用于界面较为简单的中小型应用开发。 声明式开发范式 声明式开发范式，采用TS语言并进行声明式UI语法扩展，从组件、动效和状态管理三个维度提供了UI绘制能力。UI开发更接近自然语义的编程方式，让开发者直观地描述UI界面，不必关心框架如何实现UI绘制和渲染，实现极简高效开发。同时，选用有类型标注的TS语言，引入编译期的类型校验，更适用大型的应用开发。 两种开发范式对比 开发范式名称 语言生态 UI更新方式 适用场景 适用人群 类Web开发范式 JS语言 数据驱动更新 界面较为简单的类小程序应用和卡片 Web前端开发人员 声明式开发范式 扩展的TS语言（eTS） 数据驱动更新 复杂度较大、团队合作度较高的程序 移动系统应用开发人员、系统应用开发人员 框架结构 从上图可以看出，类Web开发范式与声明式开发范式的UI后端引擎和语言运行时是共用的，其中，UI后端引擎实现了方舟开发框架的六种基本能力。声明式开发范式无需JS Framework进行页面DOM管理，渲染更新链路更为精简，占用内存更少，因此更推荐开发者选用声明式开发范式来搭建应用UI界面。 基于JS扩展的类Web开发范式 基于JS扩展的类Web开发范式的方舟开发框架是一种跨设备的高性能UI开发框架，支持声明式编程和跨设备多态UI。 关于组件和接口的详细参考文档请参见JS API参考。 基础能力 类Web范式编程 采用类HTML和CSS Web编程语言作为页面布局和页面样式的开发语言，页面业务逻辑则支持ECMAScript规范的JavaScript语言。方舟开发框架提供的类Web编程范式，可以让开发者避免编写UI状态切换的代码，视图配置信息更加直观。 跨设备 开发框架架构上支持UI跨设备显示能力，运行时自动映射到不同设备类型，开发者无感知，降低开发者多设备适配成本。 高性能 开发框架包含了许多核心的控件，如列表、图片和各类容器组件等，针对声明式语法进行了渲染流程的优化。 整体架构 使用基于JS扩展的类Web开发范式的方舟开发框架，包括应用层（Application）、前端框架层（Framework）、引擎层（Engine）和平台适配层（Porting Layer）。 Application 应用层表示开发者开发的FA应用，这里的FA应用特指JS FA应用。使用Java开发FA应用请参考Java UI框架。 Framework 前端框架层主要完成前端页面解析，以及提供MVVM（Model-View-ViewModel）开发模式、页面路由机制和自定义组件等能力。 Engine 引擎层主要提供动画解析、DOM（Document Object Model）树构建、布局计算、渲染命令构建与绘制、事件管理等能力。 Porting Layer 适配层主要完成对平台层进行抽象，提供抽象接口，可以对接到系统平台。比如：事件对接、渲染管线对接和系统生命周期对接等。 基于JS扩展的类Web开发范式 基于TS扩展的声明式开发范式的方舟开发框架是为HarmonyOS平台开发极简、高性能、跨设备应用设计研发的UI开发框架，支持开发者高效的构建跨设备应用UI界面。 基础能力 使用基于TS扩展的声明式开发范式的方舟开发框架，采用更接近自然语义的编程方式，让开发者可以直观地描述UI界面，不必关心框架如何实现UI绘制和渲染，实现极简高效开发。从组件、动效和状态管理三个维度来提供UI能力，还提供了系统能力接口，实现系统能力的极简调用。 开箱即用的组件 框架提供丰富的系统预置组件，可以通过链式调用的方式设置系统组件的渲染效果。开发者可以组合系统组件为自定义组件，通过这种方式将页面组件化为一个个独立的UI单元，实现页面不同单元的独立创建、开发和复用，使页面具有更强的工程性。 丰富的动效接口 提供svg标准的绘制图形能力，同时开放了丰富的动效接口，开发者可以通过封装的物理模型或者调用动画能力接口来实现自定义动画轨迹。 状态与数据管理 状态数据管理作为基于TS扩展的声明式开发范式的特色，通过功能不同的装饰器给开发者提供了清晰的页面更新渲染流程和管道。状态管理包括UI组件状态和应用程序状态，两者协作可以使开发者完整地构建整个应用的数据更新和UI渲染。 系统能力接口 使用基于TS扩展的声明式开发范式的方舟开发框架，还封装了丰富的系统能力接口，开发者可以通过简单的接口调用，实现从UI设计到系统能力调用的极简开发。 整体架构 声明式UI前端 提供了UI开发范式的基础语言规范，并提供内置的UI组件、布局和动画，提供了多种状态管理机制，为应用开发者提供一系列接口支持。 语言运行时 选用方舟语言运行时，提供了针对UI范式语法的解析能力，提供了跨语言调用支持，提供了TS语言高性能运行环境。 声明式UI后端引擎 后端引擎提供了兼容不同开发范式的UI渲染管线，提供多种基础组件、布局计算、动效、交互事件，提供了状态管理和绘制能力。 渲染引擎 提供了高效的绘制能力，将渲染管线收集的渲染指令，绘制到屏幕能力。 平台适配层 提供了对系统平台的抽象接口，具备接入不同系统的能力，如系统渲染管线、生命周期调度等。 https://developer.harmonyos.com/cn/docs/documentation/doc-references/ts-components-versions-0000001231119333 © luckly all right reserved，powered by Gitbook该文件修订时间： 2022-01-23 20:09:36 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}