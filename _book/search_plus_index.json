{"./":{"url":"./","title":"前言","keywords":"","body":"如果你迷惘，不妨看看码农的轨迹， 华为云享专家，InfoQ签约作者，阿里云博客专家，2021年csdn博客之星，51CTO博客首席体验官，开源项目gin-vue-admin成员之一，专注于大前端技术的分享，包括Flutter,小程序,鸿蒙，安卓，VUE，JavaScript 我会在 CSDN 中分享一些 小知识点、开发经验、性能优化、原理分析，这些是源自于实战项目的感悟。 当然我也会在 掘金 中游荡 ，在 知乎 中分享为什么 ，在 哔哩哔哩 中分享时刻 |专心 |专注 |专致 | 极致 | 所以也要有微信公众号中的每日分享 微信中搜 “坚果前端” ,你会在每日晨起的时刻收到一份干货，你也可以随时随地阅读你喜欢观注的研发领域 公众号：“大前端之旅” 哔哩哔哩：https://space.bilibili.com/480883651 CSDN:https://blog.csdn.net/qq_39132095 知乎：https://www.zhihu.com/people/yimi-yang-guang-96-65 简书：https://www.jianshu.com/u/0c43689713e9 掘金：https://juejin.cn/user/3843548384077192 GitHub：https://github.com/ITmxs Gitee：https://gitee.com/itmxs 取得成就 我的原创： Flutter系列（基础） flutter的安装与配置（第一节） 35分钟教你学dart（第二节） 每个 Flutter 开发人员都应该知道的 16 个 Dart 技巧（第三节） flutter架构（第四节） 如何在flutter中构建响应式布局（第五节） Flutter版本控制工具 FVM（第六节） flutter 在windows和linux上运行IOS UI模拟器 Getx在flutter中管理路由组 flutter项目打包发布windows可执行文件 Windows环境安装Flutter macOS 环境安装Flutter linux 环境安装Flutter Flutter是什么 AndroidStudio创建第一个 Flutter 应用程序 Flutter 初学者的简单例子充分解释 是什么让 Flutter 与众不同 Flutter的优点和缺点 Flutter设置App的应用名字和应用logo图标的方法(android ios web) Flutter：避免在生产代码中调用“print” Flutter & Dart：用数字分组显示大数字 flutter中对列表的性能优化 vscode开发插件推荐第一节 vscode开发插件推荐第二节 Flutter 基础系列之手势思维导图（5） [flutter专题]6详解AppBar小部件 如何使用 Flutter 创建桌面应用程序[Flutter专题7] Flutter应用发布windows版[Flutter专题8] Flutter 中 stateless 和 stateful widget 的区别[Flutter专题9] 震惊！马上年底了创业公司在做这事？[Flutter专题10] Flutter 中获取地理位置[Flutter专题11] 在 Flutter App 中使用相机和图库/flutter的图像选择[Flutter专题12] Flutter 如何禁止手机横屏[Flutter专题13] Flutter - 检查 Internet 连接示例[Flutter专题14] 在 Flutter 中创建可拖动的浮动操作按钮[Flutter专题15] Flutter - Alert Dialog Align-AnimatedAlign【flutter专题16】 Flutter 实现整个App变为灰色（勿忘国殇 警钟长鸣）【Flutter专题17】 如何在 Flutter 中设置背景图像【Flutter专题16】 Flutter 2.8 的新特性【flutter专题17】 如何在Flutter应用程序中创建不同的渐变[Flutter专题20] Flutter 中使用Chip 小部件【Flutter专题30】 在 Flutter 中发出 HTTP 请求的最佳库（2022 年）【Flutter专题31】 2022年Flutter真的会一统大前端吗？ vscode主题 分享一个vscode主题收录网站，有了这个网站不用再求别人啦 鸿蒙专题 鸿蒙专题 鸿蒙开发初体验【鸿蒙专题00】 鸿蒙开发初体验【鸿蒙专题01】 HarmonyOS工程【鸿蒙专题02】 HUAWEI DevEco Studio使用技巧【鸿蒙专题03】 鸿蒙 ListContainer基础用法教程【鸿蒙专题04】 鸿蒙 网络请求的各种实现方式(原生+okhttp+okhttputils+zzrhttp)【鸿蒙 专题05】 鸿蒙 dialog各种用法教程【鸿蒙专题06】 鸿蒙 模仿boss直聘客户端更新教程【鸿蒙专题07】 鸿蒙 HiLog日志打印使用技巧【鸿蒙专题08】 鸿蒙 简易计算器实现案例教程【鸿蒙专题09】 uniapp uni-app基础教程 环境配置【uniapp 专题 01】 个人实操之发布uniapp（包括原生app，H5,小程序）【uniapp 专题 02】 uniapp的生命周期【uniapp 专题 03】 其他 如何做一个app 代码审计开源工具 史上最强画图工具推荐（十个），你想要的我都有 23条建议，给你的程序人生加油助力 程序员为什么写博客，这是我见过最好的答案 如何设置微信公众号的页面模板？ Figma Figma软件介绍及基础(一) Figma常用工具快速上手(二) Figma组件和自动布局的应用(三) Figma Variants组件集/变体组件(四) Figma教程汇总 软件设计师资料 Flutter Git PPT模板 画图利器 软考资料 地址:软件设计师资料 https://gitee.com/itmxs/software-designer-test-paper python GO Java 当然，如果你关注了我，或者加我微信了，就会发现上面只是冰山一角， 最后附上下载链接，或者，公众号回复资料 就可以领取。 加好友或者入群请备注“加群” © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/00鸿蒙开发资料汇总.html":{"url":"connent/鸿蒙/00鸿蒙开发资料汇总.html","title":"鸿蒙开发资料汇总","keywords":"","body":" 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 鸿蒙社区 51cto鸿蒙专区 华为鸿蒙专区 电子发烧友鸿蒙专区 官方资源 鸿蒙开发者文档 harmonyos开发文档 gitee源码地址 鸿蒙应用开发IDE(DevEco studio) 鸿蒙设备开发IDE(DevEco Device Tool) 开放原子基金会 DevEco Marketplace 书籍 《跟老卫学HarmonyOS开发》https://github.com/waylau/harmonyos-tutorial 鸿蒙官网地址汇总 https://harmonyos.51cto.com/posts/7704 旨在提供一个精选的鸿蒙库、工具、开源项目、书籍、博客、教程的集合。减少大家漫无目的的搜索时间，帮助大家在学习鸿蒙的过程中少踩坑、少走弯路。 https://gitee.com/isrc_ohos/ultimate-harmony-reference?_from=gitee_search 鸿蒙系统的资料整理 https://gitee.com/hiharmonica/awesome-harmony-os-kapok 华为开发者学堂（https://developer.huawei.com/consumer/cn/training/result） 华为开发者学堂 - HarmonyOS应用开发系列课（基础篇）链接地址 华为开发者学堂 - HarmonyOS应用开发系列课（进阶篇）链接地址 W3Cschool编程教学网站-鸿蒙OS开发 https://www.w3cschool.cn/harmonyos/ 鸿蒙学堂的文档 https://hmxt.org/documents Gitee开源平台 https://gitee.com/ 木棉花（链接地址） 数字经济及其核心产业统计分类（2021）（链接地址） 国家标准2011国民经济行业分类 （链接地址） 更多的参考资料 链接地址 鸿蒙课程公开资料 https://gitee.com/cluo29/harmonyos-open-materials 百图画鸿蒙 | 百文说内核 | 百万注源码 http://weharmonyos.com/ 线上demo https://playground.harmonyos.com/#/cn/onlineDemo 类Flutter开发 https://developer.harmonyos.com/cn/docs/documentation/doc-references/ts-components-versions-0000001231119333 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/01鸿蒙开发第一节.html":{"url":"connent/鸿蒙/01鸿蒙开发第一节.html","title":"01鸿蒙开发第一节","keywords":"","body":"鸿蒙开发初体验 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 在体验之前，大家可以先看这张图，然后按图索骥，不过不会在这个教程教如何如何安装nodejs， 接下来开始正文 Windows操作系统：Windows10 64 位 内存：8GB 及以上 硬盘：100GB 及以上 分辨率：1280*800 像素及以上 1.第一步，打开链接，点击下载 https://developer.harmonyos.com/cn/develop/deveco-studio/ 目前最新版本 https://developer.harmonyos.com/cn/develop/deveco-studio#download_beta 两个版本都可以下载，看你自己需要 Release版本提供更稳定的功能特性， Beta版本提供了支持HarmonyOS 3.0.0 开发者预览版的开发能力，让您尝鲜体验HarmonyOS 3.0.0最新功能， 下载到本地之后双击exe可执行文件 2.一路next，在这步记得勾选，这样后续开发比较方便。至于为什么鸿蒙不支持vs和as开发，大家可以自己去探究。 3.运行已安装的DevEco Studio，首次使用，请选择Do not import settings，点击OK。 进入配置向导页面，设置npm registry，DevEco Studio已预置对应的仓，直接点击Start using DevEco Studio进入下一步。 说明 如果配置向导界面出现的是设置Set up HTTP Proxy界面，说明网络受限，请根据参考信息配置DevEco Studio代理、NPM代理和Gradle代理后，再下载HarmonyOS SDK。 DevEco Studio向导指引开发者下载SDK，默认下载OpenHarmony SDK。SDK下载到user目录下，也可以指定对应的存储路径，SDK存储路径不支持中文字符，然后点击Next。 在弹出的SDK下载信息页面，点击Next，并在弹出的License Agreement窗口，点击Accept开始下载SDK。 等待OpenHarmony SDK及工具下载完成，点击Finish，界面会进入到DevEco Studio欢迎页。 4.配置HDC工具环境变量 HDC是为开发者提供HarmonyOS应用/服务的调试工具，为方便使用HDC工具，请为HDC工具及其端口号设置环境变量。 Windows环境变量设置方法： 在此电脑 > 属性 > 高级系统设置 > 高级 > 环境变量中，添加HDC端口变量名为：HDC_SERVER_PORT，变量值设置为7035。 在path变量中，添加HDC工具路径，HDC工具路径为：HarmonyOS SDK安装目录/toolchains。 F:\\HarmonySdk\\toolchains 环境变量配置完成后，关闭并重启DevEco Studio。 5.创建和运行Hello World 打开DevEco Studio，在欢迎页点击Create Project，创建一个新工程，选择js的方式，目前支持的有js，java和c++，这方面看自己的喜好。 6.填写工程相关信息，Device Type选择Phone，其他保持默认值即可，点击Finish。关于各个参数的详细介绍， 工程创建完成后，DevEco Studio会自动进行工程的同步，同步成功如下图所示。 7.使用模拟器运行HelloWorld DevEco Studio提供远程模拟器和本地模拟器，本示例以远程模拟器为例进行说明 DevEco Studio提供模拟器供开发者运行和调试HarmonyOS应用/服务。 在DevEco Studio菜单栏，点击Tools > Device Manager。 在Remote Emulator页签中点击Login，在浏览器中弹出华为开发者联盟帐号登录界面，请输入已实名认证的华为开发者联盟帐号的用户名和密码进行登录（查看远程模拟器登录常见问题）。 说明 推荐使用最新版本Chrome浏览器，如果使用Safari、360等其他浏览器，要取消阻止跨站跟踪和阻止所有Cookie功能。 登录后，请点击界面的允许按钮进行授权。 在设备列表中，选择Phone设备P40，并点击按钮，运行模拟器。 点击DevEco Studio工具栏中的按钮运行工程，或使用默认快捷键Shift+F10（Mac为Control+R）运行工程。 8.已成功运行了第一个HarmonyOS应用/服务， 到此华为鸿蒙os 的环境搭建和初体验就讲完了 最后总结： 作为一枚Flutter开发程序员，第一点，第一次上手这个IDE和语言环境还是比较顺利的 基本能看懂 具体的还要看官网文档和api使用情况，没有具体去深入写， 个人看法学起来应该不难，第二点，如果有空了解和学习鸿蒙OS开发 没有坏处 ，不要等到书到用书方恨少 那就不好了 ，有兴趣的同学可以根据教程安装开发环境学习和了解 ，最后希望我的文章能帮助到各位解决问题 。 https://developer.harmonyos.com/cn/docs/documentation/doc-guides/develop-overview-0000001071291809 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/02工程介绍.html":{"url":"connent/鸿蒙/02工程介绍.html","title":"02工程介绍","keywords":"","body":"上一节教大家跑通了demo 这一节一起来了解HarmonyOS工程 春节不停更，此文正在参加「星光计划-春节更帖活动」 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 HarmonyOS APP工程结构 在进行HarmonyOS应用/服务开发前，应该掌握HarmonyOS应用/服务的逻辑结构 HarmonyOS应用/服务发布形态为APP Pack（Application Package，简称APP），它是由一个或多个HAP（HarmonyOS Ability Package）包以及描述APP Pack属性的pack.info文件组成。 一个HAP在工程目录中对应一个Module，它是由代码、资源、第三方库及应用/服务配置文件组成，可以分为Entry和Feature两种类型。 Entry：应用/服务的主模块，可独立安装运行。一个APP中，对于同一类型的设备，可以包含一个或多个entry类型的HAP，如果同一设备类型包含多个entry模块，需要配置distroFilter分发规则。，运行的时候也是这样。你会发现这个模块。 Feature：应用/服务的动态特性模块。一个APP可以包含一个或多个feature类型的HAP，也可以不含。 HAP是Ability的部署包，HarmonyOS应用/服务代码围绕Ability组件展开，它是由一个或多个Ability组成。Ability分为两种类型：FA（Feature Ability，中文名称：元程序）和PA（Particle Ability，中文名称：元服务）。FA/PA是应用/服务的基本组成单元，能够实现特定的业务功能。FA有UI界面，而PA无UI界面。 工程目录结构 DevEco Studio工程目录结构提供工程视图和HarmonyOS视图。工程创建或打开，默认显示工程视图，如果要切换到HarmonyOS视图，在左上角点击Project > Ohos进行切换。 JS工程目录结构 JS工程目录结构如下图所示。 java目录：仅Phone、Tablet、TV和Wearable设备的JS工程才存在，作为HarmonyOS应用/服务的启动入口。 common目录：用于存放公共资源文件，如媒体资源、自定义组件和JS文档等。 i18n目录用于存放多语言的json文件， pages目录： pages文件夹下可以包含1个或多个页面，每个页面都需要创建一个文件夹（如图中的index）。页面文件夹下主要包含3种文件类型：css、js和hml文件。 pages>index>index.hml文件hml文件定义了页面的布局结构，使用到的组件，以及这些组件的层级关系，如果你会html，那么这个不成问题。 pages>index>index.css文件css文件定义了页面的样式与布局，包含样式选择器和各种样式属性等，如果你会css，那么这个不成问题。 pages>index>index.js文件js文件描述了页面的行为逻辑，此文件里定义了页面里所用到的所有的逻辑关系，比如数据、事件等，如果你会js，那么这个不成问题。 对于上面提到的这些，如果你不会的话，可以关注我的公众号“大前端之旅”，来一起学习。 resources用于存放资源配置文件，比如：全局样式、多分辨率加载等配置文件。 app.js文件全局的JavaScript逻辑文件和应用/服务的生命周期管理。 对于HarmonyOS工程中的目录结构就了解到这儿 由于DevEco Studio支持包括手机、平板、车机、智慧屏、智能穿戴、轻量级智能穿戴和智慧视觉设备的HarmonyOS应用/服务开发，预置了丰富的工程模板，可以根据工程向导轻松创建适应于各类设备的工程，并自动生成对应的代码和资源模板。同时，DevEco Studio还提供了多种编程语言供开发者进行HarmonyOS应用/服务开发，包括Java、JS、eTS和C/C++编程语言。 下面是工程模板和对应开发语言的对应关系 到此华为鸿蒙目录结构和工程模板和对应开发语言的对应关系就讲完了 了解了这些对于你的上手速度就会达到事半功倍的效果。 最后总结： 作为一枚Flutter开发程序员，第一点，第一次上手这个IDE和语言环境还是比较顺利的 基本能看懂 具体的还要看官网文档和api使用情况，没有具体去深入写， 个人看法学起来应该不难，第二点，如果有空了解和学习鸿蒙OS开发 没有坏处 ，不要等到书到用书方恨少 那就不好了 ，有兴趣的同学可以根据教程安装开发环境学习和了解 ，最后希望我的文章能帮助到各位解决问题 。乾坤未定，你我皆是黑马 参考文档：https://developer.harmonyos.com/ © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/03编辑器使用技巧.html":{"url":"connent/鸿蒙/03编辑器使用技巧.html","title":"03编辑器使用技巧","keywords":"","body":"春节不停更，此文正在参加「星光计划-春节更帖活动」 这一节一起来了解HUAWEI DevEco Studio使用技巧 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 开发鸿蒙少不了对编辑器的使用，今天就先从编辑器使用技巧开始，俗话说，工欲善其事必先利其器，下面先给我汇总的快捷键， 快捷键 Windows Mac 代码高亮 File > Settings或快捷键Ctrl+Alt+S DevEco Studio > Preferences，快捷键为Command+英文逗号 代码自动跳转 按住Ctrl键 按住Ctrl键 代码格式化 Ctrl + Alt + L，可以快速对选定范围的代码进行格式化。Ctrl + Alt + Shift + L，可以快速对当前整个文件进行格式化 Command+Option +L，可以快速对选定范围的代码进行格式化。Command+Option+L，可以快速对当前整个文件进行格式化 代码折叠 Ctrl + 加号键 Command+Option+加号键 代码快速注释 Ctrl+/ Command+/ 代码结构树 Alt + 7 / Ctrl + F12 Command+7 代码查找 两次Shift 两次Shift 查看Java接口文档 Ctrl+Q F1 快捷键大家可以截图保存，接下来了解一些别的开发技巧。 汉化（V3.0 Beta2（2021-12-31）版本以上支持） 还有一个问题可能就是目前编辑器大家看着不太习惯，需要汉化一下，那么如何汉化呢，结合Androidstudio的经验，分为如下几步 第一步点击File-setting 第二步plugins里面选择如图所示的插件，并安装。 第三步，重启，汉化完成 代码高亮 支持对代码关键字、运算符、字符串、类名称、接口名、枚举值等进行高亮颜色显示，可以在菜单栏打开File > Settings或快捷键Ctrl+Alt+S（Mac为DevEco Studio > Preferences，快捷键为Command+英文逗号）面板，在Editor > Color Scheme自定义各语言高亮显示颜色。 同时还可以对变量名和参数名进行语义高亮，默认情况下为关闭状态，可以在菜单栏打开File > Settings或快捷键Ctrl+Alt+S（Mac为DevEco Studio > Preferences，快捷键为Command+英文逗号）面板，在Editor > Color Scheme > Language Defaults > Semantic highlighting中，打开语义高亮开关。 代码智能补齐 基于HuaweiCloud SmartAssist提供Java代码的智能补齐能力，编辑器工具会分析上下文并理解项目内容，并根据输入的内容，提示可补齐的类、方法、字段和关键字的名称等。（编辑器版本大于2.1才可以），使用SmartAssist智能编码辅助工具，需要在File > Settings >DevEco Labs > SmartAssist中勾选“Enable SmartAssist”开启。SmartAssist默认最大允许占用的内存为1.5G，如果出现卡顿，可以尝试适当调整该阈值。调整后，还是出现卡顿现象，并提示内存不足，建议升级电脑主机内存。 代码自动跳转 在编辑器中，可以按住Ctrl键，鼠标点击代码中的类、方法、参数、变量等名称，自动跳转到定义处。 代码结构树 支持快速查看代码文档的结构树，包括全局变量和函数，类成员变量和方法等，并可以跳转到对应代码行。可使用快捷键Alt + 7 / Ctrl + F12（Mac为Command+7）快速打开代码结构树。 代码快速注释 支持对选择的代码块进行快速注释，使用快捷键Ctrl+/（Mac为Command+/）快速进行注释。对于已注释的代码快，再次使用快捷键Ctrl+/（Mac为Command+/）取消注释。 代码格式化 支持对选定范围的代码或者当前整个文件进行代码格式化操作，可以很好的提升代码的美观度和可读性。 使用快捷键Ctrl + Alt + L（Mac为Command+Option +L） 可以快速对选定范围的代码进行格式化。 使用快捷键Ctrl + Alt + Shift + L（Mac为Command+Option+L）可以快速对当前整个文件进行格式化。 如果在进行格式化时，对于部分代码片段不需要进行自动的格式化处理，可以通过如下方式进行设置： 在File>Settings>Editor>Code Style，点击“Formatter”，勾选“Turn formatter on/off with markers in code comments”。 在Java或C/C++代码中，在不需要进行格式化操作的代码块前增加“//@formatter:off”，在不格式化代码块的最后增加“//@formatter:on”，即表示对该范围的代码块不需要进行格式化操作。 代码折叠 支持对代码块的快速折叠和展开，可以使用快捷键Ctrl + 加号键（Mac为Command+Option+加号键）快速展开已折叠的代码；使用快捷键Ctrl + 减号键（Mac为Command+Option+减号键）折叠已展开的代码块。 代码查找 通过对符号、类或文件的即时导航来查找代码。检查调用或类型层次结构，轻松地搜索工程里的所有内容。通过使用连续按压两次Shift快捷键，打开代码查找界面。 查看Java接口文档 在Java代码选中HarmonyOS API或选中Java类时，使用快捷键Ctrl+Q（Mac为F1），在弹出的“Documentation”最下方，会显示相应文档的链接。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/04鸿蒙webview的使用和JS交互.html":{"url":"connent/鸿蒙/04鸿蒙webview的使用和JS交互.html","title":"04鸿蒙webview的使用和JS交互","keywords":"","body":"04鸿蒙-webview的使用和JS交互（附源码） 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 日常我们在开发项目时，为了项目快速的开发和迭代，难免会用到H5页面。使用鸿蒙进行项目开发时，也一样免不了要加载H5页面，在移动开发中打开H5页面需要使用WebView组件。同时，为了和H5页面进行数据交换，有时候还需要借助JSBridge来实现客户端与H5之间的通讯。 那么鸿蒙之中用到的技术是什么呢？WebView 在此之前，先看一个报错 ​ App Launch: The Huawei Lite Simulator supports only Lite projects. 这是什么原因呢，其实简单，就是你没有登陆 所以解决这个的问题就是你重新登录就好了。 汉化（V3.0 Beta2（2021-12-31）版本以上支持） 还有一个问题可能就是目前编辑器大家看着不太习惯，需要汉化一下，那么如何汉化呢，结合Androidstudio的经验，分为如下几步 第一步点击File-setting 第二步plugins里面选择如图所示的插件，并安装。 第三步，重启，汉化完成 第一步创建项目 点击next 第二步等依赖安装安装完成 第三步打开模拟器 点击登录，打开浏览器授权 选择p40 启动模拟器 第五步开始正文 接下来开始正文。 应用预览： 点击\"打开网址\"按钮会加载上方网址的Web页面，通过后退\"和\"前进\"按钮实现Web页面间的导航。 点击\"加载本地网页\"按钮加载本地Web页面，点击\"发送消息给本地html\"或者Web页面中的\"调用Java方法\"按钮，实现应用与Web页面间的交互。 这里是http访问方式，鸿蒙的默认是https访问模式，如果您的请求网址是http开头的，可以继续查看后面的教程。 1. 增加一个WebView组件 步骤 1 - 在\"resources/base/layout/ability_main.xml\"文件中创建WebView，示例代码如下： 步骤 2 - 在\"slice/MainAbilitySlice.java\"文件中通过如下方式获取WebView对象，示例代码如下： WebView webview = (WebView) findComponentById(ResourceTable.Id_webview); 2. 通过WebView加载Web页面 WebView加载页面分为加载Web页面和加载本地Web页面两种情况，接下来我们将分别进行介绍。 1.WebView加载网络Web页面 跟Android类似，要访问网络，我们首先要配置网络访问权限，在config.json的\"module\"节点最后，添加上网络权限代码 module\": { ...... \"reqPermissions\": [ { \"name\": \"ohos.permission.INTERNET\" } ] } 2 设置访问模式 鸿蒙的默认是https访问模式，如果您的请求网址是http开头的，请在config.json文件中的deviceConfig下，添加如下设置 \"deviceConfig\": { \"default\": { \"network\": { \"cleartextTraffic\": true } } }, 在\"slice/MainAbilitySlice.java\"文件中通过webview.load(String url)方法访问具体的Web页面，通过WebConfig类对WebView组件的行为进行配置，示例代码如下： WebConfig webConfig = webview.getWebConfig(); // WebView加载URL，其中urlTextField为输入URL的TextField组件 webview.load(urlTextField.getText()); 在Web页面进行链接跳转时，WebView默认会打开目标网址，通过WebAgent对象可以定制该行为，示例代码如下： webview.setWebAgent(new WebAgent() { @Override public boolean isNeedLoadUrl(WebView webView, ResourceRequest request) { if (request == null || request.getRequestUrl() == null) { LogUtil.info(TAG,\"WebAgent isNeedLoadUrl:request is null.\"); return false; } String url = request.getRequestUrl().toString(); if (url.startsWith(\"http:\") || url.startsWith(\"https:\")) { webView.load(url); return false; } else { return super.isNeedLoadUrl(webView, request); } } }); 除此之外，WebAgent对象还提供了相关的回调函数以观测页面状态的变更，如onLoadingPage、onPageLoaded、onError等方法。WebView提供Navigator类进行历史记录的浏览和处理，通过getNavigator()方法获取该类的对象，使用canGoBack()或canGoForward()方法检查是否可以向后或向前浏览，使用goBack()或goForward()方法向后或向前浏览，示例代码如下： Navigator navigator = webView.getNavigator(); if (navigator.canGoBack()) { navigator.goBack(); } if (navigator.canGoForward()) { navigator.goForward(); } 3.WebView加载本地Web页面 将本地的HTML文件放在\"resources/rawfile/\"目录下，在本教程中命名为test.html。在HarmonyOS系统中，WebView要访问本地Web文件，需要通过DataAbility的方式进行访问，DataAbility的具体使用方法可以参考开发 DataAbility,关于DataAbility的相关知识，后面也会继续展示，谁让他是最重要的内容呢。 在\"entry/src/main/config.json\"中完成DataAbility的声明，示例代码如下： module\": { ...... \"abilities\": [ { \"name\": \"com.huawei.codelab.DataAbility\", \"type\": \"data\", \"uri\": \"dataability://com.example.harmonyosdemo.DataAbility\" } ] } 另外需要实现一个DataAbility，通过实现openRawFile(Uri uri, String mode)方法，完成WebView对本地Web页面的访问，示例代码如下： public class DataAbility extends Ability { ... @Override public RawFileDescriptor openRawFile(Uri uri, String mode) throws FileNotFoundException { if (uri == null) {; return super.openRawFile(uri, mode); } String path = uri.getEncodedPath(); int splitIndex = path.indexOf('/', 1); String providerName = Uri.decode(path.substring(1, splitIndex)); String rawFilePath = Uri.decode(path.substring(splitIndex + 1)); RawFileDescriptor rawFileDescriptor = null; try { rawFileDescriptor = getResourceManager().getRawFileEntry(rawFilePath).openRawFileDescriptor(); } catch (IOException e) { // 异常处理 } return rawFileDescriptor; } } 在\"slice/MainAbilitySlice.java\"中声明需要访问的文件路径，通过webview.load(String url)方法加载本地Web页面，可以通过WebConfig类的对象对WebView访问DataAbility的能力进行配置，示例代码如下： private static final String URL_LOCAL = \"dataability://com.huawei.codelab.DataAbility/resources/rawfile/test.html\"; // 配置是否支持访问DataAbility资源，默认为true webConfig.setDataAbilityPermit(true); webview.load(URL_LOCAL); 4. 实现应用与WebView中的Web页面间的通信 本教程以本地Web页面\"resources/rawfile/test.html\"为例介绍如何实现应用与WebView中的Web页面间交互。 首先需要对WebConfig进行配置，使能WebView与Web页面JavaScript交互的能力，示例代码如下： // 配置是否支持JavaScript，默认值为false webConfig.setJavaScriptPermit(true); 1.应用调用Web页面 在\"resources/rawfile/test.html\"中编写callJS方法，待应用调用，示例代码如下： // 应用调用Web页面 function callJS(message) { alert(message); } 在\"slice/MainAbilitySlice.java\"中实现应用对JavaScript的调用，示例代码如下： webview.executeJs(\"javascript:callJS('这是来自JavaSlice的消息')\", msg -> { // 在这里处理Js的方法的返回值 }); 我们可以通过setBrowserAgent方法设置自定义BrowserAgent对象，以观测JavaScript事件及通知等，通过复写onJsMessageShow方法来接管Web页面弹出Alert对话框的事件，示例代码如下： webview.setBrowserAgent(new BrowserAgent(this) { @Override public boolean onJsMessageShow(WebView webView, String url, String message, boolean isAlert, JsMessageResult result) { LogUtil.info(TAG,\"BrowserAgent onJsMessageShow : \" + message); if (isAlert) { // 将Web页面的alert对话框改为ToastDialog方式提示 new ToastDialog(getApplicationContext()).setText(message).setAlignment(LayoutAlignment.CENTER).show(); // 对弹框进行确认处理 result.confirm(); return true; } else { return super.onJsMessageShow(webView, url, message, isAlert, result); } } }); 2.Web页面使用JavaScript调用应用 在\"resources/rawfile/test.html\"中编写按钮，当按钮被点击时实现JavaScript对应用的调用，示例代码如下： 调用Java方法 function sendData() { if (window.JsCallJava && window.JsCallJava.call) { // Web页面调用应用 var rst = window.JsCallJava.call(\"这个是来自本地Web页面的消息\"); } else { alert('发送消息给WebviewSlice失败'); } } 在\"slice/MainAbilitySlice.java\"中实现应用对JavaScript发起的调用的响应，示例代码如下： private static final String JS_NAME = \"JsCallJava\"; webview.addJsCallback(JS_NAME, str -> { // 处理接收到的JavaScript发送来的消息，本教程通过ToastDialog提示确认收到Web页面发来的消息 new ToastDialog(this).setText(str).setAlignment(LayoutAlignment.CENTER).show(); // 返回给JavaScript return \"Js Call Java Success\"; }); 总结 通过上面的完整代码，我们已经完成了webbiew的基本使用 仓库地址：https://github.com/ITmxs/hm_webview 感谢没用的喵叔指出的问题 个人认为这两句有点多余，默认处理http和https的逻辑应该就是return true，在父类里已经实现了。所以，这个方法直接改成这样： webview.setWebAgent(new WebAgent() { @Override public boolean isNeedLoadUrl(WebView webView, ResourceRequest request) { if (request == null || request.getRequestUrl() == null) { return false; } return super.isNeedLoadUrl(webView, request); } }); 第二步删除默认代码 打开index.hml文件，里面有默认代码如下： 山茶 第三步，开始学习 首先将图片放到common文件夹下面的images里面，注意，我的图片文件名是flutter.png， 从上面布局效果图可以看到，界面主要由image组件和text组件组成，我们现在index.html中添加image组件和text组件，并添加对应的class，用于设置组件的显示效果，代码如下： translate rotate rotateY scale opacity 第四步，为页面设计样式 在这个任务中，我们将一起为任务二中写好的页面添加样式，上面所有的组件都定义了class属性，它对应的样式都定义在index.css中，有关css更多的知识可以参考css语法参考。 这部分定义了整个页面中各个组件的样式。在index.css中先添加如下代码： .container { background-color: #F8FCF5; flex-direction: column; justify-content: center; align-items: center; } .img { margin-top: 10px; height: 100px; width: 100px; animation-timing-function: ease; animation-duration: 2s; animation-delay: 0s; animation-fill-mode: forwards; animation-iteration-count: infinite; } .text { font-size: 20px; } .img-translate { animation-name: translateAnim; } .img-rotate { animation-name: rotateAnim; } .img-rotateY { animation-name: rotateYAnim; } .img-scale { animation-name: scaleAnim; } .img-mixes { animation-name: mixesAnim; } .img-opacity { animation-name: opacityAnim; } /*从-100px平移到100px*/ @keyframes translateAnim { from { transform: translate(-100px); } to { transform: translate(100px); } } /*从0°旋转到360°*/ @keyframes rotateAnim { from { transform: rotate(0deg); } to { transform: rotate(360deg); } } /*沿Y轴旋转，从0°旋转到360°*/ @keyframes rotateYAnim { from { transform: rotateY(0deg); } to { transform: rotateY(360deg); } } /*从0倍缩放到1.2倍大小*/ @keyframes scaleAnim { from { transform: scale(0); } to { transform: scale(1.2); } } /*透明度从0变化到1*/ @keyframes opacityAnim { from { opacity: 0; } to { opacity: 1; } } 通过一个代码示例，实现image组件的平移、缩放、旋转和透明度变化动效。希望通过本教程，各位开发者可以对JS通用动画样式具有更深刻的认识。 在实现过程过也遇到一些问题，顺便做个记录 使用标签引入的本地图片无法加载 使用标签引入本地图片，但图片无法加载的可能情况有三种： 没有给图片设置宽度和高度，需要在对应的“page”目录下的 css 样式文件中设置图 片的宽高。 使用标签的图片不会自动缩放，图片宽高超过组件的宽高会自动 截取。 图片引入路径错误。图片引入的路径必须是项目编译后的静态文件的路径。  在导入图片或添加/删除页面后没有重新编译。 参考 动画样式： https://developer.huawei.com/consumer/cn/codelabsPortal/carddetails/HarmonyOS-WebView https://flutter.cn/docs/cookbook/design/themes © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/05从零到1学鸿蒙.html":{"url":"connent/鸿蒙/05从零到1学鸿蒙.html","title":"05从零到1学鸿蒙","keywords":"","body":" 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 今天我从认识鸿蒙开始，然后从零到1写个demo，我与鸿蒙结缘，还得是坚果大哥的推荐，当时是坚果老师说可以了解一下鸿蒙，运气好的话，还可以顺便拿个鸿蒙手环，这不，就来了。 首先认识一下鸿蒙系统是什么？ 鸿蒙系统是什么 鸿蒙OS分布式操作系统简介鸿蒙系统（HarmonyOS)，是第一款基于微内核的全场景分布式OS，是华为自主研发的操作系统。现被华为捐献给开放原子基金会管理，为开放原子基金会下的一个项目。 从 系统定位 上来说，HarmonyOS是一款“面向未来”、面向全场景（移动办公、运动健康、社交通信、媒体娱乐等）的分布式操作系统。 HarmonyOS有三大特征： 搭载该操作系统的设备在系统层面融为一体、形成超级终端，让设备的硬件能力可以弹性扩展，实现设备之间硬件互助，资源共享 面向开发者，实现一次开发，多端部署，这和Flutter差不多，就是不知道有没有人做过这方面的测评。 一套操作系统可以满足不同能力的设备需求，实现统一OS，弹性部署 鸿蒙HarmonyOS和OpenHarmony的关系 HarmonyOS 实际上分为两个部分，一部分是OpenHarmonyOS，另一部分是包括 HMS 在内的闭源应用与服务。 OpenHarmonyOS 是鸿蒙操作系统中开源的部分，类似于安卓系统中的 AOSP 项目，该项目目前由开放原子开源基金会负责社区化的开源运营，而 HarmonyOS 是基于 OpenHarmonyOS 的商用发行版。 鸿蒙社区 51cto鸿蒙专区 华为鸿蒙专区 电子发烧友鸿蒙专区 官方资源 鸿蒙开发者文档 gitee源码地址 鸿蒙应用开发IDE(DevEco studio) 鸿蒙设备开发IDE(DevEco Device Tool) 开放原子基金会 DevEco Marketplace 鸿蒙官网地址汇总 https://harmonyos.51cto.com/posts/7704 接下来就开始做自己的第一个鸿蒙应用 第一步，新建项目 打开编辑器选择新建项目，我们选择Java 按照如下方式，创建 点击finish即可完成，此时可以 第二步，远程调试 这个时候可以选择虚拟机进行调式，这里我选择远程调试， 在这儿的话要注册成为开发者才可以，如何成为开发者，我会视情况，在后面的文章中更新， 点击即可，稍等就会出现下图所示的运行界面，这样我们的第一个demo 接下来我们就来了解一下项目结构，这样也方便后面的开发， Java工程目录结构 Java工程目录结构如下图所示。 .gradle：Gradle配置文件，由系统自动生成，一般情况下不需要进行修改。 entry ：默认启动模块（主模块），开发者用于编写源码文件以及开发资源文件的目录。 entry>libs：用于存放entry模块的依赖文件。 entry>src>main>Java：用于存放Java源码。 entry>src>main>resources：用于存放应用/服务所用到的资源文件，如图形、多媒体、字符串、布局文件等。 好的，这样我们把目录结构也就了解完了 总结 今天我主要从鸿蒙是什么，到鸿蒙具备的那些特征，以及鸿蒙相关的资料，到最后运行了Java版的鸿蒙、顺便了解了Java目录结构，下一节会带来第一个小实例。 在Java UI框架中，提供了两种编写布局的方式：在XML中声明UI布局和在代码中创建布局。我将通过XML的方式编写第一个页面，通过代码的方式编写第二个页面，这样 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/06路由跳转.html":{"url":"connent/鸿蒙/06路由跳转.html","title":"06Java UI框架初探和路由跳转实现","keywords":"","body":"春节不停更，此文正在参加「星光计划-春节更帖活动 Java UI框架初探和路由跳转实现 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 上一节demo是已经跑起来了，这个时候其实你已经比好多人厉害了，不过和运营沟通的时候，说是用了外链，然后好多社区的小伙伴已经都是对鸿蒙有一定认识的，而且外链老用户也加了，所以不建议加，不过有个疑惑就是能保证下一个读者看到类似的外链，对鸿蒙有更深的认识吗，好的，废话不多说，我们继续今天 的内容。 Java UI框架概述 应用将在屏幕上显示一个用户界面，该界面用来显示所有可被用户查看和交互的内容。 应用中所有的用户界面元素都是由Component和ComponentContainer对象构成。Component是绘制在屏幕上的一个对象，用户能与之交互。ComponentContainer是一个用于容纳其他Component和ComponentContainer对象的容器。 Java UI框架提供了一部分Component和ComponentContainer的具体子类，即创建用户界面（UI）的各类组件，包括一些常用的组件（比如：文本、按钮、图片、列表等）和常用的布局（比如：DirectionalLayout和DependentLayout）。用户可通过组件进行交互操作，并获得响应。 在UI框架中，具体的布局类通常以XXLayout命名，完整的用户界面是一个布局，用户界面中的一部分也可以是一个布局。布局中容纳Component与ComponentContainer对象。 在Java UI框架中，提供了两种编写布局的方式： 在XML中声明UI布局 在代码中创建布局。 我将通过XML的方式编写第一个页面，通过代码的方式编写第二个页面，这样两种方法就都学会了，我是不是很机智呢，哈哈。 在Project窗口，点击“entry > src > main > resources > base > layout”，打开“ability_main.xml”文件。在Project窗口，点击“entry > src > main > resources > base > layout”，打开“ability_main.xml”文件。这点和安卓类似， （可选）在Project窗口，点击“entry > src > main > resources > base > element”，打开“string.json”文件，可在此文件内声明所需引用的资源内容。关于取值为string类型的文本属性，可以直接设置文本字串，也可以引用string资源（推荐使用）。string.json的示例代码如下： { \"string\":[ { \"name\":\"entry_MainAbility\", \"value\":\"entry_MainAbility\" }, { \"name\":\"mainability_description\", \"value\":\"Java_Empty Ability\" }, { \"name\":\"mainability_HelloWorld\", \"value\":\"Hello World\" }, { \"name\":\"button_Next\", \"value\":\"NextPage\" } ] } 1第一个页面内有一个文本和一个按钮，使用DependentLayout布局，通过Text和Button组件来实现，其中vp和fp分别表示虚拟像素和字体像素。本次示例展示两个组件的显示文本分别采用直接设置文本字串、引用string资源（推荐使用）的方式。“ability_main.xml”的示例代码如下： 按钮的背景是蓝色胶囊样式，可以通过graphic目录下的XML文件来设置。 右键点击“graphic”文件夹，选择“New > File”，命名为“background_button.xml”，单击回车键。 “background_button.xml”的示例代码如下： 在layout目录下的“ability_main.xml”文件中，使用background_element=\"$graphic:background_button\"的方式引用“background_button.xml”文件： 在XML文件中添加组件后，需要在Java代码中加载XML布局。 在Project窗口，选择“entry > src > main > java > com.example.myapplication > slice” ，打开“MainAbilitySlice.java”文件，使用setUIContent方法加载“ability_main.xml”布局。此外，运行代码前需采用import（可使用Alt+Enter快捷键）引入对应类，否则会产生报错提示。 说明 package com.example.harmonyosjava.slice; import com.example.harmonyosjava.ResourceTable; import ohos.aafwk.ability.AbilitySlice; import ohos.aafwk.content.Intent; public class MainAbilitySlice extends AbilitySlice { @Override public void onStart(Intent intent) { super.onStart(intent); super.setUIContent(ResourceTable.Layout_ability_main);// 加载layout目录下的XML布局 } @Override public void onActive() { super.onActive(); } @Override public void onForeground(Intent intent) { super.onForeground(intent); } } 创建另一个页面 在上一节中，我们用XML的方式编写了一个包含文本和按钮的页面。为了帮助开发者熟悉在代码中创建布局的方式，接下来我们使用代码的方式编写第二个页面。 1.在Project窗口，打开“entry > src > main > java > com.xxx.myapplication”，右键点击“slice”文件夹，选择“New > Java Class”，命名为“SecondAbilitySlice”，单击回车键。 2.第二个页面上有一个文本。打开“SecondAbilitySlice”文件，添加一个Text，示例代码如下 package com.example.harmonyosjava.slice; import com.example.harmonyosjava.ResourceTable; import ohos.aafwk.ability.AbilitySlice; import ohos.aafwk.content.Intent; public class MainAbilitySlice extends AbilitySlice { @Override public void onStart(Intent intent) { super.onStart(intent); super.setUIContent(ResourceTable.Layout_ability_main);// 加载layout目录下的XML布局 } @Override public void onActive() { super.onActive(); } @Override public void onForeground(Intent intent) { super.onForeground(intent); } } 实现页面跳转 打开第一个页面的“MainAbilitySlice.java”文件，添加按钮的响应逻辑，实现点击按钮跳转到下一页，示例代码如下： //请根据实际工程/包名引入 package com.example.harmonyosjava.slice; import com.example.myapplication.ResourceTable; import ohos.aafwk.ability.AbilitySlice; import ohos.aafwk.content.Intent; import ohos.agp.components.Button; public class MainAbilitySlice extends AbilitySlice { @Override public void onStart(Intent intent) { super.onStart(intent); super.setUIContent(ResourceTable.Layout_ability_main); Button button = (Button) findComponentById(ResourceTable.Id_button); // 点击按钮跳转至第二个页面 button.setClickedListener(listener -> present(new SecondAbilitySlice(), new Intent())); } } 好的，页面跳转的实现就是这样，是不是感觉和安卓开发有点类似，希望我们可以将所学融会贯通。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/07config.json.html":{"url":"connent/鸿蒙/07config.json.html","title":"07Config.json","keywords":"","body":"春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 上一节我在webview的实现中，用到了几个文件夹，这是单独拎出来，做一个介绍，这样的好处就是可以使你更加容易理解一个应用的开发流程。 第一个就是config.json 配置文件“config.json”采用JSON文件格式，其中包含了一系列配置项，每个配置项由属性和值两部分构成： 属性出现顺序不分先后，但是每个属性最多只允许出现一次。 每个属性的值为JSON的基本数据类型（数值、字符串、布尔值、数组、对象或者null类型） 那我我们来看一下他的这个文件里都包含那些内容，按照我学习小程序的经验，小程序里有app.json文件，我们就结合小程序来看看他的这里面的东西 小程序启动之后首先就是解析app.json，其实鸿蒙也一样，应用启动之后，先解析config.json文件。 config.json分为三个部分：app 、deviceConfig 、module 也可以通过这个截图查看，我这里展示的三块是缩放后的内容，也是为了方便观察。 app是整个项目的配置，包含了厂商信息、版本号等。 deviceConfig：表示应用在设备上的配置信息。 module：表示整个代码的配置信息。 接下来就详细了解一下 1.app \"app\": { \"package\": \"com.example.harmonyosdemo\", //新建项目时指定的PackageName，而且IDE建议以 com.开头 \"name\": \".MyApplication\", \"mainAbility\": \"com.example.harmonyosdemo.MainAbility\", //根据新建项目时指定的PackageName 的第一个 . 之后的字符串 \"version\": { //版本 \"code\": 1, //版本号，目前测试看，系统并不会阻止降级安装。 \"name\": \"1.0\" //版本名 }, \"apiVersion\": { //依赖的鸿蒙SDK版本 \"compatible\": 3, //兼容版本 \"target\": 3 //编译版本 } }, bundleName包名，你创建时候的 vendor，是应用开发厂商的描述，也就是开发公司的名字。我这是这是一个demo，所以是example，后面正式开发的时候记得修改。 version：版本号，包含：name、code。通常通过检查code，进行版本升级。 2.deviceConfig解析 deviceConfig：应用在设备上配置信息，进程名等等，可以包含default、phone、tablet、tv、car、wearable、liteWearable和smartVision等属性。default标签内的配置是适用于所有设备通用，其他设备类型如果有特殊的需求，则需要在该设备类型的标签下进行配置。 比如我这里设置的是为了能在http下也可以请求成功，鸿蒙的默认是https访问模式，如果您的请求网址是http开头的，请在config.json文件中的deviceConfig下，添加如下设置 \"deviceConfig\": { \"default\": { \"network\": { \"cleartextTraffic\": true } } }, 3.module解析 \"module\": { //模块列表，有三个必填的属性 : package,deviceType,distro \"package\": \"com.example.harmonyosdemo\", //模块的包名 \"name\": \".Learning\", //模块名称 \"reqCapabilities\": [ \"video_support\" ], \"deviceType\": [ //目前看是有 \"default\",\"tv\",\"wearable\",smartVision 。 \"tv\" ], \"distro\": { //distro下面都是必填项 \"deliveryWithInstall\": true, //是否在应用安装时，安装此模块的 hap \"moduleName\": \"entry\", \"moduleType\": \"entry\" //现在是有 entry,feature,har 三种。 }, \"defPermissions\": { //其它应用要访问你的App时需要拥有的权限。 \"name\": \"com.example.harmonyosdemo.DataAbilityShellProvider.PROVIDER\", //权限名称 \"grantMode\": \"user_grant\" //user_grant 或者 system_grant }, \"reqPermissions\": [ //你的应用需要的权限列表，这里写明后，同样需要运行时申请。 { \"name\": \"ohos.permission.INTERNET\" //举例：网络访问权限。 } ], \"abilities\": [ //Ability列表 { \"skills\": [ { \"entities\": [ \"entity.system.home\" //在全部应用上面显示此Ability ], \"actions\": [ \"action.system.home\" //默认启动此Ability ] } ], \"orientation\": \"landscape\", //横屏 \"formEnabled\": false, //是否支持AbilityForm。 \"name\": \"com.aos.learning.MainAbility\", //Ability名称 \"icon\": \"$media:icon\", //Ability图标 \"description\": \"$string:mainability_description\", //Ability描述 \"label\": \"Learning\", //Ability标题 \"type\": \"page\", //Ability类型 ：PageAbility or ServiceAbility or DataAbility \"launchType\": \"standard\" //启动模式，目前支持 standard模式和 singleton模式。 } ] } } 参考表来自于 package 包名 name是hap包的名字，至于什么是HAP,我在后面介绍 mainAbility表示HAP包的入口ability名称，可自定义，这样你后期调试也会简单 deviceType表示项目可以在哪些设备上运行。 因为可能有多个设备，所以有个方括号，表示这些值可以写到一个数组中。如下，你能看懂是那些设备吧，其实这些你应该在创建项目的时候就观察到。 \"deviceType\": [ \"phone\", \"tablet\", \"tv\", \"wearable\", \"car\" ], distro表示HAP包的描述信息 deliveryWithInstall 当前hap包是否可以支持随应用安装。一般都写成true。 moduleName：当前HAP的名称 moduleType：表示当前HAP的类型。entry也表示当前的hap是一个主要的模块，可以单独安装并运行 abilities：代码中每一个页面的配置信息。 HarmonyOS的DevEco Studio支持两种编辑config.json的方式，分别是代码编辑视图和可视化编辑视图。 1.代码视图 { \"app\": { \"bundleName\": \"com.example.harmonyosdemo\", \"vendor\": \"example\", \"version\": { \"code\": 1000000, \"name\": \"1.0.0\" } }, \"deviceConfig\": { \"default\": { \"network\": { \"cleartextTraffic\": true } } }, \"module\": { \"package\": \"com.example.harmonyosdemo\", \"name\": \".MyApplication\", \"mainAbility\": \"com.example.harmonyosdemo.MainAbility\", \"deviceType\": [ \"phone\", \"tablet\", \"tv\", \"wearable\", \"car\" ], \"distro\": { \"deliveryWithInstall\": true, \"moduleName\": \"entry\", \"moduleType\": \"entry\", \"installationFree\": false }, \"abilities\": [ { \"skills\": [ { \"entities\": [ \"entity.system.home\" ], \"actions\": [ \"action.system.home\" ] } ], \"orientation\": \"unspecified\", \"visible\": true, \"name\": \"com.example.harmonyosdemo.MainAbility\", \"icon\": \"$media:icon\", \"description\": \"$string:mainability_description\", \"label\": \"$string:entry_MainAbility\", \"type\": \"page\", \"launchType\": \"standard\" }, { \"name\": \"com.example.harmonyosdemo.DataAbility\", \"icon\": \"$media:icon\", \"description\": \"$string:dataability_description\", \"type\": \"data\", \"uri\": \"dataability://com.example.harmonyosdemo.DataAbility\" } ], \"defPermissions\": [ { \"name\": \"com.example.harmonyosdemo.DataAbilityShellProvider.PROVIDER\" } ], \"reqPermissions\": [ { \"reason\": \"\", \"name\": \"ohos.permission.INTERNET\" } ] } } 2. 编辑视图 总结： 这里了解了config.json的三个部分，app 、deviceConfig 、module，以及他的两种编辑方式，大家可以按照自己的需求实现自己想要的。 参考文档：应用配置介绍 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/08为自己的鸿蒙应用增加卡片.html":{"url":"connent/鸿蒙/08为自己的鸿蒙应用增加卡片.html","title":"08为自己的鸿蒙应用增加卡片","keywords":"","body":" 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 Java卡片开发 在开始之前可以先看下这张图，我们不仅陷入思索，这种卡片是如何制作的，接下来我们就一探究竟，当然，由于我是刚开始做，所以布局这方面如果做的不好，还是希望大家见谅。 在此之前，我们先来了解一下 什么是服务卡片 服务卡片是FA的一种主要信息呈现形式，开发者可以在卡片中展示用户最关心的FA数据，并可以通过点击卡片内容直接打开FA。例如， 支付类FA，可以在服务卡片中展示付钱，收钱功能，点击就可以直接启动，支付类FA, 天气类FA，可以在服务卡片中展示当前的基本天气信息，点击卡片启动天气FA， 支持的尺寸包括：12、22、24和44。 服务卡片提供了多种类型的模板，开发者可以根据需要展示的信息类型灵活选择模板，快速构建服务卡片。 https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ide_service_widget-0000001078566997 使用方面需要了解到的 每个FA最多可以配置16张服务卡片。其实16张完全用不到，3.5个足以。 JS卡片不支持调试。我在本文用的Java，但是你也要了解js相关的不是。 创建服务卡片 DevEco Studio提供服务卡片的一键创建功能，可以快速创建和生成服务卡片模板。 对于创建新工程，可以在工程向导中勾选“Show in service center”，该参数表示是否在服务中心露出，勾选该参数会同步创建服务卡片模板。 如果Project type为Atomic service，则会同步创建一个2*2的服务卡片模板，同时还会创建入口卡片。 如果Project type为Application，则只会创建一个2*2的服务卡片模板。 卡片创建完成后，会在工程目录下生成EntryCard目录。 在该目录下，每个拥有EntryCard的模块，都会生成一个和模块名相同的文件夹，同时还会默认生成一张2x2的快照型EntryCard图片（png格式）。 开发者可以将其替换为提前设计好的2x2快照图：将新的快照图拷贝到上图目录下，删除默认图片，新图片命名遵循格式“卡片名称-2x2.png”。 在已有工程中，新添加服务卡片，可以通过如下方法进行创建。 打开一个工程，创建服务卡片，创建方法包括如下两种方式： 选择模块（如entry模块）下的任意文件，点击菜单栏File > New > Service Widget创建服务卡片。 选择模块（如entry模块）下的任意文件，点击右键 > New > Service Widget创建服务卡片。 在Choose a Template for Your Service Widget界面中，选择卡片模板，点击Next。 说明 如果选择带有Super Visual的卡片模板，则支持使用低代码进行开发，具体请参考使用低代码开发服务卡片。 在Configure Your Service Widget界面中，配置卡片的基本信息，包括： Service widget name：卡片的名称，在同一个FA中，卡片名称不能重复，且只能包含数字、字母和下划线。 Description：卡片的描述信息。 Module name：卡片所属的模块。 Select ability/New ability ：选择一个挂靠服务卡片的Page Ability，或者创建一个新的Page Ability。 说明 如果选择的Ability是继承AceAbility时，请参考JS卡片开发指导的步骤2进行修改。 Type：卡片的开发语言类型。 JS component name：Type选择JS时需要设置卡片的JS Component名称。 Support dimensions：选择卡片的规格，同时还可以查看卡片的效果图预览。部分卡片支持同时设置多种规格。 点击Finish完成卡片的创建。创建完成后，工具会自动创建出服务卡片的布局文件，并在config.json文件中写入服务卡片的属性字段，关于各字段的说明请参考应用配置文件说明。 卡片创建完成后，请根据Java卡片开发指导或JS卡片开发指导，完成服务卡片的开发，详情请参考服务卡片开发指南。 预览服务卡片 在开发服务卡片过程中，支持对卡片进行实时预览。服务卡片通过XML或JS文件进行布局设计，在开发过程中，可以对布局XML/JS文件进行实时预览，只要在XML/JS布局文件中保存了修改的源代码，在预览器中就可以实时查看布局效果。在Phone和Tablet服务卡片的预览效果中，每个尺寸的服务卡片提供3种预览效果，分别为极窄（Minimum）、标准（Default）、极宽(Maximum)，开发者应确保三种尺寸的显示效果均正常，以便适应不同屏幕尺寸的设备。 config.json文件\"abilities\"配置forms模块细节如下，各属性详情可见表1。 \"forms\": [ { \"name\": \"Form_Java\", \"description\": \"form_description\", \"type\": \"Java\", \"colorMode\": \"auto\", \"isDefault\": true, \"updateEnabled\": true, \"scheduledUpdateTime\": \"10:30\", \"updateDuration\": 1, \"defaultDimension\": \"2*2\", \"formVisibleNotify\": true, \"supportDimensions\": [ \"1*2\", \"2*2\", \"2*4\", \"4*4\" ], \"landscapeLayouts\": [ \"$layout:form_ability_layout_1_2\", \"$layout:form_ability_layout_2_2\", \"$layout:form_ability_layout_2_4\", \"$layout:form_ability_layout_4_4\" ], \"portraitLayouts\": [ \"$layout:form_ability_layout_1_2\", \"$layout:form_ability_layout_2_2\", \"$layout:form_ability_layout_2_4\", \"$layout:form_ability_layout_4_4\" ], \"formConfigAbility\": \"ability://SecondFormAbility\", \"metaData\": { \"customizeData\": [ { \"name\": \"originWidgetName\", \"value\": \"com.huawei.weather.testWidget\" } ] } } ] 说明 \"forms\"模块中的name为卡片名，即在onCreateForm中根据AbilitySlice.PARAM_FORM_NAME_KEY可取到的值。 在卡片所在的\"abilities\"中还需要配置\"visible\": true和\"formsEnabled\": true。 参考文档 https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-service-widget-provider-java-0000001104082220 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/09应用的生命周期.html":{"url":"connent/鸿蒙/09应用的生命周期.html","title":"09应用的生命周期","keywords":"","body":"应用的生命周期 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 在之前的文章里写了config.js的一些基础 当然如果你的项目是js开发的，那么你还会发现不仅仅只有三个模块，在module还加了一个js 它表示基于ArkUI框架开发的JS模块集合，其中的每个元素代表一个 JS模块的信息。 { \"app\": { \"bundleName\": \"com.example.myharmonydemo\", \"vendor\": \"example\", \"version\": { \"code\": 1000000, \"name\": \"1.0.0\" } }, \"deviceConfig\": {}, \"module\": { \"package\": \"com.example.myharmonydemo\", \"name\": \".MyApplication\", \"mainAbility\": \"com.example.myharmonydemo.MainAbility\", \"deviceType\": [ \"phone\" ], \"distro\": { \"deliveryWithInstall\": true, \"moduleName\": \"entry\", \"moduleType\": \"entry\", \"installationFree\": true }, \"abilities\": [ { \"skills\": [ { \"entities\": [ \"entity.system.home\" ], \"actions\": [ \"action.system.home\" ] } ], \"name\": \"com.example.myharmonydemo.MainAbility\", \"icon\": \"$media:icon\", \"description\": \"$string:mainability_description\", \"label\": \"$string:entry_MainAbility\", \"type\": \"page\", \"launchType\": \"standard\" } ], \"js\": [ { \"pages\": [ \"pages/index/index\" ], \"name\": \"default\", \"window\": { \"designWidth\": 720, \"autoDesignWidth\": true } } ] } } 那我们就来看一下这个js里都有些什么内容 \"js\": [ { \"name\": \"default\", \"pages\": [ \"pages/index/index\", \"pages/detail/detail\" ], \"window\": { \"designWidth\": 720, \"autoDesignWidth\": false }, \"type\": \"form\" } ] 由代码可知js标签包含三部分 标签 类型 默认值 必填 描述 name string default 是 表示JS Component的名字。该标签不可缺省，默认值为default。 pages Array - 是 表示JS Component的页面用于列举JS Component中每个页面的路由信息[页面路径+页面名称]。该标签不可缺省，取值为数组，数组第一个元素代表JS FA首页。 window Object - 否 window用于定义与显示窗口相关的配置。 type 字符串 表示JS应用的类型。取值范围如下：normal：标识该JS Component为应用实例。form：标识该JS Component为卡片实例 window包含两个属性 designWidth：自定义宽度,根据实际设备宽度来缩放元素大小 autoDesignWidth：自动适配,表示页面设计基准宽度是否自动计算。当配置为true时，designWidth将会被忽略，设计基准宽度由设备宽度与屏幕密度计算得出。 接下来就是app.js的一些基础 应用的生命周期 export default { data: { test: \"我是全局参数\" },//页面获取全局 export var appData = getApp().data; onCreate() { console.info('当应用创建时调用。'); }, onShow() { console.info('当应用处于前台时触发。'); }, onHide() { console.info('当应用处于后台时触发。'); }, onDestroy() { console.info('当应用退出时触发。'); } }; 看完之后是不是觉得和小程序的生命周期有一拼，下面是小程序的生命周期 App({ /** * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次） */ onLaunch: function () { }, /** * 当小程序启动，或从后台进入前台显示，会触发 onShow （应用进入前台） */ onShow: function (options) { }, /** * 当小程序从前台进入后台，会触发 onHide （应用进入后台） */ onHide: function () { }, /** * 当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息 */ onError: function (msg) { } }) 单个页面的生命周期 export default { data: { title:\"我是首页\", continueAbilityData: {} }, // shareData的数据会在onSaveData触发时与saveData一起传送到迁移目标FA，并绑定到其shareData数据段上 // shareData的数据可以直接使用this访问。eg:this.remoteShareData1 shareData: { remoteShareData1: 'share data for distribute', remoteShareData2: { item1: 0, item2: false, item3: 'inner string' }, remoteShareData3: [4, 5, 6] }, onInit() { console.info('当应用创建时调用。'); //$t代表国际化翻译 this.title = this.$t('strings.world'); }, onReady() { console.info('页面创建完成时触发，只触发一次。'); }, onShow() { console.info('页面显示时触发。'); }, onHide() { console.info('页面消失时触发。'); }, onDestroy() { console.info('页面销毁时触发。'); }, onBackPress() { /** * 返回true表示页面自己处理返回逻辑。 * 返回false表示使用默认的返回逻辑。 * 不返回值会作为false处理。 * */ console.info('当用户点击返回按钮时触发。'); }, onActive() { console.info('页面激活时触发。'); }, onInactive() { console.info('页面暂停时触发。'); }, onNewRequest() { console.info('FA已经启动时收到新的请求后触发。'); }, onStartContinuation() { console.info('判断当前的状态是不是适合迁移。'); return true; }, onSaveData(saveData) { console.info('数据保存到savedData中进行迁移。'); var data = this.continueAbilityData; Object.assign(saveData, data) }, onRestoreData(restoreData) { console.info('收到迁移数据，恢复。'); var data = this.continueAbilityData; this.continueAbilityData = restoreData; }, onCompleteContinuation(code) { console.info(\"迁移操作完成，code返回结果: code = \" + code); }, onConfigurationUpdated(configuration) { //onConfigurationUpdated页面事件需要在config.json中配置相应的configChanges标签。 console.info(\"当相应的系统配置发生变更时触发该回调，如系统字体大小，语言地区等。\"); }, } 下面是小程序单个页面的生命周期，可以对比来看。 /** * 生命周期函数--监听页面加载 */ onLoad: function (options) { }, /** * 生命周期函数--监听页面初次渲染完成 */ onReady: function () { }, /** * 生命周期函数--监听页面显示(页面打开的时候触发) */ onShow: function () { }, /** * 生命周期函数--监听页面隐藏（页面隐藏的时候触发）(打开其他页面时当前页面就认为被隐藏) */ onHide: function () { }, /** * 生命周期函数--监听页面卸载（打开A页面进入B页面，当返回A页面的时候就是B页面的卸载） */ onUnload: function () { }, /** * 页面相关事件处理函数--监听用户下拉动作 */ onPullDownRefresh: function () { }, /** * 页面上拉触底事件的处理函数 */ onReachBottom: function () { }, /** * 用户点击右上角分享 */ onShareAppMessage: function () { } 学习就是这样，如果有了参照屋，你就会发现，学习的效率高。理解起来也简单，所以如果允许的话，可以考虑先把一门技术学通，其他的就可以融会贯通。 最后我们看一下入口文件 AceAbility类是JS FA在HarmonyOS上运行环境的基类，继承自Ability。也是程序真实入口文件。 MainAbility 需要继承AceAbility package com.example.myapplication; import ohos.ace.ability.AceAbility; import ohos.aafwk.content.Intent; public class MainAbility extends AceAbility { @Override public void onStart(Intent intent) { setInstanceName(\"default\"); super.onStart(intent); } @Override public void onStop() { super.onStop(); } } 总结 这篇文章带你了解了应用的生命周期和单个页面的生命周期，通过对比发现，通过和小程序的对比，你就会发现，学习的效率高。理解起来也简单，所以如果允许的话，可以考虑先把一门技术学通，这样有了参照屋，其他的就可以融会贯通。 最后给大家带来一个彩蛋，也是因为刚安装的时候是浅色主题，不太喜欢，结合AS的修改策略，修改了华为DevEco Studio的主题色。 华为DevEco Studio怎么设置深色主题? 使用华为的DevEco Studio软件时，显示界面可以设置不同的显示主题，呈现不同的颜色，可以根据个人喜好来做更改。 点击文件菜单下的“设置”，在弹出的窗口中，选择“外观和行为” 在右侧的“外观”窗口中，点击主题边的下拉菜单，可以看到有多个主题可以选择，选择其中符合自己喜好的，点击右下角的应用，再点击确定即可。 Page Ability生命周期 https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-page-lifecycle-0000000000029840 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/10Ability概述.html":{"url":"connent/鸿蒙/10Ability概述.html","title":"10Ability概述","keywords":"","body":"10Ability概述 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 鸿蒙开发核心之Ability详解 Ability是应用所具备能力的抽象，也是应用程序的重要组成部分。一个应用可以具备多种能力（即可以包含多个Ability），HarmonyOS支持应用以Ability为单位进行部署。Ability可以分为FA（Feature Ability）和PA（Particle Ability）两种类型，每种类型为开发者提供了不同的模板，以便实现不同的业务功能。   FA（Feature Ability） 中文意思是功能能力，支持Page Ability Page模板是FA唯一支持的模板，用于提供与用户交互的能力。一个Page实例可以包含一组相关页面，每个页面用一个AbilitySlice实例表示。 PA（Particle Ability） 这个里面也是支持两个能力， Service Ability 和 Data Ability 我相信你知道它们的意思，就是服务能力和数据能力。 Service模板：用于提供后台运行任务的能力。 Data模板：用于对外部提供统一的数据访问抽象。 例如，新闻APP可以通过一个Page来实现，其中包含了两个AbilitySlice：一个AbilitySlice用于展示新闻列表，另一个AbilitySlice用于展示新闻详情。Page和AbilitySlice的关系如图所示。 Page与AbilitySlice 上面的例子大家看懂了没？一个 Page 可以包含多个 AbilitySlice，但是 Page 进入前台时界面默认只展示一个AbilitySlice。默认展示的 AbilitySlice 是通过 setMainRoute() 方法来指定的。如果需要更改默认展示的 AbilitySlice，可以通过 addActionRoute() 方法为此 AbilitySlice 配置一条路由规则。 package com.example.harmonyosdemo; import com.example.harmonyosdemo.slice.MainAbilitySlice; import com.example.harmonyosdemo.slice.SecondAbilitySlice; import ohos.aafwk.ability.Ability; import ohos.aafwk.content.Intent; public class MainAbility extends Ability { @Override public void onStart(Intent intent) { super.onStart(intent); //默认显示 super.setMainRoute(MainAbilitySlice.class.getName()); //配置路由规则显示 addActionRoute( \"action.second\", SecondAbilitySlice.class.getName()); } } 看图可能更加容易理解。 此时，当其他 Page 实例期望导航到此 AbilitySlice 时，可以在 Intent 中指定 Action。addActionRoute() 方法中使用的动作命名，需要在应用配置文件（config.json）中注册： \"skills\": [ { \"entities\": [ \"entity.system.home\" ], \"actions\": [ \"action.system.home\", \"action.second\" ] } ], 当然在配置文件（config.json）中注册Ability时，可以通过配置Ability元素中的“type”属性来指定Ability模板类型，示例如下。 其中，“type”的取值可以为“page”、“service”或“data”，分别代表 Page 模板、Service 模板、Data 模板。结合下面这个图来看知道是怎么回事了，type的属性值取决于你创建Ability是选择的类型，当然你也可以后面再改。 { \"module\": { ... \"abilities\": [ { ... \"type\": \"page\" ... } ] ... } ... } 一 、Page Ability讲解 Android 中有Activity，Activity有生命周期，现在我们知道的是鸿蒙这个Page Ability是主要负责页面交互的，同样的Page Ability也是有生命周期的。 1. Page Ability 生命周期 系统管理或用户操作等行为均会引起Page实例在其生命周期的不同状态之间进行转换。Ability类提供的回调机制能够让Page及时感知外界变化，从而正确地应对状态变化（比如释放资源），这有助于提升应用的性能和稳健性。 首先来看官方的一张图 可以看到周期分别是onStart()、onActive()、onInactive()、onBackground()、onForeground()、onStop()六个，那么接下来我们就详细了解一下。 onStart() 当系统首次创建 Page Ability实例时，触发该回调。对于一个 Page Ability实例，该回调在其生命周期过程中仅触发一次，Page Ability在该逻辑后将进入 INACTIVE 状态。开发者必须重写该方法，并在此配置默认展示的 AbilitySlice。如下图所示 onActive() Page会在进入INACTIVE状态后来到前台，然后系统调用此回调。Page在此之后进入ACTIVE状态，该状态是应用与用户交互的状态。Page将保持在此状态，除非某类事件发生导致Page失去焦点，比如用户点击返回键或导航到其他Page。当此类事件发生时，会触发Page回到INACTIVE状态，系统将调用onInactive()回调。此后，Page可能重新回到ACTIVE状态，系统将再次调用onActive()回调。因此，开发者通常需要成对实现onActive()和onInactive()，并在onActive()中获取在onInactive()中被释放的资源。类似于Android的onResume。 onInactive() 当Page失去焦点时，系统将调用此回调，此后Page进入INACTIVE状态。开发者可以在此回调中实现Page失去焦点时应表现的恰当行为。类似于Android的onPause和onStop的集合体。 onBackground() 如果Page不再对用户可见，系统将调用此回调通知开发者用户进行相应的资源释放，此后Page进入BACKGROUND状态。开发者应该在此回调中释放Page不可见时无用的资源，或在此回调中执行较为耗时的状态保存操作。 onForeground() 处于BACKGROUND状态的Page仍然驻留在内存中，当重新回到前台时（比如用户重新导航到此Page），系统将先调用onForeground()回调通知开发者，而后Page的生命周期状态回到INACTIVE状态。开发者应当在此回调中重新申请在onBackground()中释放的资源，最后Page的生命周期状态进一步回到ACTIVE状态，系统将通过onActive()回调通知开发者用户。 onStop() 系统将要销毁Page时，将会触发此回调函数，通知用户进行系统资源的释放。销毁Page的可能原因包括以下几个方面： 用户通过系统管理能力关闭指定Page，例如使用任务管理器关闭Page。 用户行为触发Page的terminateAbility()方法调用，例如使用应用的退出功能。 配置变更导致系统暂时销毁Page并重建。 系统出于资源管理目的，自动触发对处于BACKGROUND状态Page的销毁。 2. AbilitySlice 生命周期 说实话一开始创建项目的时候就只有这个MainAbility和HelloWorld以及slice包下的MainAbilitySlice，后来新建了一个SecondAbility，而SecondAbilitySlice是自动生成的，这说明一个问题，它们之间有不可告人的秘密。我们可以一起来看看， 解释：AbilitySlice 作为 Page Ability的组成单元，其生命周期是依托于其所属 Page Ability生命周期的。AbilitySlice 和 Page Ability具有相同的生命周期状态和同名的回调，当 Page Ability生命周期发生变化时，它的 AbilitySlice 也会发生相同的生命周期变化。此外，AbilitySlice 还具有独立于 Page Ability的生命周期变化，这发生在同一 Page Ability中的 AbilitySlice 之间导航时，此时 Page Ability的生命周期状态不会改变。AbilitySlice 生命周期回调与 Page Ability的相应回调类似，因此不再赘述。由于 AbilitySlice 承载具体的页面，开发者必须重写 AbilitySlice 的 onStart()回调，并在此方法中通过 setUIContent()方法设置页面，如下所示： Page 与 AbilitySlice 生命周期关联   当 AbilitySlice 处于前台且具有焦点时，其生命周期状态随着所属 Page Ability的生命周期状态的变化而变化。当一个 Page Ability拥 有多个 AbilitySlice 时，例如：MyAbility 下有 FooAbilitySlice 和 BarAbilitySlice，当前 FooAbilitySlice 处于前台并获得焦点，并即将导航到 BarAbilitySlice，在此期间的生命周期状态变化顺序为： 1.FooAbilitySlice 从 ACTIVE 状态变为 INACTIVE 状态。 2.BarAbilitySlice 则从 INITIAL 状态首先变为 INACTIVE 状态，然后变为 ACTIVE 状态（假定此前 BarAbilitySlice 未曾启动）。 3.FooAbilitySlice 从 INACTIVE 状态变为 BACKGROUND 状态。对应两个 slice 的生命周期方法回调顺序为： FooAbilitySlice.onInactive() --> BarAbilitySlice.onStart() --> BarAbilitySlice.onActive() --> FooAbilitySlice.onBackground() 在整个流程中，MyAbility 始终处于 ACTIVE 状态。但是，当 Page Ability被系统销毁时，其所有已 实例化的 AbilitySlice 将联动销毁，而不仅是处于前台的 AbilitySlice。 二、Service Ability Service Ability基本概念 基于Service模板的Ability（以下简称“Service”）主要用于后台运行任务（如执行音乐播放、文件下载等），但不提供用户交互界面。Service可由其他应用或Ability启动，即使用户切换到其他应用，Service仍将在后台继续运行。 Service是单实例的。在一个设备上，相同的Service只会存在一个实例。如果多个Ability共用这个实例，只有当与Service绑定的所有Ability都退出后，Service才能够退出。由于Service是在主线程里执行的，因此，如果在Service里面的操作时间过长，开发者必须在Service里创建新的线程来处理（详见线程间通信），防止造成主线程阻塞，应用程序无响应。 创建Service 首先介绍如何创建一个Service。 创建Ability的子类，实现Service相关的生命周期方法。Service也是一种Ability，Ability为Service提供了以下生命周期方法，开发者可以重写这些方法，来添加其他Ability请求与Service Ability交互时的处理方法。 onStart() 该方法在创建Service的时候调用，用于Service的初始化。在Service的整个生命周期只会调用一次，调用时传入的Intent应为空。 onCommand() 在Service创建完成之后调用，该方法在客户端每次启动该Service时都会调用，开发者可以在该方法中做一些调用统计、初始化类的操作。 onConnect() 在Ability和Service连接时调用，该方法返回IRemoteObject对象，开发者可以在该回调函数中生成对应Service的IPC通信通道，以便Ability与Service交互。Ability可以多次连接同一个Service，系统会缓存该Service的IPC通信对象，只有第一个客户端连接Service时，系统才会调用Service的onConnect方法来生成IRemoteObject对象，而后系统会将同一个RemoteObject对象传递至其他连接同一个Service的所有客户端，而无需再次调用onConnect方法。 onDisconnect() 在Ability与绑定的Service断开连接时调用。 onStop() 在Service销毁时调用。Service应通过实现此方法来清理任何资源，如关闭线程、注册的侦听器等。 创建Service的代码示例如下： public class ServiceAbility extends Ability { @Override public void onStart(Intent intent) { super.onStart(intent); } @Override public void onCommand(Intent intent, boolean restart, int startId) { super.onCommand(intent, restart, startId); } @Override public IRemoteObject onConnect(Intent intent) { return super.onConnect(intent); } @Override public void onDisconnect(Intent intent) { super.onDisconnect(intent); } @Override public void onStop() { super.onStop(); } } 2.注册Service。 Service也需要在应用配置文件中进行注册，注册类型type需要设置为service。 { \"module\": { \"abilities\": [ { \"name\": \".ServiceAbility\", \"type\": \"service\", \"visible\": true ... } ] ... } ... } 启动Service 介绍通过startAbility()启动Service以及对应的停止方法。 启动Service Ability为开发者提供了startAbility()方法来启动另外一个Ability。因为Service也是Ability的一种，开发者同样可以通过将Intent传递给该方法来启动Service。不仅支持启动本地Service，还支持启动远程Service。 开发者可以通过构造包含DeviceId、BundleName与AbilityName的Operation对象来设置目标Service信息。这三个参数的含义如下： DeviceId：表示设备ID。如果是本地设备，则可以直接留空；如果是远程设备，可以通过ohos.distributedschedule.interwork.DeviceManager提供的getDeviceList获取设备列表，详见Java API参考。 BundleName：表示包名称。 AbilityName：表示待启动的Ability名称。 启动本地设备Service的代码示例如下： Intent intent = new Intent(); Operation operation = new Intent.OperationBuilder() .withDeviceId(\"\") .withBundleName(\"com.domainname.hiworld.himusic\") .withAbilityName(\"com.domainname.hiworld.himusic.ServiceAbility\") .build(); intent.setOperation(operation); startAbility(intent); 启动远程设备Service的代码示例如下： Intent intent = new Intent(); Operation operation = new Intent.OperationBuilder() .withDeviceId(\"\") .withBundleName(\"com.domainname.hiworld.himusic\") .withAbilityName(\"com.domainname.hiworld.himusic.ServiceAbility\") .build(); intent.setOperation(operation); startAbility(intent); 执行上述代码后，Ability将通过startAbility() 方法来启动Service。 如果Service尚未运行，则系统会先调用onStart()来初始化Service，再回调Service的onCommand()方法来启动Service。 如果Service正在运行，则系统会直接回调Service的onCommand()方法来启动Service。 停止Service Service一旦创建就会一直保持在后台运行，除非必须回收内存资源，否则系统不会停止或销毁Service。开发者可以在Service中通过terminateAbility()停止本Service或在其他Ability调用stopAbility()来停止Service。 停止Service同样支持停止本地设备Service和停止远程设备Service，使用方法与启动Service一样。一旦调用停止Service的方法，系统便会尽快销毁Service。 连接Service 如果Service需要与Page Ability或其他应用的Service Ability进行交互，则须创建用于连接的Connection。Service支持其他Ability通过connectAbility()方法与其进行连接。 在使用connectAbility()处理回调时，需要传入目标Service的Intent与IAbilityConnection的实例。IAbilityConnection提供了两个方法供开发者实现：onAbilityConnectDone()是用来处理连接Service成功的回调，onAbilityDisconnectDone()是用来处理Service异常死亡的回调。 创建连接Service回调实例的代码示例如下： // 创建连接Service回调实例 private IAbilityConnection connection = new IAbilityConnection() { // 连接到Service的回调 @Override public void onAbilityConnectDone(ElementName elementName, IRemoteObject iRemoteObject, int resultCode) { // Client侧需要定义与Service侧相同的IRemoteObject实现类。开发者获取服务端传过来IRemoteObject对象，并从中解析出服务端传过来的信息。 } // Service异常死亡的回调 @Override public void onAbilityDisconnectDone(ElementName elementName, int resultCode) { } }; 连接Service的代码示例如下： // 连接Service Intent intent = new Intent(); Operation operation = new Intent.OperationBuilder() .withDeviceId(\"deviceId\") .withBundleName(\"com.domainname.hiworld.himusic\") .withAbilityName(\"com.domainname.hiworld.himusic.ServiceAbility\") .build(); intent.setOperation(operation); connectAbility(intent, connection); 同时，Service侧也需要在onConnect()时返回IRemoteObject，从而定义与Service进行通信的接口。onConnect()需要返回一个IRemoteObject对象，HarmonyOS提供了IRemoteObject的默认实现，用户可以通过继承LocalRemoteObject来创建自定义的实现类。Service侧把自身的实例返回给调用侧的代码示例如下： // 创建自定义IRemoteObject实现类 private class MyRemoteObject extends LocalRemoteObject { MyRemoteObject(){ } } // 把IRemoteObject返回给客户端 @Override protected IRemoteObject onConnect(Intent intent) { return new MyRemoteObject(); } Service Ability生命周期 与Page类似，Service也拥有生命周期，如图1所示。根据调用方法的不同，其生命周期有以下两种路径： 启动 Service 该Service在其他Ability调用startAbility()时创建，然后保持运行。其他Ability通过调用stopAbility()来停止Service，Service停止后，系统会将其销毁。 连接 Service 该Service在其他Ability调用connectAbility()时创建，客户端可通过调用disconnectAbility()断开连接。多个客户端可以绑定到相同Service，而且当所有绑定全部取消后，系统即会销毁该Service。 connectAbility()也可以连接通过startAbility()创建的Service。 图1 Service生命周期 前台Service 一般情况下，Service都是在后台运行的，后台Service的优先级都是比较低的，当资源不足时，系统有可能回收正在运行的后台Service。 在一些场景下（如播放音乐），用户希望应用能够一直保持运行，此时就需要使用前台Service。前台Service会始终保持正在运行的图标在系统状态栏显示。 使用前台Service并不复杂，开发者只需在Service创建的方法里，调用keepBackgroundRunning()将Service与通知绑定。调用keepBackgroundRunning()方法前需要在配置文件中声明ohos.permission.KEEP_BACKGROUND_RUNNING权限，同时还需要在配置文件中添加对应的backgroundModes参数。在onStop()方法中调用cancelBackgroundRunning()方法可停止前台Service。 使用前台Service的onStart()代码示例如下： // 创建通知，其中1005为notificationId NotificationRequest request = new NotificationRequest(1005); NotificationRequest.NotificationNormalContent content = new NotificationRequest.NotificationNormalContent(); content.setTitle(\"title\").setText(\"text\"); NotificationRequest.NotificationContent notificationContent = new NotificationRequest.NotificationContent(content); request.setContent(notificationContent); // 绑定通知，1005为创建通知时传入的notificationId keepBackgroundRunning(1005, request); 在配置文件中，“module > abilities”字段下对当前Service做如下配置： { \"name\": \".ServiceAbility\", \"type\": \"service\", \"visible\": true, \"backgroundModes\": [\"dataTransfer\", \"location\"] } 三 、Data Ability Data Ability基本概念 使用Data模板的Ability（以下简称“Data”）有助于应用管理其自身和其他应用存储数据的访问，并提供与其他应用共享数据的方法。Data既可用于同设备不同应用的数据共享，也支持跨设备不同应用的数据共享。 数据的存放形式多样，可以是数据库，也可以是磁盘上的文件。Data对外提供对数据的增、删、改、查，以及打开文件等接口，这些接口的具体实现由开发者提供。 URI介绍 Data的提供方和使用方都通过URI（Uniform Resource Identifier）来标识一个具体的数据，例如数据库中的某个表或磁盘上的某个文件。HarmonyOS的URI仍基于URI通用标准，格式如下： scheme：协议方案名，固定为“dataability”，代表Data Ability所使用的协议类型。 authority：设备ID。如果为跨设备场景，则为目标设备的ID；如果为本地设备场景，则不需要填写。 path：资源的路径信息，代表特定资源的位置信息。 query：查询参数。 fragment：可以用于指示要访问的子资源。 URI示例： 跨设备场景：dataability://device_id/com.domainname.dataability.persondata/person/10 本地设备：dataability:///com.domainname.dataability.persondata/person/10 说明：本地设备的“device_id”字段为空，因此在“dataability:”后面有三个“/”。 总结  说实话写这一篇文章花费了一番功夫，不断的浏览官网上的文档然后结合实际来写，写的不是很好，请勿见怪，另外就是觉得官网的教程只是一部分，更多的需要开发者自行去探索和发现，正所谓师傅领进门，修行在个人，鸿蒙需要成长，我们开发者同样也要成长，也许不会前进的路上会很坎坷，但经历过后就会发现另一番风景，对于鸿蒙，我是初学者，所以更多是以初学者的态度来记录。而且我学习的重要的途径就是这样，一边学习，一边记录，这样在以后要用到的时候查看自己的笔记就好。最后希望我们大家一起进步。为鸿蒙的发展与宣传贡献自己的一份力量。 参考文档 https://aijishu.com/a/1060000000139663#item-1-2 https://aijishu.com/a/1060000000139663#item-1-4 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/11我的第一个鸿蒙应用待办事项.html":{"url":"connent/鸿蒙/11我的第一个鸿蒙应用待办事项.html","title":"11我的第一个鸿蒙应用待办事项","keywords":"","body":"待办事项 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 在前几篇文章里也介绍了许多关于鸿蒙开发的技巧，今天我们就来做自己的第一个代办事项应用。鸿蒙开发和Flutter一样，都具有跨平台的特性，Flutter一套代码可以在Android，ios，web。linux，desk等部署，鸿蒙也有这样的特性，可同时在手机、大屏、手表生效，体验“一次开发、多设备部署”特性。 接下来我们开始正文 先来预览一下： 第一步必然是安装 DevEco Studio 。推荐安装3.0beta版，学习的话，用3.0还是蛮不错的。 第二部新建工程 自从微信小程序出现以来，各种“小程序”如雨后春笋一般出现。事实证明小程序这种开发方式非常好，鸿蒙 JS UI 框架采用类似的方式也是在意料之中的。 一个小程序（在鸿蒙 OS 中，也就是 Ability）由多个页面组成，每个页面由三部分组成： .hml 用来描述界面的元素 .css 用来描述界面的风格 .js 用来编写处理事件逻辑 我们来看个例子： 第一步，我们创建一个项目 js文件 import todoList from \"../../common/todoList.js\" import router from '@system.router'; export default { data: { // 待办事件列表 todoList, inputTodo: \"IDE无法调用输入\" }, computed:{ needTodoNum(){ let num = 0; this.todoList.forEach(item => { if(!item.status){ num++; } }); return num; } }, remove(index){ console.log(index) this.todoList.splice(index,1) }, addTodo() { this.todoList.push({ info:this.inputTodo, status: false }) }, checkStatus(index){ console.log(index); this.todoList[index].status = !this.todoList[index].status; }, getNewTodo(e){ this.inputTodo = e.value; }, // goback(){ // router.back(); // } } css文件 .container { flex-direction: column; justify-content: flex-start; align-items: center; padding-bottom: 100px; } .title { font-size: 25px; margin-top: 20px; margin-bottom: 20px; color: #000000; opacity: 0.9; font-size: 28px; } .item{ width: 325px; padding: 10px 0; flex-direction: row; align-items: center; justify-content: space-around; border-bottom: 1px solid #eee; } .todo{ color: #000; width: 180px; font-size: 18px; } .switch{ font-size: 12px; texton-color: green; textoff-color:red; text-padding: 5px; width: 100px; height: 24px; allow-scale: false; } .remove { font-size: 12px; margin-left: 10px; width: 50px; height: 22px; color: #fff; background-color: red; } .info{ width: 100%; margin-top: 10px; justify-content: center; } .info-text { font-size: 18px; color: #AD7A1B; } .info-num{ color: orangered; margin-left: 10px; margin-right: 10px; } .add-todo { position: fixed; left: 0; bottom: 0; width: 100%; height: 60px; flex-direction: row; justify-content: space-around; align-items: center; background-color: #ddd; } .plan-input { width: 240px; height: 40px; background-color: #fff; } .plan-btn { width: 90px; height: 35px; font-size: 15px; } htm文件 大前端之旅的待办事项 删除 您还有 件事情待办，加油！ 添加待办 首先是数据源是通过导入的方式赋值给todolist。 剩余待办事项通过comouted计算属性来计算，遍历数据源todolist中状态为 false的数量。并且将其赋值给needToNum,并在页面上进行显示。 switch的change改变事件中，将其status反向。 checkStatus(index){ console.log(index); this.todoList[index].status = !this.todoList[index].status; }, 删除待办事项时通过传递的索引从list中删除。 remove(index){ console.log(index) this.todoList.splice(index,1) }, 添加待办事项，通过设置input的change事件 getNewTodo(e){ this.inputTodo = e.value; }, 将输入的值赋值给变量inputTodo。 然后在新增按钮的点击事件中 addTodo() { this.todoList.push({ info:this.inputTodo, status: false }) }, 往数据源中新增一个对象。 数据源是从common下todoList中引入的 export default [ { info: '关注公众号', status: true }, { info: '大前端之旅', status: false }, { info: '学习编程知识', status: true }, { info: '接受编程推送', status: false }, { info: '日拱一卒', status: false } ] 里面涉及到的一个关于图片的问题，就是（如果使用云端路径）要添加ohos.permission.INTERNET权限 2. 工作原理 要理解它的工作原理，先研究一下编译之后的代码是非常重要的。上面的三个文件，编译之后会生成一个文件，其位置在：./entry/build/intermediates/res/debug/lite/assets/js/default/pages/index/index.js index.hml 变成了创建函数： index.css 变成了 JSON 文件。 这种处理方式很妙，把 JS 不擅长处理的 XML/CSS 转换成了 JS 代码和 JSON 对象，这个转换由工具完成，避免了运行时的开销。 在没有研究编译之后的代码时，我尝试在 ace/graphic 两个包中寻找解析 HML 的代码，让我惊讶的是没有找到相关代码。看了这些生成的代码之后才恍然大悟。 计数器应用： index.hml index.css .container { flex-direction: column; justify-content: center; align-items: center; left: 0px; top: 0px; width: 454px; height: 454px; } index.js export default { data: { count: 5 }, inc() { this.count++; }, dec() { this.count--; } } 参考文档 https://my.oschina.net/u/3979680/blog/4613811?_from=gitee_search © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/12我与鸿蒙社区的一年.html":{"url":"connent/鸿蒙/12我与鸿蒙社区的一年.html","title":"12我与鸿蒙社区的一年","keywords":"","body":"我与鸿蒙社区的一年 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 我了解鸿蒙社区其实也有一段时间了，我学习鸿蒙也是，但与鸿蒙结缘，时间就长了，接下来我就说一说我的故事， 我在鸿蒙社区写了第一篇帖子得到了张荣超老师的点赞，之前并不是很了解，后来才发现张荣超老师是 华为公司官方引进的首批HarmonyOS课程开发者 华为官方HDE（Huawei Developer Expert）认证 51CTO学院金牌讲师 Sun公司认证的Java工程师和Java Web工程师 Scrum联盟认证的敏捷项目管理专家等等 真的是真正的大佬 然后我们在学习的路上，同时认识了小波等大佬，接下来就说一说在不同的时间段接触到的学习路径的不同。 大学前了解的路径 找工作 传统路径 简历， 老师授课， 同学交流 大学中了解到的路径 考证 竞赛 实习 学长带路 同学互助 接触到鸿蒙社区之后的路径 两个仓库github和gitee 博客平台和论坛 掘金，知乎，51CTO.华为云，开源中国，InfoQ等 开发者社区 如何成为HarmonyOS开发者 不是从编程语言开始，从开发样例玩起来开始才是正确姿势 学习HarmonyOS开发，你的担心是什么？下图那个戳中了你的内心。 其实上面的这些不用担心的，只需要安装我下面的这个步骤，就可以上手， 接下来说一说我在社区发生的一些小故事 其实遇见鸿蒙真的是缘分，我之前都是在隔壁的博客群里待着呢，然后有一天看51CTO官网的时候，发现有个鸿蒙板块，我就点开，发现了这个社区，其实，刚开始社区发展我也有点不理解的就是既然有了博客了，还有鸿蒙社区干什么，后来发现，我真的错了，在鸿蒙社区更多的是鸿蒙的文章，可以了解鸿蒙的前言，所以我后来也就引导我自己的朋友，尽量在社区输出鸿蒙相关的，目前效果也还不错，在自己的努力下，也为社区带来了一大批优秀的创作者，比如徐庆哥，阿策，愚公，红日香薰等等，也认识了很多优秀的鸿蒙开发者。 当然也闹过不开心，产生过不愉快，甚至想把自己带带来的用户统统撤走，但是就和HarmonyOS发展到现在，已经不仅仅是华为的鸿蒙一样，我的朋友不仅仅是我的朋友，HarmonyOS最大的挑战在于生态建设，而生态建设仅仅靠华为一家及其合作伙伴是远远不够的，因此必然需要广大开发者的参与，消费者的信赖。所以我留下来，目前看来，社区日渐成熟，我是很欣慰。 好的，今天的文章很简单，也没啥可写，就是日常水文 结语 诗曰： 混沌未分天地乱，茫茫渺渺无人见。 自从盘古破鸿蒙，开辟从兹清浊辨。 https://playground.harmonyos.com/#/cn/onlineDemo/demo/jsUI/button © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/13实现HarmonyOS应用.html":{"url":"connent/鸿蒙/13实现HarmonyOS应用.html","title":"13四步实现HarmonyOS应用","keywords":"","body":"五步实现HarmonyOS应用（ets） 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 这里大概分为五步。 第一步：创建应用工程 创建开发工程 （这里以eTS工程）为例 打开DevEco Studio 2.创建一个新工程，选择模板，如Empty Ability： 3.进入配置工程界面，Project Type选择Application，Language选择eTS，其他参数根据实际需要设置即可。 修改代码文件 工程创建完成后，在Project窗口，点击“entry > src > main > ets > default > pages”，打开“index.ets”文件 第二步：实现用户界面 使用UI组件和装饰器 基础组件：Image、Text、 Video等 容器组件：Stack、Column、 List等 组件化装饰： @Component、@Entry、 @Builder 、@Extend等 实现组合目标面 配套实现页面组件开发及组件 自定义 状态管理装饰： @State 、 @Link 、@Observed、 @ObjectLink、 @StorageLink、 @Watch 实现数据驱动视图自动更新 使用UI渲染控制语法 条件渲染：if/elseif/else 进行UI描述时，根据不同状 态来动态控制组件的渲染 循环渲染： ForEach/LazyForEach 进行UI描述时，根据数据的 多少动态控制渲染的次数， 优化代码实现 引用UI资源 字符串引用： $ r (‘app.s t ring.name’ ) resources的element目录 下定义字符串，支持全球化 小语种 媒体资源引用： $ r (‘app.media.name’ ) resources的media目录下存 放资源，支持png、jpg、 svg等多种格式 添加UI交互事件 基础手势事件：onClick / onTouch等 定义基础用户交互，结合 TouchEvent信息可以实现自定 义手势 高级手势事件：长按手势 / 滑 动手势 / 组合手势等 通过gesture属性函数配置 内置高级手势支持， GestureGroup可支持多种 高级手势组合 第三步：完善功能逻辑 使用生命周期接口 页面生命周期接口：onPageShow、 onPageHide UI组件生命周期接口： aboutToAppear、aboutToDisappear 其它生命周期接口：onBackPressed、 onCreate、onDestroy等 结合页面、UI组件、系统状态的变化生命 周期接口添加功能逻辑 使用子系统能力接口 多个子系统提供大量系统能力接口 使用仅需两步： 一、导入依赖包。 二、直接调用系统能力接口。 调用系统能力实现具体功能逻辑 第四步：优化交互体验 实现动效 属性动画 animation ：自动监听组 件所有通用属性变化，自动增加动画 补间 显式动画animateTo ：指定特定 属性变化，为特定的属性动画自动增 加动画补间 修改组件属性，自动生成动画补 间，优化属性变化交互体验 转场动画 组件间转场： transition监听组件 的渲染状态变化，增加组件渲染、移除时的动画效果 页面间转场： pageTransition指定页面间跳转的切换动画效果 组件、页面切换时，自动生成动画 补间，优化切换交互体验 动画组件 ImageAnimator：支持逐帧图片播 放动画 使用多个图片组成动画，并动态控制 动画播放 Animator：组件形式提供动画控制器 动态控制播放状态，定制补间动画， 实现深度自定义动画效果。 第五步：模拟器调试 登录 选择p40Pro Failure[INSTALL_PARSE_FAILED_USESDK_ERROR] compileSdkVersion and releaseType of the app do not match the apiVersion and releaseType on the device. 源码地址：https://github.com/ITmxs/hm_ets_demo © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/14鸿蒙HarmonyOS应用开发之eTS文件说明.html":{"url":"connent/鸿蒙/14鸿蒙HarmonyOS应用开发之eTS文件说明.html","title":"14鸿蒙HarmonyOS应用开发之eTS文件说明","keywords":"","body":"鸿蒙HarmonyOS应用开发之为你解说eTS文件说明 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 eTS工程目录结构 FA应用的eTS工程目录结构如下图所示。 ets > default > pages > index.ets文件：.ets结尾的ETS（Extended TypeScript）文件，这个文件用于描述UI布局、样式、事件交互和页面逻辑。 ets > default > app.ets：用于全局应用/服务逻辑和应用/服务生命周期管理。 Java目录：作为HarmonyOS应用或原子化服务的启动入口。 resources目录：用于存放资源配置文件，比如：国际化字符串、资源限定相关资源和rawfile资源等。 app.ets文件用于全局应用逻辑和应用生命周期管理。 pages目录用于存放所有组件页面。 common目录用于存放公共代码文件，比如：自定义组件和公共方法。 C++工程目录结构 C++工程目录结构如下图所示。 entry>src>main>cpp：用于存放C++源码。 entry>src>main>Java：用于存放Java源码。 entry>src>main>resources：用于存放应用/服务所用到的资源文件，如图形、多媒体、字符串、布局文件等。关于资源文件的详细说明请参考 。 工程模板和开发语言介绍 DevEco Studio支持包括手机、平板、车机、智慧屏、智能穿戴、轻量级智能穿戴和智慧视觉设备的HarmonyOS应用/服务开发，预置了丰富的工程模板，可以根据工程向导轻松创建适应于各类设备的工程，并自动生成对应的代码和资源模板。同时，DevEco Studio还提供了多种编程语言供开发者进行HarmonyOS应用/服务开发，包括Java、JS、eTS和C/C++编程语言 此图是3.0版本才有，2.0和这个有点出入。 今天介绍是两种工程的目录结构。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/15鸿蒙HarmonyOS应用开发之资源文件.html":{"url":"connent/鸿蒙/15鸿蒙HarmonyOS应用开发之资源文件.html","title":"15鸿蒙HarmonyOS应用开发之资源文件","keywords":"","body":"15鸿蒙HarmonyOS应用开发之资源文件 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 resources目录 应用的资源文件（字符串、图片、音频等）统一存放于resources目录下，便于开发者使用和维护。resources目录包括两大类目录，一类为base目录与限定词目录，另一类为rawfile目录， resources |---base // 默认存在的目录 | |---element | | |---string.json | |---media | | |---icon.png |---en_GB-vertical-car-mdpi // 限定词目录示例，需要开发者自行创建 | |---element | | |---string.json | |---media | | |---icon.png |---rawfile // 默认存在的目录 资源组目录说明 base目录与限定词目录下面可以创建资源组目录（包括element、media、animation、layout、graphic、profile），用于存放特定类型的资源文件 资源文件的引用方法 base目录与限定词目录中的资源文件：通过指定资源类型（type）和资源名称（name）来引用。 Java文件引用资源文件的格式：ResourceTable.type_name。特别地，如果引用的是系统资源，则采用： ohos.global.systemres.ResourceTable.type_name 示例一：在Java文件中，引用string.json 文件中类型为“String”、名称为“app_name”的资源。 ohos.global.resource.ResourceManager resManager = this.getResourceManager(); String result = resManager.getElement(ResourceTable.String_app_name).getString(); 示例二：在Java文件中，引用color.json 文件中类型为“Color”、名称为“red”的资源。 ohos.global.resource.ResourceManager resManager = this.getResourceManager(); String result = resManager.getElement(ResourceTable.String_app_name).getString(); XML文件引用资源文件的格式：$type:name特别地，如果引用的是系统资源，则采用： $ohos:type:name在XML文件中，引用string.json文件中类型为“String”、名称为“app_name”的资源， rawfile目录中的资源文件：通过指定文件路径和文件名称来引用。 在Java文件中，引用一个路径为“resources/rawfile/”、名称为“example.js”的资源文件，示例如下： ohos.global.resource.ResourceManager resManager = this.getResourceManager(); ohos.global.resource.RawFileEntry rawFileEntry = resManager.getRawFileEntry(\"resources/rawfile/example.js\"); 系统资源文件 目前支持的部分系统资源文件 希望这些对你的鸿蒙开发之路有帮助。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/16使用低代码进行开发.html":{"url":"connent/鸿蒙/16使用低代码进行开发.html","title":"16使用低代码进行开发","keywords":"","body":"16使用低代码进行开发 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 不知不觉，我们已经尝试过了多种开发方式 而体验下来自己也有了一定的认识， ets对标的Flutter js对标的小程序 java对标的android 但是截至目前，我还没有用过低代码的方式玩过鸿蒙开发，今天就来体验一下。 在此之前了解一下 什么是低代码 所谓低代码开发，即无需编码或只需少量代码就可以快速生成应用程序。也就是说，企业的应用开发通过“拖拉拽”的方式即可完成。 HarmonyOS低代码开发方式，具有丰富的UI界面编辑功能，通过可视化界面开发方式快速构建布局，可有效降低用户的时间成本和提升用户构建UI界面的效率。 低代码开发功能包括：支持JS应用/服务或服务的UI界面开发和支持服务卡片的开发。 使用低代码开发应用或服务 使用低代码开发应用或服务有以下两种开发方式： 创建一个支持低代码开发的新工程，开发应用或服务的UI界面。 在已有工程中，创建JS Visual文件来开发应用或服务的UI界面。 创建新工程支持低代码开发 在工程模板中，提供了低代码开发的工程模块，您可以直接选择一个支持低代码开发的工程模板来开发应用或服务的UI界面，当前支持“Empty Ability”和“Sport and Health Ability”两个工程模板，支持的设备类型包括Phone、Tablet和Wearable。 说明 该功能在DevEco Studio 3.0 Beta2及更高版本中支持，且compileSdkVersion必须为7或以上。 接下来我们以创建一个Empty Alibity工程模板为示例进行说明。 1打开DevEco Studio，创建一个新工程，模板选择Empty Ability。 2.选择Super Visual，表示使用低代码开发功能开发应用/服务。点击Finish等待工程同步完成。 同步完成后，工程目录中自动生成低代码目录结构。 pages > index > index.js：低代码页面的逻辑描述文件，定义了页面里所用到的所有的逻辑关系，比如数据、事件等，详情请参考JS语法参考。如果创建了多个低代码页面，则pages目录下会生成多个页面文件夹及对应的js文件 pages > index > index.visual：visual文件存储低代码页面的数据模型，双击该文件即可打开低代码页面，进行可视化开发设计。如果创建了多个低代码页面，则pages目录下会生成多个页面文件夹及对应的visual文件。 3打开“page.visual”文件，即可进行页面的可视化布局设计与开发。 使用低代码开发界面过程中，如果界面需要使用到其它暂不支持可视化布局的控件时，可以在低代码界面开发完成后，点击按钮，将低代码界面转换为hml和css代码。注意，代码转换操作会删除visual文件及其父目录，且为不可逆过程，代码转换后不能通过hml/css文件反向生成visual文件 多设备开发的场景，可以点击界面画布右上角设备/模式切换按钮，进行设备切换或模式切换。 在已有工程中添加JS Visual支持低代码开发 在已有的HarmonyOS工程中，可以通过创建JS Visual文件的方式，使用低代码开发应用或服务的UI界面。支持的设备类型为Phone、Tablet、Wearable设备，且ompileSdkVersion必须为6或以上。 在打开的JS工程中，选中模块的pages文件夹，单击鼠标右键，选择New > JS Visual。 在弹出的对话框中，输入JS Visual Name，点击Finish。 创建JS Visual后，会在工程中自动生成低代码的目录结构，如下图所示。 低代码多语言支持 低代码页面支持多语言能力，让应用开发者无需开发多个不同语言的版本。开发者可以通过定义资源文件和引用资源两个步骤以使用多语言能力。 在指定的i18n文件夹内创建多语言资源文件及对应字符串信息。 低代码屏幕适配 对于屏幕适配问题，低代码页面支持两种配置方法。 指定designWidth为720px。designWidth为屏幕逻辑宽度，所有与大小相关的样式（例如Width、FontSize）均以designWidth和实际屏幕宽度的比例进行缩放。例如设置Width为100px时，在实际宽度为1440物理像素的屏幕上，Width实际渲染像素为200物理像素。 设置autoDesignWidth为true，此时designWidth字段将会被忽略，渲染组件和布局时按屏幕密度进行缩放。低代码页面仅支持分辨率1080*2340（P40），屏幕密度为3的场景，此场景下1px等于渲染出3个物理像素。例如设置Width为100px时，Width实际渲染像素为300物理像素。 低代码开发界面介绍 1：UI Control：UI控件栏，可以将相应的组件选中并拖动到画布（Canvas）中，实现控件的添加。 2：Component Tree：组件树，在低代码开发界面中，可以方便开发者直观地看到组件的层级结构、摘要信息以及错误提示。开发者可以通过选中组件树中的组件（画布中对应的组件被同步选中），实现画布内组件的快速定位；点击组件后的或图标，可以隐藏/显示相应的组件。 3：Panel：功能面板，包括常用的画布缩小放大、撤销、显示/隐藏组件虚拟边框、设备切换、模式切换、可视化布局界面一键转换为hml和css文件等。 4：Canvas：画布，开发者可在此区域对组件进行拖拽、拉伸等可视化操作，构建UI界面布局效果。 5：Attributes & Styles：属性样式栏，选中画布中的相应组件后，在右侧属性样式栏可以对该组件的属性样式进行配置。包括： Properties：对应图标，用于设置组件基本标识和外观显示特征的属性，如组件的ID、If等属性。 General：对应图标，用于设置Width、Height、Background、Position、Display等常规样式。 Feature：对应图标，用于设置组件的特有样式，如描述Text组件文字大小的FontSize样式等。 Flex：对应图标，用于设置Flex布局相关样式。 Events：对应图标，为组件绑定相关事件，并设置绑定事件的回调函数。 Dimension：对应图标，用于设置Padding、Border、Margin等与盒式模型相关的样式。 Grid：对应图标，用于设置Grid网格布局相关样式，该图标只有Div组件的Display样式被设置为grid时才会出现。 Atom：对应图标，用于设置原子布局相关样式。 低代码开发案例 第一个页面内有一个容器、文本和一个按钮，通过Div、Text和Button组件来实现。 打开 “page.visual” 文件，选中画布中的组件，单击鼠标右键，选择Delete删除画布原有模板组件。操作如下所示： 选中UI Control中的Div组件，将其拖至画布。点击右侧属性样式栏中的样式图标 （General），设置Div组件的高度Height为100%，使其占满屏幕；点击右侧属性样式栏中的样式图标 （Flex），设置Div组件的FlexDirection样式为column，使Div的主轴垂直；设置Div组件的JustifyContent样式为center，使得其子组件在主轴上居中显示；设置Div组件的AlignItems样式为center，使得其子组件在交叉轴上居中显示。操作如下所示： 选中UI Control中的Text组件，将其拖至Div组件的中央区域。点击右侧属性样式栏中的属性图标 （Properties），设置Text组件的Content属性为“title”；点击右侧属性样式栏中的样式图标 （Feature），设置组件的FontSize样式为60px，使得其文字放大；设置组件的TextAlign样式为center，使得组件文字居中显示。再选中画布上的Text组件，拖动放大。操作如下所示： 选中UI Control中的Button组件，将其拖至Text组件下面。点击右侧属性样式栏中的属性图标（Properties），设置Button组件的Value属性为“Next”，点击右侧属性样式栏中的样式图标（Feature），设置组件的FontSize样式为39px，使得其文字放大；再选中画布上的Button组件，拖动放大。操作如下所示： 创建另一个页面 在Project窗口，选择工程中的“entry > src > main > js > default > pages”，单击鼠标右键，选择“New > JS Visual”。创建完成后，点击提示框中的“Confirm”按钮，创建后的page2.visual文件目录结构如下 第二个页面中有一个容器和文本，通过Div、Text组件来实现。 实现页面跳转 在Project窗口，打开工程中的“entry > src > main > js > default > pages > index> index.js”,，导入router模块，页面路由router根据页面的uri来找到目标页面，从而实现跳转。示例代码如下： import router from '@system.router'; export default { data: { title: \"大前端之旅\", isHarmonyOS: true, next: \"下一页\", }, switchTitle() { let that = this; that.title = that.isHarmonyOS ? \"Hello World\" : \"Hello HarmonyOS\"; that.isHarmonyOS = !that.isHarmonyOS; }, launch() { router.push ({ uri:'pages/page2/page2', // 指定要跳转的页面 }) } } 打开“index.visual”，选中画布上的Button组件。点击右侧属性样式栏中的事件图标（Events)，鼠标点击Click事件的输入框，选择launch事件，操作如下所示： 3再次使用预览器或模拟器运行项目，效果如下图所示： 好的，今天的教程就演示到这儿。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/17使用ArkUI开发.html":{"url":"connent/鸿蒙/17使用ArkUI开发.html","title":"17使用ArkUI开发","keywords":"","body":"使用ArkUI开发HarmonyOS 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,鸿蒙，小程序,安卓，VUE，JavaScript。 方舟开发框架概述 方舟开发框架，是HarmonyOS的一套UI开发框架，提供开发者进行应用UI开发时所必须的能力。 基本概念 组件：组件是界面搭建与显示的最小单位。开发者通过多种组件的组合，构建出满足自身应用诉求的完整界面。 页面：page页面是方舟开发框架最小的调度分割单位。开发者可以将应用设计为多个功能页面，每个页面进行单独的文件管理，并通过路由API实现页面的调度管理，以实现应用内功能的解耦。 主要能力 多种组件：方舟开发框架不仅提供了多种基础组件，如文本显示、图片显示、按键交互等，也提供了支持视频播放能力的媒体组件。并且针对不同类型设备进行了组件设计，提供了组件在不同平台上的样式适配能力，此种组件称为“多态组件”。 布局计算：UI界面设计离不开布局的参与。方舟开发框架提供了多种布局方式，不仅保留了经典的弹性布局能力，也提供了列表、宫格、栅格布局和适应多分辨率场景开发的原子布局能力。 动画能力：方舟开发框架对于UI界面的美化，除了组件内置动画效果外，也提供了属性动画、转场动画和自定义动画能力。 UI交互：方舟开发框架提供了多种交互能力，满足应用在不同平台通过不同输入设备均可正常进行UI交互响应，默认适配了触摸手势、遥控器、鼠标等输入操作，同时也提供事件通知能力。 绘制：方舟开发框架提供了多种绘制能力，以满足开发者绘制自定义形状的需求，支持图形绘制、颜色填充、文本绘制、图片绘制等。 平台API通道方舟开发框架提供了API扩展机制，平台能力通过此种机制进行封装，提供风格统一的JS接口。 选择方案 方舟开发框架针对不同目的和技术背景的开发者提供了两种开发范式，分别是基于JS扩展的类Web开发范式（简称“类Web开发范式”）和基于TS扩展的声明式开发范式（简称“声明式开发范式”）。下面我们对这两种开发范式进行对比与描述。 类Web开发范式 类Web开发范式，采用经典的HML、CSS、JavaScript三段式开发方式。使用HML标签文件进行布局搭建，使用CSS文件进行样式描述，使用JavaScript文件进行逻辑处理。UI组件与数据之间通过单向数据绑定的方式建立关联，当数据发生变化时，UI界面自动触发更新。此种开发方式，更接近Web前端开发者的使用习惯，快速将已有的Web应用改造成方舟开发框架应用。主要适用于界面较为简单的中小型应用开发。 声明式开发范式 声明式开发范式，采用TS语言并进行声明式UI语法扩展，从组件、动效和状态管理三个维度提供了UI绘制能力。UI开发更接近自然语义的编程方式，让开发者直观地描述UI界面，不必关心框架如何实现UI绘制和渲染，实现极简高效开发。同时，选用有类型标注的TS语言，引入编译期的类型校验，更适用大型的应用开发。 两种开发范式对比 开发范式名称 语言生态 UI更新方式 适用场景 适用人群 类Web开发范式 JS语言 数据驱动更新 界面较为简单的类小程序应用和卡片 Web前端开发人员 声明式开发范式 扩展的TS语言（eTS） 数据驱动更新 复杂度较大、团队合作度较高的程序 移动系统应用开发人员、系统应用开发人员 框架结构 从上图可以看出，类Web开发范式与声明式开发范式的UI后端引擎和语言运行时是共用的，其中，UI后端引擎实现了方舟开发框架的六种基本能力。声明式开发范式无需JS Framework进行页面DOM管理，渲染更新链路更为精简，占用内存更少，因此更推荐开发者选用声明式开发范式来搭建应用UI界面。 基于JS扩展的类Web开发范式 基于JS扩展的类Web开发范式的方舟开发框架是一种跨设备的高性能UI开发框架，支持声明式编程和跨设备多态UI。 基础能力 类Web范式编程 采用类HTML和CSS Web编程语言作为页面布局和页面样式的开发语言，页面业务逻辑则支持ECMAScript规范的JavaScript语言。方舟开发框架提供的类Web编程范式，可以让开发者避免编写UI状态切换的代码，视图配置信息更加直观。 跨设备 开发框架架构上支持UI跨设备显示能力，运行时自动映射到不同设备类型，开发者无感知，降低开发者多设备适配成本。 高性能 开发框架包含了许多核心的控件，如列表、图片和各类容器组件等，针对声明式语法进行了渲染流程的优化。 整体架构 使用基于JS扩展的类Web开发范式的方舟开发框架，包括应用层（Application）、前端框架层（Framework）、引擎层（Engine）和平台适配层（Porting Layer）。 Application 应用层表示开发者开发的FA应用，这里的FA应用特指JS FA应用。 Framework 前端框架层主要完成前端页面解析，以及提供MVVM（Model-View-ViewModel）开发模式、页面路由机制和自定义组件等能力。 Engine 引擎层主要提供动画解析、DOM（Document Object Model）树构建、布局计算、渲染命令构建与绘制、事件管理等能力。 Porting Layer 适配层主要完成对平台层进行抽象，提供抽象接口，可以对接到系统平台。比如：事件对接、渲染管线对接和系统生命周期对接等。 基于JS扩展的类Web开发范式 基于TS扩展的声明式开发范式的方舟开发框架是为HarmonyOS平台开发极简、高性能、跨设备应用设计研发的UI开发框架，支持开发者高效的构建跨设备应用UI界面。 基础能力 使用基于TS扩展的声明式开发范式的方舟开发框架，采用更接近自然语义的编程方式，让开发者可以直观地描述UI界面，不必关心框架如何实现UI绘制和渲染，实现极简高效开发。从组件、动效和状态管理三个维度来提供UI能力，还提供了系统能力接口，实现系统能力的极简调用。 开箱即用的组件 框架提供丰富的系统预置组件，可以通过链式调用的方式设置系统组件的渲染效果。开发者可以组合系统组件为自定义组件，通过这种方式将页面组件化为一个个独立的UI单元，实现页面不同单元的独立创建、开发和复用，使页面具有更强的工程性。 丰富的动效接口 提供svg标准的绘制图形能力，同时开放了丰富的动效接口，开发者可以通过封装的物理模型或者调用动画能力接口来实现自定义动画轨迹。 状态与数据管理 状态数据管理作为基于TS扩展的声明式开发范式的特色，通过功能不同的装饰器给开发者提供了清晰的页面更新渲染流程和管道。状态管理包括UI组件状态和应用程序状态，两者协作可以使开发者完整地构建整个应用的数据更新和UI渲染。 系统能力接口 使用基于TS扩展的声明式开发范式的方舟开发框架，还封装了丰富的系统能力接口，开发者可以通过简单的接口调用，实现从UI设计到系统能力调用的极简开发。 整体架构 声明式UI前端 提供了UI开发范式的基础语言规范，并提供内置的UI组件、布局和动画，提供了多种状态管理机制，为应用开发者提供一系列接口支持。 语言运行时 选用方舟语言运行时，提供了针对UI范式语法的解析能力，提供了跨语言调用支持，提供了TS语言高性能运行环境。 声明式UI后端引擎 后端引擎提供了兼容不同开发范式的UI渲染管线，提供多种基础组件、布局计算、动效、交互事件，提供了状态管理和绘制能力。 渲染引擎 提供了高效的绘制能力，将渲染管线收集的渲染指令，绘制到屏幕能力。 平台适配层 提供了对系统平台的抽象接口，具备接入不同系统的能力，如系统渲染管线、生命周期调度等。 https://developer.harmonyos.com/cn/docs/documentation/doc-references/ts-components-versions-0000001231119333 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/18鸿蒙那些事儿.html":{"url":"connent/鸿蒙/18鸿蒙那些事儿.html","title":"18鸿蒙那些事儿","keywords":"","body":"鸿蒙系统的那些事儿 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 诗曰： 混沌未分天地乱，茫茫渺渺无人见。 自从盘古破鸿蒙，开辟从兹清浊辨。 鸿蒙操作系统安全吗？ 鸿蒙系统在整个数据安全方面的 构建参考了军队级别的安全管理方法，所以总体来说是安全的，具体体现在三个方面 首先确保了人的安全与准确 其次确保了硬件的正确与安全 最后就是数据的安全与准确。 所以整体是安全可靠的 鸿蒙系统的前景咋样？ 跟安卓和iOS系统相比，HarmonyOS系统毕竟还是比较“年轻”，但是不日的将来鸿蒙OS的出现将导致与iOS和Android成三足鼎立，目前跟前者的差距还是不小。数据显示，去年1月份，全球iOS系统用户数量已经达到16.5亿，是Harmony的11倍多；而到去年5月，安卓系统的设备数量更是超过30亿台，达到Harmony的20倍。不过，按照目前的速度，鸿蒙系统迎头赶上应该只是时间问题，期望鸿蒙操作系统能如同像它的名字一样，为中国科技的腾飞，开创一片天空，在科技世界的舞台上有它一席之地。 HarmonyOS最大的挑战 华为HarmonyOS发展到现在，已经不仅仅是华为的鸿蒙，HarmonyOS最大的挑战在于生态建设，而生态建设仅仅靠华为一家及其合作伙伴是远远不够的，因此必然需要广大开发者的参与，消费者的信赖。 OpenHarmony的发展 OpenHarmony是由开放原子开源基金会（OpenAtom Foundation）孵化及运营的开源项目，目标是面向全场景、全连接、全智能时代，基于开源的方式，搭建一个智能终端设备操作系统的框架和平台，促进万物互联产业的繁荣发展 从Open就可以看出，他是一个开源项目，是由华为雇了一帮人，然后由这些人commit代码，最后华为把 HarmonyOS 中基础功能提取出来，打包成功一个项目叫做“Openharmony” ，把 Openharmony 捐献给了原子开源基金会。 OpenHarmony是由开放原子开源基金会孵化及运营的，未来华为也将持续为OpenHarmony开源项目贡献代码 OpenHarmony相当于Android的AOSP（Android Open Source Project） 所以使用者只要遵循开源协议和法律就可以 当然开源要想发展离不开每个人的支持。2021 年 12 月，新增美的集团、深开鸿为 OpenHarmony 项目群捐赠人，共同为 OpenHarmony 的开源生态建设出一份力。到目前，其捐赠人团队的进一步扩，也将预示着，OpenHarmony 的明天会越来越好。 结语 最后有人说华为HarmonyOS是抄袭安卓，甚至直接说鸿蒙系统只是修改了linux系统，当然华为HarmonyOS的确是基于linux内核开发的开源操作系统，但是却并不是简单的修改，而是集合了无数软件开发者的努力成果。也就是说华为HarmonyOS发展到现在，已经不仅仅是华为的鸿蒙，而是所有为HarmonyOS做出贡献的人的鸿蒙系统。 HarmonyOS的出现，有望全面打破国外企业对操作系统的垄断地位，所以希望通过大家的努力，HarmonyOS的明天会更好。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/19harmonyos和OpenHarmony的区别和发展.html":{"url":"connent/鸿蒙/19harmonyos和OpenHarmony的区别和发展.html","title":"19harmonyos和OpenHarmony的区别和发展","keywords":"","body":"OpenHarmony和HarmonyOS有什么区别？ 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 OpenHarmony和HarmonyOS有什么区别？ OpenHarmony OpenHarmony是由开放原子开源基金会（OpenAtom Foundation）孵化及运营的开源项目，目标是面向全场景、全连接、全智能时代，基于开源的方式，搭建一个智能终端设备操作系统的框架和平台，促进万物互联产业的繁荣发展 从Open就可以看出，他是一个开源项目，是由华为雇了一帮人，然后由这些人commit代码，最后华为把 HarmonyOS 中基础功能提取出来，打包成功一个项目叫做“Openharmony” ，把 Openharmony 捐献给了原子开源基金会。 OpenHarmony是由开放原子开源基金会孵化及运营的，未来华为也将持续为OpenHarmony开源项目贡献代码 OpenHarmony相当于Android的AOSP（Android Open Source Project） 所以使用者只要遵循开源协议和法律就可以 HarmonyOS HarmonyOS作为新一代的智能终端操作系统，为不同设备的智能化、互联与协同提供了统一的语言，带来简洁、流畅、连续、安全可靠的全场景交互体验 HarmonyOS 2是华为基于开源项目OpenHarmony 2.0开发的面向多种全场景智能设备的商用版本 为保护华为现有手机和平板用户的数字资产，在遵循AOSP的开源许可的基础上HarmonyOS 2实现了现有Android生态应用在部分搭载该系统设备上的运行 开发角度上讲解它们的区别： 1.语言支持 HarmonyOS 主要支持 Java 和 JS ，TS来，以及仓颉开发应用（当然还有 C和 C++），而 OpenHarmony 不支持 Java 来开发应用。 2.SDK 的不同 应用开发工具都是统一使用华为的 DevEco Studio，但是使用的 sdk 不同，开发前首先要切换 sdk 配置。 虽然 HarmonyOS 和 OpenHarmony 都可以用 js 来开发应用，但是它们的 api 还是有些细微的区别。 OpenHarmony 的 api 参考请参看 OpenHarmony 的官方文档，千万别看错了。 然后 OpenHarmony 的 sdk 请下载官方的支持 OpenHarmony 开发的 sdk，而不是 DevEco studio 自带的 HarmonyOS sdk。 关于 OpenHarmony sdk 配置请参考官方文档，我这里仅仅附上官方链接： https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/quick-start/ 3.运行调测方式不同 HarmonyOS 支持 previewer 预览、模拟器运行、真机运行三种方式；OpenHarmony 支持 previewer 预览、真机（目前主要使用 3516 系列开发板）运行。 首先，目前 OpenHarmony 是没有模拟器的，真正运行调测只能借助开发板（主要采用 HI3516 系列开发板），注意目前是不支持手机平板等真机调测的。 4.签名方式不同 OpenHarmony 的签名方式我这里就不赘述，直接附上官方文档链接： https://gitee.com/openharmony/docs/tree/master/zh-cn/application-dev/quick-start HarmonyOS 的签名我最想吐槽的就是需要添加设备 ID。 使用真机进行调试-调试HarmonyOS应用/服务-应用/服务调试-HUAWEI DevEco Studio使用指南-工具-HarmonyOS应用开发 OpenHarmony 的签名我只想吐槽一句，既然 open 为何还必须要签名。 5、创建项目方式不同 6、工程目录结构不同 OpenHarmony 只有js目录，没有java目录 参考文档： https://developer.huawei.com/consumer/cn/doc/distribution/service/overview-0000001193306834 https://gitee.com/openharmony © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/20ArkUI_eTS手把手入门之手势组件.html":{"url":"connent/鸿蒙/20ArkUI_eTS手把手入门之手势组件.html","title":"20ArkUI_eTS手把手入门之手势组件","keywords":"","body":"HarmonyOS支持机型 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/21鸿蒙支持的机型.html":{"url":"connent/鸿蒙/21鸿蒙支持的机型.html","title":"21鸿蒙支持的机型","keywords":"","body":"HarmonyOS支持机型 春节不停更，此文正在参加「星光计划-春节更帖活动 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 华为目前已公布可支持升级尝鲜的具体机型，了解你的机型是否支持尝鲜 第一批支持机型 Mate系列 HUAWEI Mate 40 Pro HUAWEI Mate 40 Pro+ HUAWEI Mate 40 RS 保时捷设计 HUAWEI Mate 40 HUAWEI Mate 40E HUAWEI Mate 30 HUAWEI Mate 30 Pro HUAWEI Mate 30 Pro 5G HUAWEI Mate 30E Pro 5G HUAWEI Mate 30 RS 保时捷设计 HUAWEI Mate 30 5G HUAWEI Mate X2 HUAWEI Mate 20 HUAWEI Mate 20 Pro HUAWEI Mate 20 RS 保时捷设计 HUAWEI Mate Xs HUAWEI Mate 20 X HUAWEI Mate 20 X 5G HUAWEI Mate X P系列 HUAWEI P40 HUAWEI P40 4G HUAWEI P40 Pro HUAWEI P40 Pro + HUAWEI P30 HUAWEI P30 Pro nova系列 HUAWEI nova 8 HUAWEI nova 8 Pro HUAWEI nova 8 SE HUAWEI nova 7 5G HUAWEI nova 7 Pro 5G HUAWEI nova 7 SE 5G HUAWEI nova 7 SE 5G 乐活版 HUAWEI nova 7 SE 5G 活力版 HUAWEI nova 6 HUAWEI nova 6 5G HUAWEI nova 6 SE HUAWEI nova 5 Pro 畅享/麦芒系列 华为畅享20 Pro 5G 华为畅享Z 5G 华为畅享20 Plus 5G 华为麦芒9 5G 平板 HUAWEI MatePad Pro HUAWEI MatePad Pro 5G HUAWEI MatePad 10.8英寸 HUAWEI MatePad 10.4英寸 HUAWEI MatePad 5G 10.4英寸 华为平板M6 10.8英寸 华为平板M6 8.4英寸 华为平板M6 高能版 https://consumer.huawei.com/cn/support/harmonyos/models/ © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/22鸿蒙相关书籍.html":{"url":"connent/鸿蒙/22鸿蒙相关书籍.html","title":"22鸿蒙相关书籍","keywords":"","body":"今天又是一篇日常水文 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 关于鸿蒙开发方面的书籍，我今天简单的做了整理，其中部分书籍也有看过，确实写的不错，可以说是对科普鸿蒙相关知识点起到了一定促进作用，那么目前都有哪些书籍呢？ 简单的了解一下 序号 书籍名称 主题/方向 作者 出版社 购买链接 1 《鸿蒙生态⸺开启万物互联的智慧新时代》 鸿蒙生态科普图书 李洋 电子工业出版社 http://product.dangdang.com/29305280.html 2 《深入浅出OpenHarmony⸺架构、内核、驱动及应用开发全栈》 OpenHarmony架构、内核、驱动 李传钊 水利水电出版社 http://product.dangdang.com/29291095.html 3 《鸿蒙应用程序开发》 应用程序开发基础知识、应用开发入门 董昱 清华大学出版社 http://product.dangdang.com/29277904.html 4 《鸿蒙操作系统开发入门经典》 软硬件基础开发 徐礼文 清华大学出版社 http://product.dangdang.com/29266322.html 5 《鸿蒙操作系统应用开发实践》 应用开发 陈美汝、郑森文、武延军、吴敬征 清华大学出版社 http://product.dangdang.com/29269334.html 6 《鸿蒙应用开发实战》 开发语言 张荣超 人民邮电出版社 http://product.dangdang.com/29180052.html 7 《HarmonyOS IoT设备开发实战》 南向设备开发 江苏润和软件股份有限公司 电子工业出版社 https://item.jd.com/13288938.html 8 《HarmonyOS应用开发 快速入门与项目实战》 应用开发入门 夏德旺、谢立 机械工业出版社 http://product.dangdang.com/599381728.html 9 《鸿蒙第三方组件库应用开发实战》 应用开发入门 武延军、中国科学院软件研究所 人民邮电出版社 http://product.dangdang.com/29332498.html 10 《鸿蒙征途：App开发实战》 应用开发 李宁 人民邮电出版社 http://product.dangdang.com/29281060.html 11 《 鸿蒙HarmonyOS手机应用开发实战》 手机应用开发 柳伟卫 清华大学出版社 http://product.dangdang.com/29349445.html 12 《鸿蒙应用开发入门》 应用开发 程晨 人民邮电出版 http://product.dangdang.com/29375135.html 13 《Hello HarmonyOS》 应用开发 孙洋 电子工业出版社 https://item.jd.com/13615658.html 1.《鸿蒙生态⸺开启万物互联的智慧新时代》 购买链接： http://product.dangdang.com/29305280.html 内容主题/方向： 鸿蒙生态科普图书 受众人群： 各类生态人群，包括：商业决策者、开发者、方案及投资公司、终端用户等 简介&亮点： 本书尝试从科普、专业与工具三个方面介绍鸿蒙。科普是指通过相对通俗易懂的方式，让读者了解鸿蒙，懂得在新科技发展机遇 面前如何参与并应用鸿蒙，以带来更好的体验。专业是指在内容安排上从初识鸿蒙、鸿蒙万物智联、鸿蒙智能设备创新、鸿蒙应 用服务创新、OpenHarmony与鸿蒙发行版，以及鸿蒙场景、生态与社会影响方面全面、客观地分析鸿蒙生态的构成和其发展趋 势。工具是指本书抛砖引玉的性质，如果读者想深入参与鸿蒙开发，书中也有进一步钻研的提示，希望本书能成为大家深度参与 鸿蒙开发的指引。 作者： 李洋 版权方： 电子工业出版社 购买链接： 2.《深入浅出OpenHarmony⸺架构、内核、驱动及应用开发全栈》 购买链接： http://product.dangdang.com/29291095.html 内容主题/方向： OpenHarmony架构、内核、驱动 应用开发 受众人群： 1.OpenHarmony操作系统开发人员、技术爱好者 2.APP开发者及应用开发工程师 3.开设相关课程的院校师生 简介&亮点： 本书是由华为资深高级软件工程师、首位HarmonyOS HDE（Huawei Developer Expert）李传钊老师亲自编写的OpenHarmony操 作系统技术图书。 本书从OpenHarmony操作系统的设计目标与设计思路开始，由表及里、深入浅出地讲解了OpenHarmony操作系统的架构、内 核、驱动及应用开发基础与实战的全栈技术内容。在实战部分，从开发环境的安装配置开始，分别讲解了南向开发、北向开发的基 本过程及实战案例。本书的英文版已在翻译之中，华为已将其作为面向全球推荐的OpenHarmony操作系统的官方技术教程之一。 特点： 1.OpenHarmony官方&HarmonyOS官方&华为开发者社区联合推荐 2.首位HarmonyOS HDE（Huawei Developer Expert）、首批经华为认证的3.OpenHarmony/HarmonyOS课程开发者、骨灰级程 序员、高级软件工程师李传钊老师亲自编写 4.从架构到内核，从驱动到应用，深入浅出 5.从基础到实战，从示例到综合，无缝衔接 作者： 李传钊 版权方： 水利水电出版社 3.《鸿蒙应用程序开发》 购买链接： http://product.dangdang.com/29277904.html 内容主题/方向： 应用程序开发基础知识、应用开发入门 受众人群： 1.对鸿蒙操作系统感兴趣的学生 2.应用开发工程师及相关从业者 简介&亮点： 本书以基础知识和实例相结合的方式成体系地介绍鸿蒙应用程序开发的常用技术。全书共10章。 第1~3章介绍鸿蒙应用程序开发 的基础知识，从创建应用程序工程开始手把手介绍用户界面开发的基本流程。 第4和5章按照Java和JavaScript这两种编程语言分 别介绍了用户界面开发的基本知识。 第6~10章介绍鸿蒙应用程序开发的众多基础特性，包括通知、公共事件、Service Ability、数 据持久化、Data Ability、网络访问、媒体访问、相机拍照、订阅传感器、获取地理位置等众多功能。 作者： 董昱 版权方： 清华大学出版社 4.《鸿蒙操作系统开发入门经典》 购买链接： http://product.dangdang.com/29266322.html 内容主题/方向： 软硬件基础开发 受众人群： 1.系统应用开发爱好者 2.Java、JavaScript开发者 3.嵌入式开发爱好者 简介&亮点： 本书涵盖鸿蒙北向应用开发全部内容和南向硬件开发基础内容。 本书共5篇14章， 开发准备篇（第1和2章）分别是鸿蒙操作系统简介和鸿蒙应用开发准备。第1章总体介绍鸿蒙操作系统的重要特 性及技术架构，第2章介绍鸿蒙应用开发环境搭建，鸿蒙应用开发IDE、真机调试证书申请、真机模拟器使用。 基础知识篇（第3~5 章）系统的讲解鸿蒙两大应用开发框架的使用：Java UI和JavaScript UI框架，以及鸿蒙面向Ability开发技术。 分布式开发篇（第 6~8章）分别介绍鸿蒙分布式任务调度，分布式数据服务，分布式文件服务。 应用实战篇（第9~12章）通过不同语言框架开发不同 平台应用，后介绍如何申请鸿蒙发布证书，以及发布鸿蒙应用到华为官方应用市场的流程。 硬件开发篇（第13和14章）介绍开源鸿 蒙源码编译环境搭建和海思开发版的鸿蒙系统烧写及嵌入式开发入门。 作者： 徐礼文 版权方： 清华大学出版社 5.《鸿蒙操作系统应用开发实践》 购买链接： http://product.dangdang.com/29269334.html 内容主题/方向： 应用开发 受众人群： 1.入门级应用开发者 2.培训机构参考用书 简介&亮点： 本书系统全面地讲解鸿蒙操作系统下的应用开发所需基础知识，并通过丰富的案例实践提高应用能力。 整本书共11章， 第1章对 鸿蒙操作系统进行概述，并搭建应用开发环境。 第2~5 章分别讲解了Java、JavaScript语言基础及Java、JavaScript下的UI布局实 现。第6章讲解了鸿蒙轻量级智能穿戴设备的开发。 第7章讲解了应用所具备能力Ability。 第8章讲解了本地应用数据管理及分布式 服务。第9章讲解了包括图像、相机及音视频的多媒体功能。 第10和11章为应用实战，包含两个完整实践案例。本书通俗易懂， 循序渐进，且包含丰富的代码讲解和应用实例，操作性较强，并配套PPT和视频讲解，是鸿蒙应用开发入门者的不二之选。 作者： 陈美汝、郑森文、武延军、吴敬征 版权方： 清华大学出版社 6.《鸿蒙应用开发实战》 购买链接： http://product.dangdang.com/29180052.html 内容主题/方向： 开发语言；应用开发 受众人群： 1.具备基本编程知识的技术爱好者 2.应用开发工程师 3.开设应用开发相关课程的院校师生 简介&亮点： 《鸿蒙应用开发实战》详细完整地介绍了在HarmonyOS（鸿蒙操作系统）2.0上开发一个呼吸训练App的全部工程。 《鸿蒙应用开发实战》分为3章，内容涵盖了鸿蒙操作系统的简单介绍、开发鸿蒙App项目的准备工作，以及为鸿蒙操作系统开发 一个呼吸训练App的全过程。本书采用项目导向和任务导向的方式讲解，分成36个任务，每个任务都分成3部分⸺运行效果、实 现思路、代码详解。本书手把手地对编写的每一行代码进行讲解，确保读者看完本书后，能做出一个完整的项目。 作者： 张荣超 版权方： 人民邮电出版社 7.《HarmonyOS IoT设备开发实战》 购买链接： https://item.jd.com/13288938.html 内容主题/方向： 南向设备开发 受众人群： 1.物联网设备开发、测试工程师 2.开设相关课程的院校师生 3.对OpenHarmony生态未来发展趋势感兴趣的推动者、从业者和潜在的生态建设参与者 简介&亮点： 本书主要介绍如何使用OpenHarmony开发物联网设备端软件，具体包括外设控制、网络编程、物联网平台接入等。本书的实例 程序均在HiSpark Wi-Fi IoT开发套件上进行测试和演示，部分章节内容也适用于其他支持OpenHarmony的物联网设备。 本书共8章，分为4篇，即环境准备篇、外设控制篇、传输协议篇、物联网应用篇。环境准备篇包含第1章，主要内容为如何搭建 OpenHarmony开发环境。外设控制篇包含第2章～第4章，主要内容为如何使用OpenHarmony控制外设。传输协议篇包含第5章 和第6章，主要内容为如何使用OpenHarmony控制Wi-Fi，以及如何使用OpenHarmony进行网络编程。物联网应用篇包含第7章 和第8章。通过学习第7章，读者能够对内核对象有比较深刻的理解。第8章的主要内容包括如何集成MQTT客户端SDK，以及如何 开发一个物联网应用。 特点： 1.系统介绍OpenHarmony南向设备开发的图书，为打造优质物联网应用奠定基础 2.案例基于上海海思技术有限公司领先的智慧物联loT芯片 Hi3861V100实现 3.作者具有深厚的开发功底和多年一线开发经验 4.内容深入浅出，系统全面，代码实例翔实 作者： 江苏润和软件股份有限公司 版权方： 电子工业出版社 8.《HarmonyOS应用开发 快速入门与项目实战》 购买链接： http://product.dangdang.com/599381728.html 内容主题/方向： 应用开发入门 受众人群： 1.APP开发者及应用开发工程师 2.开设应用开发相关课程的院校师生 简介&亮点： 本书共9个章节， 第1章为HarmonyOS简介，主要介绍HarmonyOS的发展历程、设计理念、整体架构、特性以及典型应用场景； 第2章为HarmonyOS应用开发入门，是后面章节的基础和铺垫，主要介绍HarmonyOS开发环境准备和开发基础知识； 第3章到第 8章通过6个不同类型的项目案例，贯穿讲解鸿蒙应用开发的相关核心知识点，每个项目案例都先展示zui终UI效果图和核心知识 点，让读者带着任务学习，激发读者兴趣，每个项目案例都有详细的开发步骤及核心代码讲解，实战性强，确保读者在认真学习 完本书后，能够独立做HarmonyOS应用开发项目； 第9章为HarmonyOS常用第三方组件介绍，主要介绍BGABadgeView、 BottomNavigationBar、Glide、VideoCache和Updownfile组件的功能、使用以及开发步骤。 作者： 夏德旺、谢立 版权方： 机械工业出版社 9.《鸿蒙第三方组件库应用开发实战》 购买链接：http://product.dangdang.com/29332498.html 内容主题/方向： 三方组件库应用开发 受众人群： 1.具备基本编程知识的技术爱好者 2.应用开发工程师 3.开设应用开发相关课程的院校师生 简介&亮点： 《鸿蒙第三方组件库应用开发实战》通过多个精选的开源组件库，详尽地讲解了如何在鸿蒙操作系统下使用这些组件库实现快捷的 应用开发。同时，本书详细剖析了鸿蒙操作系统组件库的实现原理，并通过一个综合应用实战帮助读者学习更加深入的应用开发知 识和技巧。 《鸿蒙第三方组件库应用开发实战》共 7 章，主要内容包括鸿蒙操作系统的简单介绍，第三方组件库的背景和鸿蒙第三方组件的相 关特性，基于第三方组件的鸿蒙应用开发流程，UI组件、视频相关组件、实用工具组件的使用方法和实现原理，以及如何使用多个 第三方组件来快速构建视频播放平台。 《鸿蒙第三方组件库应用开发实战》通俗易懂，循序渐进，包含详细的代码讲解和丰富的应用实战，可读性和操作性较强，是鸿蒙 应用开发入门的不二之选。 作者： 武延军、中国科学院软件研究所 版权方： 人民邮电出版社 10.《鸿蒙征途：App开发实战》 购买链接： http://product.dangdang.com/29281060.html 内容主题/方向： 应用开发 受众人群： 1.HarmonyOS系统初学者 2.HarmonyOS开发人员 3.开设APP开发相关课程的院校师生 简介&亮点： 《鸿蒙征途：App开发实战》是一本基于Java的鸿蒙操作系统（HarmonyOS）App开发指南。全书系统、由浅入深地介绍了 HarmonyOS App开发的知识、相关经验和技巧。本书以理论与实战相结合的方式向读者呈现HarmonyOS App开发的整个过程。全书分为两个部分，第一部分详细讲解HarmonyOS App开发所需的知识，并提供大量的真实案例代码供读者练习；第二部分给出两个实 战项目，分别为应用类App项目（在线电子词典）和游戏类App项目（俄罗斯方块），通过这两个项目，读者可以很好地回顾和总 结前面10章讲解的知识点，并付诸实践。 本书内容通俗易懂，循序渐进，既是HarmonyOS初学者的入门图书，也是HarmonyOS开发人员的进阶读物。 作者： 李宁 版权方： 人民邮电出版社 11.《鸿蒙HarmonyOS手机应用开发实战》 购买链接： http://product.dangdang.com/29349445.html 内容主题/方向： 手机应用开发 受众人群： 1.HarmonyOS系统初学者 2.HarmonyOS开发人员 3.开设APP开发相关课程的院校师生 简介&亮点： 华为自主研发的HarmonyOS（鸿蒙系统）是一款面向未来、面向全场景（移动办公、运动健康、社交通信、媒体娱乐等）的分布式操作系统。借助HarmonyOS全场景分布式系统和设备生态定义全新的硬件、交互和服务体验。本书采用新的HarmonyOS 2版本作为基石，详细介绍如何基于HarmonyOS进行手机应用的开发，内容涵盖HarmonyOS架构、DevEco Studio、应用结构、Ability、任务调度、公共事件、通知、剪切板、Java UI、JS UI、多模输入、线程管理、视频、图像、相机、音频、媒体会话管理、媒体数据管理、安全管理、二维码、通用文字识别、蓝牙、WLAN、网络管理、电话服务、设备管理、数据管理、原子化服务、流转等多个主题。本书列举了大量解决实际问题的案例，具有很强的前瞻性、应用性、趣味性。 本书主要面向的是对移动应用或HarmonyOS应用感兴趣的学生、开发人员、架构师。 好的，今天主要是个整理贴。也没啥技术含量，大家如果有好的建议，或者新书上市，欢迎大家补充 作者： 柳伟卫 版权方： 清华出版社 12.《鸿蒙应用开发入门》 购买链接： http://product.dangdang.com/29349445.html 内容主题/方向： 手机应用开发 受众人群： 1.HarmonyOS系统初学者 2.HarmonyOS开发人员 3.开设APP开发相关课程的院校师生 简介&亮点： 鸿蒙系统是一款“面向未来”、面向全场景的分布式操作系统。在传统的单设备系统能力的基础上，鸿蒙系统提出了基于同一套系统能力、适配多种终端形态的分布式理念，能够支持多种终端设备。 本书共 6 章，从鸿蒙系统、技术特征等相关基础知识开始介绍，通过新建项目，一步步地讲解使用 JavaScript 设计页面的方法、页面跳转功能的实现，内容由易到难。本书还巧用围棋应用开发的全过程，帮助读者记忆与理解使用 JavaScript 开发应用的方法与相关知识。 作者： 程晨 版权方： 人民邮电出版社 13.《Hello HarmonyOS》 购买链接： http://product.dangdang.com/29349445.html 内容主题/方向： 手机应用开发 受众人群： 1.APP开发者及应用开发工程师 2.HarmonyOS开发人员 3.开设APP开发相关课程的院校师生 简介&亮点： 本书是系统地介绍鸿蒙应用开发知识的图书，较全面地介绍了鸿蒙应用开发所涉及的知识点，使用概念介绍、代码编写、代码讲解的模式，将所讲的内容通过小案例用由浅入深、分步拆解的方式进行介绍，希望为你带来更好的学习体验。 本书共分为9章。第1章介绍了HarmonyOS的特性、基础知识及鸿蒙应用如何在单机和多设备上运行与调试。第2章和第8章介绍了鸿蒙应用的布局与组件。第3章~第7章介绍了鸿蒙应用开发的各项知识，包括Ability、分布式通信、数据管理、公共事件和通知、服务卡片。第9章介绍了鸿蒙应用开发过程中的线程管理。 作者： 孙洋 版权方： 电子工业出版社 好的，今天主要是个整理贴。也没啥技术含量，大家如果有好的建议，或者新书上市，欢迎大家补充 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/23方舟开发框架.html":{"url":"connent/鸿蒙/23方舟开发框架.html","title":"23方舟开发框架","keywords":"","body":"当开发者基于手机（Phone）、平板（Tablet）、智慧屏（TV）或智能穿戴（Wearable）的模板进行开发时： 如使用JS模板，请参考基于JS扩展的类Web开发范式进行组件的开发。 如使用eTS模板，请参考基于TS扩展的声明式开发范式进行组件的开发。 接口的开发请参考手机、平板、智慧屏和智能穿戴开发-接口。 当开发者基于轻量级智能穿戴（Lite Wearable）的模板进行开发时，请参考轻量级智能穿戴开发了解JS接口和组件的支持性。 当开发者需要进行服务卡片开发时，请参考服务卡片开发了解JS组件的支持性，当前服务卡片开发仅支持手机（Phone）、平板（Tablet）。 DevEco Studio支持的JS FA模板详请参考支持的设备模板和编程语言。 HarmonyOS提供了丰富的组件，开发者通过查阅文档，可以全面地了解组件，更好地开发应用。 不同API版本的SDK支持的功能有一定差异。为了方便开发者确认SDK支持的功能，文档中的组件均标记了支持版本，具体说明请见版本号标识。 除此之外，HarmonyOS提供了Beta组件供开发者尝鲜体验。在体验过程中可能会出现功能不稳定的情况，开发者可以直接在网页反馈，我们将在后续版本中进行优化。Beta标识请见Beta标识。 接下来从组件，动画，全局UI方法来对声明式开发范式做一个了解。 组件 框架介绍 方舟开发框架，是一套UI开发框架，提供开发者进行应用UI开发时所必须的能力。 基本概念 组件：组件是界面搭建与显示的最小单位。开发者通过多种组件的组合，构建出满足自身应用诉求的完整界面。 页面：page页面是方舟开发框架最小的调度分割单位。开发者可以将应用设计为多个功能页面，每个页面进行单独的文件管理，并通过路由API实现页面的调度管理，以实现应用内功能的解耦。 主要能力 多种组件：方舟开发框架不仅提供了多种基础组件，如文本显示、图片显示、按键交互等，也提供了支持视频播放能力的媒体组件。并且针对不同类型设备进行了组件设计，提供了组件在不同平台上的样式适配能力，此种组件称为“多态组件”。 布局计算：UI界面设计离不开布局的参与。方舟开发框架提供了多种布局方式，不仅保留了经典的弹性布局能力，也提供了列表、宫格、栅格布局和适应多分辨率场景开发的原子布局能力。 动画能力：方舟开发框架对于UI界面的美化，除了组件内置动画效果外，也提供了属性动画、转场动画和自定义动画能力。 UI交互：方舟开发框架提供了多种交互能力，满足应用在不同平台通过不同输入设备均可正常进行UI交互响应，默认适配了触摸手势、遥控器、鼠标等输入操作，同时也提供事件通知能力。 绘制：方舟开发框架提供了多种绘制能力，以满足开发者绘制自定义形状的需求，支持图形绘制、颜色填充、文本绘制、图片绘制等。 平台API**通道：**方舟开发框架提供了API扩展机制，平台能力通过此种机制进行封装，提供风格统一的JS接口。 选择方案 方舟开发框架针对不同目的和技术背景的开发者提供了两种开发范式，分别是基于JS扩展的类Web开发范式（简称“类Web开发范式”）和基于TS扩展的声明式开发范式（简称“声明式开发范式”）。下面我们对这两种开发范式进行对比与描述。 类Web开发范式 类Web开发范式，采用经典的HML、CSS、JavaScript三段式开发方式。使用HML标签文件进行布局搭建，使用CSS文件进行样式描述，使用JavaScript文件进行逻辑处理。UI组件与数据之间通过单向数据绑定的方式建立关联，当数据发生变化时，UI界面自动触发更新。此种开发方式，更接近Web前端开发者的使用习惯，快速将已有的Web应用改造成方舟开发框架应用。主要适用于界面较为简单的中小型应用开发。 声明式开发范式 声明式开发范式，采用TS语言并进行声明式UI语法扩展，从组件、动效和状态管理三个维度提供了UI绘制能力。UI开发更接近自然语义的编程方式，让开发者直观地描述UI界面，不必关心框架如何实现UI绘制和渲染，实现极简高效开发。同时，选用有类型标注的TS语言，引入编译期的类型校验，更适用大型的应用开发。 两种开发范式对比 开发范式名称 语言生态 UI更新方式 适用场景 适用人群 类Web开发范式 JS语言 数据驱动更新 界面较为简单的类小程序应用和卡片 Web前端开发人员 声明式开发范式 扩展的TS语言（eTS） 数据驱动更新 复杂度较大、团队合作度较高的程序 移动系统应用开发人员、系统应用开发人员 框架结构 从上图可以看出，类Web开发范式与声明式开发范式的UI后端引擎和语言运行时是共用的，其中，UI后端引擎实现了方舟开发框架的六种基本能力。声明式开发范式无需JS Framework进行页面DOM管理，渲染更新链路更为精简，占用内存更少，因此更推荐开发者选用声明式开发范式来搭建应用UI界面。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/24基于TS扩展的声明式开发范式.html":{"url":"connent/鸿蒙/24基于TS扩展的声明式开发范式.html","title":"24基于TS扩展的声明式开发范式","keywords":"","body":" 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 大家可能会有疑问，为什么我不去介绍类Web开发范式，而来介绍基于TS扩展的声明式开发范式。其实介绍这种开发方式主要是现在或许以后会成为一个趋势,我在这里提到了一个声明式UI，那么什么是声明式U?与命令式UI又有什么区别？ 什么是命令式UI UI的更新是由程序员使用代码主动刷新，UI与数据并无必然的映射关系，这种我们称之为命令式UI 什么是声明式UI UI的更新并非由程序员使用代码来主动刷新，而是由后面隐藏机制来负责维护UI的刷新，UI与数据有映射关系，这种我们就称之为声明式UI 上面这种定义只是个人愚见，根据上述定义，区分是命令式UI还是声明式UI的两个核心点是： 程序员是否要显式的去调用代码刷新UI UI与数据是否存在映射关系 基于TS扩展的声明式开发范式的方舟开发框架是一套开发极简、高性能、跨设备应用设计研发的UI开发框架，支持开发者高效的构建跨设备应用UI界面。 那么目前声明式 基础能力 使用基于TS扩展的声明式开发范式的方舟开发框架，采用更接近自然语义的编程方式，让开发者可以直观地描述UI界面，不必关心框架如何实现UI绘制和渲染，实现极简高效开发。从组件、动效和状态管理三个维度来提供UI能力，还提供了系统能力接口，实现系统能力的极简调用。 开箱即用的组件 框架提供丰富的系统预置组件，可以通过链式调用的方式设置系统组件的渲染效果。开发者可以组合系统组件为自定义组件，通过这种方式将页面组件化为一个个独立的UI单元，实现页面不同单元的独立创建、开发和复用，使页面具有更强的工程性。 丰富的动效接口 提供svg标准的绘制图形能力，同时开放了丰富的动效接口，开发者可以通过封装的物理模型或者调用动画能力接口来实现自定义动画轨迹。 状态与数据管理 状态数据管理作为基于TS扩展的声明式开发范式的特色，通过功能不同的装饰器给开发者提供了清晰的页面更新渲染流程和管道。状态管理包括UI组件状态和应用程序状态，两者协作可以使开发者完整地构建整个应用的数据更新和UI渲染。 系统能力接口 使用基于TS扩展的声明式开发范式的方舟开发框架，还封装了丰富的系统能力接口，开发者可以通过简单的接口调用，实现从UI设计到系统能力调用的极简开发。 整体架构 声明式UI前端 提供了UI开发范式的基础语言规范，并提供内置的UI组件、布局和动画，提供了多种状态管理机制，为应用开发者提供一系列接口支持。 语言运行时 选用方舟语言运行时，提供了针对UI范式语法的解析能力，提供了跨语言调用支持，提供了TS语言高性能运行环境。 声明式UI后端引擎 后端引擎提供了兼容不同开发范式的UI渲染管线，提供多种基础组件、布局计算、动效、交互事件，提供了状态管理和绘制能力。 渲染引擎 提供了高效的绘制能力，将渲染管线收集的渲染指令，绘制到屏幕能力。 平台适配层 提供了对系统平台的抽象接口，具备接入不同系统的能力，如系统渲染管线、生命周期调度等。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/25鸿蒙的特点.html":{"url":"connent/鸿蒙/25鸿蒙的特点.html","title":"25鸿蒙的特点","keywords":"","body":"和安卓、iOS相比，鸿蒙最大的特点在于：它不仅是一个手机操作系统，更是一个面向万物互联的操作系统。手机、电视、平板、汽车等终端只要搭载鸿蒙系统，软件在不同平台之间都可以适配，不再需要单独开发。 “做一个操作系统，技术上不难，生态才是核心。生态涉及的广度、深度和复杂度远远超过所有的单个技术。”王成录曾说。 安卓有约2000万开发者，iOS有约2400万开发者，而鸿蒙的开发者则在数百万级。不过，有提前体验了鸿蒙的用户告诉红星资本局，部分安卓APP可以兼容鸿蒙，目前使用正常。 华为“1+8+N”“农村包围城市”： 还有很长的路要走 一般来说，系统主要分为两种运营模式：一种是苹果的模式，软硬件都抓，不开放给第三方；另一种是安卓模式，会开放给第三方一起合作。 对于华为在鸿蒙搭载上的先后顺序，有业内人士将其形容为“农村包围城市”，或者说得更准确一点，是“从智能家居产品包围手机”。 某种意义上来说，这和华为“1+8+N”战略是契合的。其中，“1”是指手机，“8”是平板、PC和车机等，而“N”是指泛IoT（物联网）设备。 鸿蒙，正是从“N”开始起步，现在逐渐攻入“1+8”领域。 不过，红星资本局注意到，数码圈内有声音认为，鸿蒙系统的颠覆性实质上并不强。目前，苹果、小米等也在尝试做物联网，可以通过手机连接家庭中的其他产品。 “像苹果也有做家庭智能产品互联，两者的区别在于：一个只用自己的硬件，华为可以用其他品牌的硬件，而且旗帜鲜明地把‘万物互联’这个概念打出来了。”有科技产业观察人士告诉红星资本局。 现在来看，没有其他任意一家手机厂商伸出援手，生态链也尚未完善，鸿蒙恐怕还有很长一段道路需要去走。 鸿蒙绝不是另一个版本的安卓，而是一个全新的、面向全场景的操作系统。 “鸿蒙支持一次开发、多端部署，就像开发单端APP一样简单，大大简化了开发者的工作量。如果换用安卓实现同样的分布式功能，不仅工作量会大很多，而且在性能和用户体验上都会比较差。”张荣超说。 基本上。。。没啥用 现在的制裁就是不让你海外用GMS，没有GMS还真的就寸步难行，你思考下你买手机装不上微信是啥感受。 未来不太可能会制裁aosp，一个华为不值得谷歌自爆信誉来怼 就算真的制裁aosp，鸿蒙照样基于这玩意，没得跑。 至于制裁安卓不制裁aosp。。。不存在的。 所以说，我最反感的说法就是“留退路，避免卡脖子”之类的P话。因为压根没解决问题。。。 这也是为什么“全自研”仨字最开始那么有吸引力，也是为什么这仨字泡汤以后那么多人那么愤怒。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/26我对鸿蒙OS的一些看法.html":{"url":"connent/鸿蒙/26我对鸿蒙OS的一些看法.html","title":"26我对鸿蒙OS的一些看法","keywords":"","body":"为鸿蒙说两句公道话 今天看了鸿蒙系统的评测，看完后我感觉很欣慰，为什么这么说 ？ 不是很多人吐槽鸿蒙是 Android 套壳吗 ？或者叫鸿蒙 UI 吗？说鸿蒙没有自己的核心技术。看了鸿蒙系统的设计，底层确实是基于安卓的 AOSP 接口没有错，但是我倒是觉得系统设计者应该是一个务实的家伙。因为至少没有被不理智的民族主义冲昏头脑，没有蠢到真正的从零开始设计一套新的系统，而是可以让用户没有学习成本、无痛的切换到一套新的操作系统上面。 如果不是共用底层，那么你基本不可能通过在线升级把 Android 升级为 鸿蒙 OS，还能兼容 Android 的海量应用（你想想你的 Android 可以在线升级为 IOS 吗？）等等…… 为什么说无痛迁移这么重要 ？因为如果真正的开发一套全新内核的操作系统，会遇到以下这些无法解决的问题： 没有生态：如果不跟安卓共用底层，那么无法兼容目前安卓海量的应用程序，一个没有应用程序的系统，再强大再好用，你会切换吗 ？ 不稳定：Window/Mac OS 都是经过30年的长期进化才有的今天的稳定性，Android 也有10多年的进化，如果从 0 开发新系统，那么快则 4-5 年系统才能趋向稳定，华为等得起，市场也等不起 成本高：就算华为再有钱，完全从零开发操作系统的成本是无法估量的，根据估值微软的 Windows 就已经接近千亿美金，华为目前市场占用率下滑，不可能还有那么多资金投入到操作系统上 选择跟 Android 共享底层会带来什么好处？ 如下： 兼容生态：就像上面说了，用户切换到鸿蒙，不会有任何的阻碍，成本极地，因为操作就安卓系统差不多。是一个可以不被民族主义绑架也能真正产生价值的产品 成本低：这里就不需要多说，底层不用自己写了，起码节省 80% 的开发成本，可以把更多的精力投入到扩展系统能力上，例如分布式协同，万物互联等等 稳定性：安卓底层有多稳定，鸿蒙就有多稳定，增加用户切换的信心 我相信鸿蒙的设计者选择和安卓相同的 AOSP 底层是经过深思熟虑的，是真正能看清现实，为什么这么说： 知道那些无脑吹捧华为的狂热的民族主义只是少数人，他们也不是华为的目标用户，他们最终还是会趋向性价比去选择产品，然后留下一句：下次一定 那些抨击华为没有从零开始写操作系统的人也是少数，他们也不是华为的目标用户，就算真的从零设计实现了操作系统，他们也还会继续喷其他的缺点，该喷的还的喷，喷子永远不会停下来 华为的鸿蒙的设计是真正从普通用户和使用者的角度出发，在乎用户体验和实用的设计。所以华为的最终目标用户是：我们大多数的普通人，我们购买一件产品，不是因为它有某种“爱国情怀”的标签，也不是它是不是真正的从零开始实现的操作系统，我们普通人需要的就是一个价格合适，可以给我们生活带来便利的工具。这才是我们会购买它的根本原因。 大胆猜测华为的下一步动作 大胆猜测一下，我相信华为下一步的目标肯定会替换到安卓的 AOSP 底层，只是这块工作难度太大，时间和市场都没办法等这么久，所以只能先基于 AOSP 先把应用层实现，等应用层铺开后，鸿蒙的应用层生态建立后，再替换为鸿蒙的内核，兼容 AOSP 那么可以做到对应用层无干扰的情况下完成整个操作系统的全部替换，那么鸿蒙就真正的意义的“完全自主研发的操作系统”。或许你会疑问这么做会不会成功 ？答案是肯定的，因为已经有很多类似的成功案例，我们看看以下两个比较类似的案例： kunbernetes 决定弃用 Docker 苹果 M1 全面替换 intel 芯片 他们的共同点是什么 ？ kunbernetes 是位于应用层的容器调度工具，起初它的底层是基于 Docker 实现的（非常类似鸿蒙 OS 基于安卓的 AOSP 底层实现应用），但是随着 kunbernetes 的发展和壮大，大家都开始依赖 kunbernetes 后，Docker 本身也成为限制 kunbernetes 发展的瓶颈，kunbernetes 就直接把 Docker 替换为自家的容器实现，技术上更可控，因为大家都是面向使用 kunbernetes 至于底层是用 Docker 还是自家的容器，who care ? 只要不影响用户使用就好。 苹果自家 M1 替换 Intel 芯片这个案例大家应该都知道了，当时苹果还是小公司的时候，不得已使用 Intel 芯片作为自己产品的核心处理器，然后随着苹果市场份额壮大，Intel 逐渐成为苹果发展的瓶颈，因为大家使用的是苹果的应用程序，所以后面就算把 Intel 芯片替换掉，只要苹果能保证 M1 兼容应用程序，那么底层是使用 M1 还是使用 Intel 谁会在意 ？ 后面 M1 芯片的苹果产品受到市场认可，也证明了这策略是成功可行的。 只要掌握应用层的生产资料，那么底层使用什么并不重要，我相信也这是鸿蒙的思路，只要等到鸿蒙生态成熟，那么未来某一天我们可能会突然看到新闻 华为鸿蒙系统决定放弃 安卓AOSP底层 替换为鸿蒙核心 的时候，也只是会心一笑而已。因为它根本就不影响你的使用。所以你无需关心它底层到底是安卓的AOSP还是真正重写的鸿蒙OS内核。 文章到这里就差不多可以总结了： 我认为鸿蒙选择跟安卓共用底层是正确的选择，不仅可以让用户无缝升级，还能复用目前海量的安卓 APP 市场，真正从用户使用的角度设计系统，而不是被民族主义冲坏理智的头脑 我相信鸿蒙OS在未来替换会逐渐安卓的AOSP底层，完成真正意义上的“完全自主研发操作系统”，这个里程碑对于我们还是蛮有意义。只是这个阶段太难完成，鸿蒙OS和用户都还需要时间来建立鸿蒙OS的生态壁垒 参考 https://www.1024sou.com/article/208421.html © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/27ArkUI开发基础：网络请求.html":{"url":"connent/鸿蒙/27ArkUI开发基础：网络请求.html","title":"27ArkUI开发基础：网络请求","keywords":"","body":"https://gitee.com/liangdidi/NetworkRequestDemo © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/28获取相册图片.html":{"url":"connent/鸿蒙/28获取相册图片.html","title":"28获取相册图片","keywords":"","body":"手机#获取系统照片并解码渲染显示（附完整demo） https://harmonyos.51cto.com/posts/2261 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/29Page生命周期.html":{"url":"connent/鸿蒙/29Page生命周期.html","title":"29Page生命周期","keywords":"","body":"Page生命周期 Page生命周期的不同状态转换及其对应的回调，如下图所示： onStart() 当系统首次创建Page实例时，触发该回调。对于一个Page实例，该回调在其生命周期过程中仅触发一次，Page在该逻辑后将进入INACTIVE状态。开发者必须重写该方法，并在此配置默认展示的AbilitySlice。 onActive() Page会在进入INACTIVE状态后来到前台，然后系统调用此回调。Page在此之后进入ACTIVE状态，该状态是应用与用户交互的状态。Page将保持在此状态，除非某类事件发生导致Page失去焦点，比如用户点击返回键或导航到其他Page。当此类事件发生时，会触发Page回到INACTIVE状态，系统将调用onInactive()回调。此后，Page可能重新回到ACTIVE状态，系统将再次调用onActive()回调。因此，开发者通常需要成对实现onActive()和onInactive()，并在onActive()中获取在onInactive()中被释放的资源。 onInactive() 当Page失去焦点时，系统将调用此回调，此后Page进入INACTIVE状态。开发者可以在此回调中实现Page失去焦点时应表现的恰当行为。 onBackground() 如果Page不再对用户可见，系统将调用此回调通知开发者用户进行相应的资源释放，此后Page进入BACKGROUND状态。开发者应该在此回调中释放Page不可见时无用的资源，或在此回调中执行较为耗时的状态保存操作。 onForeground() 处于BACKGROUND状态的Page仍然驻留在内存中，当重新回到前台时（比如用户重新导航到此Page），系统将先调用onForeground()回调通知开发者，而后Page的生命周期状态回到INACTIVE状态。开发者应当在此回调中重新申请在onBackground()中释放的资源，最后Page的生命周期状态进一步回到ACTIVE状态，系统将通过 onActive() 回调通知开发者用户。 onStop() 系统将要销毁Page时，将会触发此回调函数，通知用户进行系统资源的释放。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/30跨设备迁移.html":{"url":"connent/鸿蒙/30跨设备迁移.html","title":"30跨设备迁移","keywords":"","body":" 跨设备迁移支持将Page在同一用户的不同设备间迁移，以便支持用户无缝切换的诉求。以Page从设备A迁移到设备B为例，迁移动作主要步骤如下： 设备A上的Page请求迁移。 HarmonyOS处理迁移任务，并回调设备A上Page的保存数据方法，用于保存迁移必须的数据。 HarmonyOS在设备B上启动同一个Page，并回调其恢复数据方法。 以Page从设备A迁移到设备B为例，详细的流程如下： 设备A上的Page请求迁移。 系统回调设备A上Page及其AbilitySlice栈中所有AbilitySlice实例的IAbilityContinuation.onStartContinuation()方法，以确认当前是否可以立即迁移。 如果可以立即迁移，则系统回调设备A上Page及其AbilitySlice栈中所有AbilitySlice实例的IAbilityContinuation.onSaveData()方法，以便保存迁移后恢复状态必须的数据。 如果保存数据成功，则系统在设备B上启动同一个Page，并恢复AbilitySlice栈，然后回调IAbilityContinuation.onRestoreData()方法，传递此前保存的数据；此后设备B上此Page从onStart()开始其生命周期回调。 系统回调设备A上Page及其AbilitySlice栈中所有AbilitySlice实例的IAbilityContinuation.onCompleteContinuation()方法，通知数据恢复成功与否。 迁移过程中发生异常，系统回调设备A上Page及其AbilitySlice栈中所有AbilitySlice实例的IAbilityContinuation.onFailedContinuation()方法，通知迁移过程中发生异常，并不是所有异常都会回调FA此方法，仅局限于该接口枚举的异常。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/31HarmonyOS技术架构.html":{"url":"connent/鸿蒙/31HarmonyOS技术架构.html","title":"31HarmonyOS技术架构","keywords":"","body":"HarmonyOS的架构图如下所示： © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/32鸿蒙是Android的套壳吗.html":{"url":"connent/鸿蒙/32鸿蒙是Android的套壳吗.html","title":"32鸿蒙是Android的套壳吗","keywords":"","body":"为鸿蒙说两句公道话，鸿蒙是安卓的套壳吗？ 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 这才是正确的做法，应该学习！ Andoid Andoid是2007年由Google公司基于Linux操作系统开发的一套移动端操作系统。 AOSP \"Android Open Source Project\"的缩写。中文意为\"Android 开放源代码项目\"。从此之后，基本所有的Android 应用都是在这个基础上进行开发的。 鸿蒙系统在Linux基础上进行开发，并且开发了自己的方舟编译器的，让开发者在这个上面开发鸿蒙的原生应用，同时把AOSP也集成进来,这样以前的Andoid程序包括以后的都可以运行在鸿蒙系统上面。 所以鸿蒙和安卓一样，甚至更为强大 然后看了鸿蒙系统的设计，底层确实是基于安卓的 AOSP 接口没有错， 我相信鸿蒙的设计者选择和安卓相同的 AOSP 底层是经过深思熟虑的，是真正能看清现实，为什么这么说： 选择跟 Android 共享底层的几个好处如下： 兼容生态：用户切换到鸿蒙，不会有任何的阻碍，可以降低成本，因为操作就安卓系统差不多。是一个可以不被民族主义绑架也能真正产生价值的产品 成本低：这里就不需要多说，底层不用自己写了，起码节省 80% 的开发成本，可以把更多的精力投入到扩展系统能力上，例如分布式协同，万物互联等等 稳定性：安卓底层有多稳定，鸿蒙就有多稳定，增加用户切换的信心 结合历史背景、使用场景、系统特性等维度主要是以下几点: Android和iOS开始只是针对手机开发的操作系统， 也是后来一点点的发展成支持平板、手表等设备的操作系统。 Andoid的程序并不是直接运行在操作系统上的,很多代码是需要由java虚拟机进行转换，这也能解释为啥以前Andoid手机很卡的原因，效率很低。 iOS系统过于封闭，只能运行在苹果设备上 鸿蒙一开始就考虑分布式应用的开发场景,是最能满足未来万物互联和物联网设备发展的趋势。 鸿蒙可以兼容已有的Andoid设备,是具备跨系统交互的能力 鸿蒙应用开发方式很丰富，可以支持原生和基于JS扩展的类Web开发范式（简称“类Web开发范式”）和基于TS扩展的声明式开发范式语言，会更快速的让开发者能够在上面开发应用。 鸿蒙一诞生开始就已经具备2亿以上设别的支持，发展势头很猛，由很好的用户基础 最后做一个操作系统，技术上不难，生态才是核心，华为“1+8+N”“农村包围城市”：现在来看，没有其他任意一家手机厂商伸出援手，生态链也尚未完善，鸿蒙恐怕还有很长一段道路需要去走。当然鸿蒙绝不是另一个版本的安卓，而是一个全新的、面向全场景的操作系统。鸿蒙支持一次开发、多端部署，就像开发单端APP一样简单，大大简化了开发者的工作量。这就是它的亮点之一。所以希望大家明白一个道理，未来的中国拒绝被卡脖子，尤其操作系统这样的东西，有必要还是要对他有点信心。 兼容是适应现在，发展自己才是未来 分布式应用 分布式应用区别于传统的应用软件，主要有以下几点 1.传统应用软件，一次只能安装在一 个设备 上进行运行，换个设备必须要重新安装才可以。 2.分布式应用是-项新的概念,他允许一个应用可以分成不同的部分， 安装在不同的设备上,设备之间可以相互调用其他设备的功能。 3.分布式应用甚至不需要某个设备安装应用，即可直接调用其他设备的应用，这- -点非常厉害。 HarmonyOS版本发布时间 鸿蒙OS 1.02019年8月9日 I 鸿蒙OS 2.0 2020年9月10日 鸿蒙0S3.0 2021年10月22日 鸿蒙会火起来吗？ 这个问题其实非常有意思，也是很多人在关心的问题。 鸿蒙肯定会火起来，而且必然会火起来 主要是两方面的原因 1.已经发展较好的鸿蒙生态和用户基数，以及华为背后的企业端整合能力 2.国际环境的趋势，中国务必要有一个完全自主创新的操作系统诞生 拥有以上两点，就足够解释了这是一-次中国信息技术发展历史上的一一个重要的里程碑。 谁适合学习鸿蒙系统开发? 其实鸿蒙的开发方式由很多种，无论你是新手小白还是由经验的开发老鸟,都能找到适合自己的开发方式 针对不同的人群，主要由下面几种开发方式 1.新手小白:完全图形化的低代码开发平台，就像操作PS-样进行界面拖拽式开发。 2.前端开发者:如果你已经有一些HTML、 CSS. JavaScript的基础知识, 可以很快速的使用他们开发鸿蒙App,这也是鸿蒙官方推荐的开发方式 3.Java开发者:如果你有一些java语言基础的经验，可以使用java语言进行开发 4.C/C++开发者:可以使用C/C++开发更多鸿蒙系统级别的应用，为鸿蒙扩展更多的应用能力 5.Android开发者:如果你已经会开发Android手机应用了,那么你的所有应用都可以无缝放在鸿蒙系统上完美运行，但我们建议你最好还是转向鸿蒙原生开发,这样才能更好的体验分布式应用开发的魅力。 6.苹果开发者:赶紧从以上开发方式上选择-种方式进行开发吧。 7.鸿蒙开发语言:鸿蒙即将推出自己的开发语言,让我们拭目以待。 新手和老手该如何学习鸿蒙开发 对于新手来说 跟着坚果一起体验，图形化界面和前端HTML在鸿蒙系统上的开发魅力吧。 对于老手来说 鸿蒙刚出来没多久，你确定你是老手吗? © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/鸿蒙/33如何注册华为开发者账号.html":{"url":"connent/鸿蒙/33如何注册华为开发者账号.html","title":"33如何注册华为开发者账号","keywords":"","body":"如何注册华为开发者账号 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 华为开发者账号是作为一个华为相关应用开发者非常重要的功能 它跟苹果开发者账号功能类似 华为开发者账号的作用 拥有一个开发者账号主要有以下几个功能. 1.在HUAWEI DevEco Studio中使用Device Manger,创建手机模拟器包括使用云端的模拟器都是需要开发者账号的，这是我们学习所必须的阿，如果有条件，建议还是可以买个鸿蒙手机，真机调试也是不错的。 2.发布你的鸿蒙应用，允许上架到应用商店 3华为云的使用 由此可见，拥有一个华为开发者账号是多么重要的事情 华为开发者身份类型 主要分为以下两种账号类型 1.个人开发者 2.企业开发者 如果你是新手,主要任务是学习鸿蒙开发，就直接注册个人开发者账号即可 华为开发者账号的注册流程 所有的注册流程都是安全、可靠、自主的 1.登录华为开发者中心网址: https://developer.huawei.com/cn/ 2.下一步,可选择是终端开发者,还是云开发者。 我们选择终端开发者，点击进入网站 1.终端开发者偏向手机、手表、AR眼镜等鸿蒙硬件设备 2.云开发者偏向大数据、云计算、企业服务等云相关服务 右上角有注册按钮 点击填写相关信息 3.选择身份，新手选择个人开发者账号即可,企业用户直接选择企业用户即可，点击下一步 下一步，敏感应用哪儿点击否 4.下一步,需要进行身份认证，个人开发者建议选择银行卡认证，审核快速，实在不方便就选择人工审核认证。企业开发者必须要进行 公户打款认证，一般员工应该没有这个权限，需要跟领导审批。 我选择银行卡 5.实名认证成功后,代表账号正式开通了。 6.进入管理中心，可以看到该账号的相关权限。 此时注册就成功了。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/OpenHarmony/00学习资料汇总.html":{"url":"connent/OpenHarmony/00学习资料汇总.html","title":"00学习资料汇总","keywords":"","body":"我们很客观的说一下从哪儿获得OpenHarmony 的学习资料 学习OpenHarmony 肯定要知道它的 官网https://www.openharmony.cn/mainPlay 又因为他是开源的，所以它的仓库也是有必要了解的 https://gitee.com/openharmony 除了上面两个地址，还有一些其他的资料也值得关注，比如说下面这个专栏 https://juejin.cn/column/7054837492645625864 文档 https://docs.openharmony.cn/pages/000000/ 书籍的话 深入浅出OpenHarmony——架构、内核、驱动及应用开发全栈 本书从OpenHarmony操作系统的设计目标与设计思路开始，由表及里、深入浅出地讲解了OpenHarmony操作系统的架构、内核、驱动及应用开发基础与实战的全栈技术内容。在实战部分，从开发环境的安装配置开始，分别讲解了南向开发、北向开发的基本过程及实战案例，华为已将其作为面向全球推荐的OpenHarmony操作系统的官方技术教程之一。 下面是京东地址https://item.jd.com/12926119.html 官网：https://www.openharmony.cn/mainPlay 开源地址：https://gitee.com/openharmony © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/OpenHarmony/01OpenHarmony的介绍.html":{"url":"connent/OpenHarmony/01OpenHarmony的介绍.html","title":"01OpenHarmony的基础介绍","keywords":"","body":"阅读源码的姿态 阅读源码绝不是从源码工程按顺序一个个的文件，从首行看到尾行。正确而高效地阅读源码的姿态应该是以某一个主线为起点，从上层往底层，不断地追溯，在各个模块、文件、方法之间来回跳转，反复地阅读，理清整个流程的逻辑。同时带着思考去看源码，尝试去揣测作者的用意，去理解代码的精妙之处，去思考代码可能存在的缺陷，去总结优秀的代码设计思想 优秀资源 牛顿曾说过：“如果我看得更远一点的话，是因为我站在巨人的肩膀上”，这句话很具有实用价值，看完前面的介绍，你千万不要一上来就一头扎进源码的世界，小心你会进入二次元世界，处于混沌状态，最后崩溃乃至放弃求知之路，一定要合理利用现有的优秀资源。 今天借此机会，就来说一说关于OpenHarmony 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 开源 在说OpenHarmony之前我们先来关注一下前面Open这个词，关于Open，有着开放，公开，开源的意思，那么为什么要说开源呢，其实对于随着软件技术的发展，底层技术的发展主要有两种趋势， 第一种是闭源，软件源代码不公开，由专人开发推进 第二种就是开源 所谓开源，就是把软件程序和源代码等，一起公开，用户可以不受限制的使用该软件的全部功能，不过现在也出现了一部分开源协议，所以用户在使用的时候，还是要注意一下，在不要违背开源协议的前提下可以进行软件的二次开发。目前我也和小伙伴一起维护着一个开源https://www.gin-vue-admin.com/，大家感兴趣的可以前来观赏。最后OpenHarmony主要遵循Apache License V2.0协议，关于Apache License V2.0协议，大家可以自行去了解。 我们接着说开源 开源有开放性，公开性，自发性，参与人员多样性，以及兴趣趋势，所以开源在一定程度上质量更高，成本更低。 好的说完开源，我们就来说OpenHarmony 说OpenHarmony，就不得不提到一个组织，开放原子开源基金会 开放原子开源基金会 开放原子开源基金会是中国内地首个开源领域的基金会，成立于2020年6月，由阿里巴巴、百度、华为、浪潮、360、腾讯、招商银行等企业联合发起[1]，是在中华人民共和国民政部注册的非营利性独立法人机构。基金会涵盖OpenHarmony、TecentOS Tiny、AliOS Things、UBLM、TKEstack、XuperChain等项目。 OpenHarmony OpenHarmony是由开放原子开源基金会（OpenAtom Foundation）孵化及运营的开源项目，目标是面向全场景、全连接、全智能时代，基于开源的方式，搭建一个智能终端设备操作系统的框架和平台，促进万物互联产业的繁荣发展 从Open就可以看出，他是一个开源项目，是由华为雇了一帮人，然后由这些人commit代码，最后华为把 HarmonyOS 中基础功能提取出来，打包成功一个项目叫做“Openharmony” ，把 Openharmony 捐献给了原子开源基金会。 OpenHarmony是由开放原子开源基金会孵化及运营的，未来华为也将持续为OpenHarmony开源项目贡献代码 然后来看一下OpenHarmony在代码托管平台Gitee的情况， OpenHarmony目前是Gitee上最有价值的开源项目之一，仓库数350个，成员232人，star数18.5k，fork数20.7k，Pr1.7k，无以不在说明他的开源价值和活跃度。 2021 年 12 月，新增美的集团、深开鸿为 OpenHarmony 项目群捐赠人，目前捐赠的数量已经达到20余家。 总结 OpenHarmony 是由开放原子开源基金会孵化及运营的开源项目，其生态正在趋于完善。 今天就简单的介绍这些，下一节将对他的技术架构和技术特征，以及社区做一了解。 参考链接 开放原子开源基金会维基百科 OpenHarmony项目群12月新增捐赠人一览 OpenHarmony开源项目 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/OpenHarmony/02OpenHarmony技术架构.html":{"url":"connent/OpenHarmony/02OpenHarmony技术架构.html","title":"02OpenHarmony技术架构","keywords":"","body":"上一节我们了解了关于开源和OpenHarmony做了简单的了解，今天主要了解OpenHarmony的技术架构 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 OpenHarmony整体遵从分层设计，从下向上依次为：内核层、系统服务层、框架层和应用层。系统功能按照“系统 > 子系统 > 组件”逐级展开，在多设备部署场景下，支持根据实际需求裁剪某些非必要的组件。OpenHarmony技术架构如下所示： 上面是OpenHarmony的技术架构下面是Flutter 架构层 Flutter 架构层 Flutter 被设计为一个可扩展的分层系统。它可以被看作是各个独立的组件的系列合集，上层组件各自依赖下层组件。组件无法越权访问更底层的内容，并且框架层中的各个部分都是可选且可替代的。 对于底层操作系统而言，Flutter 应用程序的包装方式与其他原生应用相同。在每一个平台上，会包含一个特定的嵌入层，从而提供一个程序入口，程序由此可以与底层操作系统进行协调。 Flutter 引擎 毫无疑问是 Flutter 的核心，它主要使用 C++ 编写，并提供了 Flutter 应用所需的原语。当需要绘制新一帧的内容时，引擎将负责对需要合成的场景进行栅格化。它提供了 Flutter 核心 API 的底层实现，包括图形（通过 Skia）、文本布局、文件及网络 IO、辅助功能支持、插件架构和 Dart 运行环境及编译环境的工具链。 Flutter 框架层 提供了以 Dart 语言编写的现代响应式框架。它包括由一系列层组成的一组丰富的平台，布局和基础库 最后是Android系统架构 Android系统架构 Android系统架构分为四层架构，从高到低分别是应用层，应用框架层，系统运行层和Linux内核层。 Android会同一系列核心应用程序包一起发布，该应用程序包包括email客户端，SMS短消息程序，日历，地图，浏览器，联系人管理程序等。 它们一般都是使用Java进行编写。 总结 由于我平常接触的是Flutter，现在参加的是OpenHarmony的活动，所以我就将Android ，Flutter，OpenHarmony各平台的架构做了汇总。 参考链接 OpenHarmon技术架构 Flutter 架构概览 Android平台架构 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/OpenHarmony/03OpenHarmony技术架构的细节.html":{"url":"connent/OpenHarmony/03OpenHarmony技术架构的细节.html","title":"03OpenHarmony技术架构的细节","keywords":"","body":"上一节将Android ，Flutter，OpenHarmony各平台的架构做了初步认识，这一节就来详细了解OpenHarmony技术架构的细节 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 请允许我在开始之前再一次将OpenHarmony技术架构图贴出来 内核层 内核子系统：采用多内核（Linux内核或者LiteOS）设计，支持针对不同资源受限设备选用适合的OS内核。内核抽象层（KAL，Kernel Abstract Layer）通过屏蔽多内核差异，对上层提供基础的内核能力，包括进程/线程管理、内存管理、文件系统、网络管理和外设管理等。 驱动子系统：驱动框架（HDF）是系统硬件生态开放的基础，提供统一外设访问能力和驱动开发、管理框架。 系统服务层 系统服务层是OpenHarmony的核心能力集合，通过框架层对应用程序提供服务。该层包含以下几个部分： 系统基本能力子系统集：为分布式应用在多设备上的运行、调度、迁移等操作提供了基础能力，由分布式软总线、分布式数据管理、分布式任务调度、公共基础库、多模输入、图形、安全、AI等子系统组成。 基础软件服务子系统集：提供公共的、通用的软件服务，由事件通知、电话、多媒体、DFX（Design For X） 等子系统组成。 增强软件服务子系统集：提供针对不同设备的、差异化的能力增强型软件服务，由智慧屏专有业务、穿戴专有业务、IoT专有业务等子系统组成。 硬件服务子系统集：提供硬件服务，由位置服务、生物特征识别、穿戴专有硬件服务、IoT专有硬件服务等子系统组成。 根据不同设备形态的部署环境，基础软件服务子系统集、增强软件服务子系统集、硬件服务子系统集内部可以按子系统粒度裁剪，每个子系统内部又可以按功能粒度裁剪。 框架层 框架层为应用开发提供了C/C++/JS等多语言的用户程序框架和Ability框架，适用于JS语言的JS UI框架，以及各种软硬件服务对外开放的多语言框架API。根据系统的组件化裁剪程度，设备支持的API也会有所不同。 应用层 应用层包括系统应用和第三方非系统应用。应用由一个或多个FA（Feature Ability）或PA（Particle Ability）组成。其中，FA有UI界面，提供与用户交互的能力；而PA无UI界面，提供后台运行任务的能力以及统一的数据访问抽象。基于FA/PA开发的应用，能够实现特定的业务功能，支持跨设备调度与分发，为用户提供一致、高效的应用体验。 技术特性 硬件互助，资源共享 主要通过下列模块达成 分布式软总线 分布式软总线是多设备终端的统一基座，为设备间的无缝互联提供了统一的分布式通信能力，能够快速发现并连接设备，高效地传输任务和数据。 分布式数据管理 分布式数据管理位于基于分布式软总线之上的能力，实现了应用程序数据和用户数据的分布式管理。用户数据不再与单一物理设备绑定，业务逻辑与数据存储分离，应用跨设备运行时数据无缝衔接，为打造一致、流畅的用户体验创造了基础条件 分布式任务调度 分布式任务调度基于分布式软总线、分布式数据管理、分布式Profile等技术特性，构建统一的分布式服务管理（发现、同步、注册、调用）机制，支持对跨设备的应用进行远程启动、远程调用、绑定/解绑、以及迁移等操作，能够根据不同设备的能力、位置、业务运行状态、资源使用情况并结合用户的习惯和意图，选择最合适的设备运行分布式任务 设备虚拟化 分布式设备虚拟化平台可以实现不同设备的资源融合、设备管理、数据处理，将周边设备作为手机能力的延伸，共同形成一个超级虚拟终端。 一次开发，多端部署 OpenHarmony提供用户程序框架、Ability框架以及UI框架，能够保证开发的应用在多终端运行时保证一致性。一次开发、多端部署。 多终端软件平台API具备一致性，确保用户程序的运行兼容性。 支持在开发过程中预览终端的能力适配情况（CPU/内存/外设/软件资源等）。 支持根据用户程序与软件平台的兼容性来调度用户呈现。 统一OS，弹性部署 OpenHarmony通过组件化和组件弹性化等设计方法，做到硬件资源的可大可小，在多种终端设备间，按需弹性部署，全面覆盖了ARM、RISC-V、x86等各种CPU，从百KiB到GiB级别的RAM。 系统类型 OpenHarmony支持如下几种系统类型： 轻量系统（mini system） 面向MCU类处理器例如Arm Cortex-M、RISC-V 32位的设备，硬件资源极其有限，支持的设备最小内存为128KiB，可以提供多种轻量级网络协议，轻量级的图形框架，以及丰富的IOT总线读写部件等。可支撑的产品如智能家居领域的连接类模组、传感器设备、穿戴类设备等。 小型系统（small system） 面向应用处理器例如Arm Cortex-A的设备，支持的设备最小内存为1MiB，可以提供更高的安全能力、标准的图形框架、视频编解码的多媒体能力。可支撑的产品如智能家居领域的IP Camera、电子猫眼、路由器以及智慧出行域的行车记录仪等。 标准系统（standard system） 面向应用处理器例如Arm Cortex-A的设备，支持的设备最小内存为128MiB，可以提供增强的交互能力、3D GPU以及硬件合成能力、更多控件以及动效更丰富的图形能力、完整的应用框架。可支撑的产品如高端的冰箱显示屏。 详细特征 在介绍OpenHarmony特性前，需要先明确以下两个基本概念： 子系统 OpenHarmony整体遵从分层设计，从下向上依次为：内核层、系统服务层、框架层和应用层。系统功能按照“系统 > 子系统 > 组件”逐级展开，在多设备部署场景下，支持根据实际需求裁剪某些非必要的组件。子系统是一个逻辑概念，它具体由对应的组件构成。 组件 对子系统的进一步拆分，可复用的软件单元，它包含源码、配置文件、资源文件和编译脚本；能独立构建，以二进制方式集成，具备独立验证能力的二进制单元。 子系统 AI业务子系统 AI业务子系统介绍 AI业务子系统是OpenHarmony提供原生的分布式AI能力的子系统。本次开源范围是提供了统一的AI引擎框架，实现算法能力快速插件化集成。框架中主要包含插件管理、模块管理和通信管理等模块，对AI算法能力进行生命周期管理和按需部署。后续，会逐步定义统一的AI能力接口，便于AI能力的分布式调用。同时，提供适配不同推理框架层级的统一推理接口。 AI业务子系统目录 /foundation/ai/engine # AI子系统主目录 ├── interfaces │ └── kits # AI子系统对外接口 └── services │ ├── client # AI子系统Client模块 │ │ ├── client_executor # Client模块执行主体 │ │ └── communication_adapter # Client模块通信适配层，支持拓展 │ ├── common # AI子系统公共工具、协议模块 │ │ ├── platform │ │ ├── protocol │ │ └── utils │ └── server # AI子系统服务端模块 │ │ ├── communication_adapter # Server模块通信适配层，支持拓展 │ │ ├── plugin │ │ ├── asr │ │ └── keyword_spotting # ASR算法插件参考：唤醒词识别 │ │ └── cv │ │ └── image_classification # CV算法插件参考：图片分类 │ │ ├── plugin_manager │ │ └── server_executor # Server模块执行主体 AI业务子系统约束 语言限制：C/C++语言 操作系统限制：OpenHarmony操作系统 AI服务启动的约束与限制：SAMGR（System Ability Manager）启动且运行正常 AI业务子系统使用 AI业务子系统的使用主要有以下四个场景: AI业务子系统编译 插件开发 插件SDK开发 sample开发 具体如何使用请点击这儿 参考链接 OpenHarmon技术架构 OpenHarmony中相关的子系统简介 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/OpenHarmony/04OpenHarmony的三大设计特点.html":{"url":"connent/OpenHarmony/04OpenHarmony的三大设计特点.html","title":"04OpenHarmony的三大设计特点","keywords":"","body":"https://gitee.com/openharmony/docs/tree/master/zh-cn/application-dev/reference/arkui-ts 常用组件 请参考[基于TS扩展的声明式开发范式 OpenHarmony的三大设计特点 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 可裁剪 易开发 跨终端 1.可裁剪 那么什么是操作系统的可裁剪性呢？ 所谓操作系统的可裁剪性，就是一个规模大且功能齐全的操作系统，在结构上保证了用户可在其中有选择地保留某些模块，而删减掉一些模块的性能。 目标系统设计者的这个做法，也常常叫做对操作系统进行配置。 因此，操作系统的可裁剪性也常被叫做操作系统的可配置性。OpenHarmony由于其硬件设备较多，可裁剪在一定程度上就成了必然要求。也就是可以按需只加载应用需要的框架模块。 可裁剪性的体现 在框架层面 OpenHarmony可按照具体应用要求只加载应用所需的框架模块 在系统服务方面 OpenHarmony会按照具体应用或设备的依赖，加载所租系统服务。 在驱动程序层面 OpenHarmony的驱动程序框架采用配置文件的形式，实现驱动程序的动态加载 在内核方面 主要通过Makefile的配置以及部分配置型头文件中的编译宏定义实现。 2.易开发 一次开发，多端部署 面向多终端的IDE(南向 IDE，北向IDE) 控件标签化，布局自适配 3.跨终端 OpenHarmony将设备通过综合信息感知平台（iAware），虚拟为本地设备，各平台通过此平台注册自己硬件能力，其分布式软总线就是这样，打破硬件的界限，实现硬件互助，取长补短。 总结 这三大特性是OpenHarmony有别于 其他操作系统最为典型的地方，OpenHarmony从内核到系统服务到框架，到IDE的整体设计都是围绕这三大特征展开的。 参考文档 《深入浅出OpenHarmony⸺架构、内核、驱动及应用开发全栈》-第二章 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/OpenHarmony/05创建第一个oh应用.html":{"url":"connent/OpenHarmony/05创建第一个oh应用.html","title":"05创建第一个oh应用","keywords":"","body":" 打开DevEco Studio，点击Create Project。如果已有一个工程，则点击File > New > New project。 进入选择ability template界面，选择[Standard]Empty Ability。 安装OpenHarmony SDK。 进入配置工程界面，将工程名字改为HealthyDiet，Project Type选择Application，Device Type选择Phone，Language选择eTS，选择兼容API Version 7。DevEco Studio会默认将工程保存在C盘，如果要更改工程保存位置，点击Save Location的文件夹图标，自行指定工程创建位置。配置完成后点击Finish。 工程创建完成后，打开app.ets。 app.ets提供了应用生命周期的接口：onCreate和onDestroy，分别在应用创建之初和应用被销毁时调用。在app.ets里可以声明全局变量，并且声明的数据和方法是整个应用共享的。 export default { onCreate() { console.info('Application onCreate') }, onDestroy() { console.info('Application onDestroy') }, } 在工程导航栏里，打开index.ets。该页面展示了当前的UI描述，声明式UI框架会自动生成一个组件化的struct，这个struct遵循Builder接口声明，在build方法里面声明当前的布局和组件。 @Entry @Component struct MyComponent { build() { Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) { Text('Hello World') .fontSize(50) .fontWeight(FontWeight.Bold) } .width('100%') .height('100%') } } 点击右侧的Previewer按钮，打开预览窗口。可以看到在手机设备类型的预览窗口中“Hello World”居中加粗显示。 如果没有Previewer按钮，点击settings > SDK Manager > OpenHarmony SDK> Tools 查看是否安装了Previewer。 应用安装到手机上运行应用。将手机连接电脑，等IDE识别到物理设备后，点击Run 'entry'按钮。 在安装之前，需要配置应用签名，配置应用签名教程。安装成功后，点击屏幕上的Run图标打开应用，可以看到居中加粗显示的“Hello World”。 配置签名https://blog.51cto.com/harmonyos/5073520 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/OpenHarmony/06ETS开发FAQ.html":{"url":"connent/OpenHarmony/06ETS开发FAQ.html","title":"06ETS开发FAQ","keywords":"","body":"ETS开发FAQ 1. 分布式能力调用不正常 网络不要在过于复杂的网络，推荐手机开无密码热点（方便连接） 热点和手机不要距离太远 可使用网线连接，并设置不同的IP测试接口调用是否正确，并ping下对方是否连接上 hdc_std shell ifconfig eth0 192.168.1.111 netmask 255.255.255.0 hdc_std shell ifconfig eth0 192.168.1.222 netmask 255.255.255.0 2. 应用安装 使用hdc 覆盖安装，并且hap包路径使用绝对路径 hdc_std install -r path //path为绝对路径 安装推荐如下脚本, 将路径修改，并保持为bat文件即可 hdc_std kill && hdc_std install -r D:\\DevEcoStudioProjects\\BombGame\\build\\outputs\\hap\\debug\\phone\\entry-debug-standard-ark-signed.hap pause 3. hdc_std 无反应 大概率是hdc_std被占用了，将hdc_std 杀死重启即可 hdc_std kill // 或者 hdc_std start -r 4.如何查看应用日志 hdc_std shell hilog | grep BombGame // BombGame为过滤词 5. 如何针对某一组件调试 使用@Preview 装饰器可以在previewer里只显示这个组件，并且安装在板子上也是显示该组件，可以快速看到组件效果。 6. 自定义dialog回调中无法访问回调中的this 自定义dialog文档 @entry新建弹窗对象 dialogController: CustomDialogController = new CustomDialogController({ builder: CustomDialogExample({ cancel: this.onCancel, confirm: this.onAccept }), cancel: this.existApp, autoCancel: true }) 这里onCancel和onAccept中无法访问到@entry的回调是因为js作用域问题，所以使用箭头函数改变作用域即可 dialogController: CustomDialogController = new CustomDialogController({ builder: CustomDialogExample({ cancel: ()=>this.onCancel(), confirm: ()=>this.onAccept() }), cancel: this.existApp, autoCancel: true }) 7. @State 出现无法响应更新到视图的情况 通常该情况@State 装饰的为数组对象,如下格式 [ {...}, {...} ] 因为arkUI响应式只能监听到第一层的数据变化和数组长度变化，无法监听到第二层对象的某个属性变化，所以我需要动态显示某个对象下的属性变化，则需要给整个对象重新赋值，对象浅拷贝可用Object.assign 解决方法可参考如下办法（修改list第一项对象的id属性，并在视图也能动态更新） let obj = Object.assign( this.list[0],{}) obj.id = 1 this.list[0] = obj 如果仍然不行，可通过强制让数组长度有所变化来实现强制更新 8. previewer预览器3516配置 点击previewer->Enable profile Manager ->右上角加号 添加自定义预览器 width:500 height:850 DPI:180 ，可模拟3516上的情况（以上数据仅供参考，有更准确的欢迎更新） 9. backgroundImage 用不了 OH3.0 LTS,backgroundImage 可以获取网络图片，但是无法正常获取本地resource图片（需要resource文件夹复制到ability目录下），所以推荐用stack来堆叠，这样可以做到同样的效果且代码较为清晰 10. 应用卡顿 由于3516上没有GPU，渲染能力和计算较差导致的，以下为优化方向 使用top查看设备性能使用情况 hdc_std shell top 使用定时器setInterval的间隔时间需要长一点，特别是配合动画使用时 如果gif动图，请尽量压缩大小 避免多次远端重复拉起应用 11.文本乱码 或者不显示 prompt 3.0LTS不支持中文，导致文字不显示（master已支持） console和分布式数据库不支持中文 13. 如何获取包名 import featureAbility from '@ohos.ability.featureAbility'; featureAbility.getContext().getBundleName().then(bundleName=>{ this.bundleName = bundleName // bundleName即为包名 }) © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/OpenHarmony/07什么是GMS.html":{"url":"connent/OpenHarmony/07什么是GMS.html","title":"07什么是GMS","keywords":"","body":"华为被卡脖子，到底卡的是什么？ 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 GMS，全称为Google Mobile Service，即谷歌移动服务。GMS是Android系统灵魂所在，是一套谷歌旗下的应用程序和基于云的软件服务，当用户使用谷歌服务的时候，谷歌可以把广告嵌入各种谷歌的服务中，是谷歌的重要收入来源渠道。 问题的关键是，GMS并非安卓开源项目（Android Open Source Project, 即AOSP）的一部分。只有当安卓智能手机制造商，获得了Google的许可之后，才能在其安卓设备上合法安装GMS。华为未来不能得到谷歌许可，意味着未来的华为手机上，将不会内嵌有GMS。 GMS的作用包括使用谷歌核心Apps（即Google应用“全家桶”），包括YouTube，Google Now，Google Play store，Google Play Games，Google Maps（谷歌地图）等，及将基于Google账户的系统数据同步，备份，包括联系人，邮件，文件同步，游戏进度，多人线上联机等。GMS为安卓上的谷歌公司系列应用提供支持 后果 缺少 GMS，预计对华为手机的海外市场推广带来致命影响。因为谷歌全家桶APP ，大部分在国内无法使用，且有微信、高德地图等替代品，华为甚至可以推出鸿蒙操作系统取代安卓，因此在国内影响不大。 对于安卓来说它是Android设备配置服务的一项。 海外 海外平台严重依赖GMS，当使用登录海外网站的谷歌商店就必须使用谷歌三件套（Google服务框架、Google play商店和Google Play服务）而这些基于GMS来运行，如没有将无法安装海外应用程序，或将被禁止下载，很多app没有GMS甚至根本无法运行，即使安装成功可以运行也会出现“闪退”，或者是出现”已停止服务”。而没有办法正常使用，但是没有的设备依然可以通过一些方式来获取GMS服务。 解决方案 1..从安卓开发者的角度看，HMS的接口和提供的服务可以做一些和GMS一样的接口和服务，让软件认为HMS就是GMS 2.gms并不是无敌，只是用户习惯。所以，可以通过转变国外的用户的使用方式来解决 3.华为目前来看对待很多事的解决办法都是自研，你不让我用，那好我自己做一个新的出来替代你让用的，现在麻烦的是华为新做出的东西如何让国外认可，首先得到国内的支持。 除此之外，大家还有什么好的建议与意见吗？欢迎在评论区留言！ 国内 在国内一般厂商也有GMS但厂商会推出的自己的服务框架，以小米为例，小米手机上就会有小米服务框架 [1] ，他会把服务器定向到国内为大陆的手机提供服务。 也有厂商内置谷歌和自己研发的框架，这个谷歌框架大部分都是被阉割过的，在手机中会发挥辅助作用，不过，安卓虽然开源，但是修改GMS必须获得谷歌授权不可以随意修改，在使用GMS必须经过谷歌公司授权，中国大陆虽然也是用谷歌系统但是不能访问海外网站。 大陆用户不需要使用GooglePlay来进行下载软件，有各种各样的应用市场取代，不需要经过谷歌的软件审核 级别 依据GMS，谷歌对Android手机给予不同程度的授权，把搭载Android系统的手机厂商大致分为三个级别， 1.免费使用Android操作系统，但不内嵌GMS，现代智能手机很少不内嵌这个； 2.内嵌部分GMS服务，但手机不能打上谷歌的商标，在手机内部有一个制造厂商的服务框架； 3.内嵌所有的GMS服务，也可以使用谷歌商标，经过谷歌的审核，并得到授权 在大陆因为GMS无法正常运行所以很多厂商在得到谷歌公司授权以后对GMS作出了修改 在市面上现已通过谷歌认证的手机列表（即play保护机制认证 [3] ） GMS认证并不是想象的那么容易，谷歌要根据厂商的实力考虑是否认证。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/OpenHarmony/09初学者 指南.html":{"url":"connent/OpenHarmony/09初学者 指南.html","title":"09初学者 指南","keywords":"","body":" 关于o 界面设计 业务逻辑设计 数据库设计 网络编程 初学者建议 多看成体系的视频教程&书籍; 养成翻看官网和开发者文档、书籍的习惯; 要重视社区的作用:结交朋友、开阔视野、提高能力、了解前沿; 掌握在社区中搜索技巧、提问技巧; 学会如何在社区贡献，避免娱乐化、始终以学习技术为核心;zhu'y 常见问题 常见使用问题 项目业务问题 领域问题 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/OpenHarmony/10开发环境搭建.html":{"url":"connent/OpenHarmony/10开发环境搭建.html","title":"10开发环境搭建","keywords":"","body":"【OpenHarmony】开发环境搭建 https://blog.csdn.net/qq_45396672/article/details/123172501 https://blog.csdn.net/aa120515692/article/details/123040729?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1.pc_relevant_antiscanv2&spm=1001.2101.3001.4242.2&utm_relevant_index=4 前面一直在介绍OpenHarmony基础相关的一些东西，至于为什么，大学毕业之后，电脑性能已经不够用了，导致虚拟机安装起来之后风扇就呼呼呼的响呀，这还是小事，关键是卡的让你直接用不了，所以体验很不爽，于是花重金购了一台二手电脑用来学习鸿蒙， © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/OpenHarmony/11OpenHarmony的功能框架.html":{"url":"connent/OpenHarmony/11OpenHarmony的功能框架.html","title":"11OpenHarmony的功能框架","keywords":"","body":"© luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/OpenHarmony/12OpenHarmony的多内核.html":{"url":"connent/OpenHarmony/12OpenHarmony的多内核.html","title":"12OpenHarmony的多内核","keywords":"","body":"OpenHarmony的多内核 作者：坚果 公众号：\"大前端之旅\" 华为云享专家，InfoQ签约作者，阿里云专家博主，51CTO博客首席体验官，开源项目GVA成员之一，专注于大前端技术的分享，包括Flutter,小程序,安卓，VUE，JavaScript。 Linux内核 Linux内核的作用是将应用层序的请求传递给硬件，并充当底层驱动程序，对系统中的各种设备和组件进行寻址。支持模块的动态装卸(裁剪)。Linux内核就是基于这个策略实现的。选择Linux是因为他的开源性以及成熟度。关于他的更多介绍，其实公开资料更多，就不做介绍了。 LiteOS内核 Huawei LiteOS 是华为自研、开源的物联网实时操作系统，ARM、RISC-V等主流的CPU架构，以轻量级低功耗，快速启动，互联互通，安全等关键能力，为开发者提供 “一站式” 完整软件平台，有效降低开发门槛、缩短开发周期。 OpenHarmony 轻量级内核是基于IoT领域轻量级物联网操作系统Huawei LiteOS内核演进发展的新一代内核，包含LiteOS-M和LiteOS-A两类内核。 LiteOS-M LiteOS-M内核主要应用于轻量系统，面向的MCU一般是百K级内存，可支持MPU隔离，业界类似的内核有FreeRTOS或ThreadX等； LiteOS-A LiteOS-A内核主要应用于小型系统，面向设备一般是M级内存，可支持MMU隔离，业界类似的内核有Zircon或Darwin等。 LiteOS-M LiteOS-M的设计目标是支持小设备的运行 LiteOS-M的系统架构 OpenHarmony LiteOS-M内核是面向IoT领域构建的轻量级物联网操作系统内核，具有小体积、低功耗、高性能的特点，其代码结构简单，主要包括内核最小功能集、内核抽象层、可选组件以及工程目录等，分为硬件相关层以及硬件无关层，硬件相关层提供统一的HAL（Hardware Abstraction Layer）接口，提升硬件易适配性，不同编译工具链和芯片架构的组合分类，满足AIoT类型丰富的硬件和编译工具链的拓展。 它实现了进程，线程，内存等管理机制，提供了常见IPC，软定时器，等公共模块，可以大幅度降低嵌入式设备开发的难度。 目录 目录结构如下， /kernel/liteos_m ├── arch # 内核指令架构层目录 │ ├── arm # arm 架构代码 │ │ ├── arm9 # arm9 架构代码 │ │ ├── cortex-m3 # cortex-m3架构代码 │ │ ├── cortex-m33 # cortex-m33架构代码 │ │ ├── cortex-m4 # cortex-m4架构代码 │ │ ├── cortex-m7 # cortex-m7架构代码 │ │ └── include # arm架构公共头文件目录 │ ├── csky # csky架构代码 │ │ └── v2 # csky v2架构代码 │ ├── include # 架构层对外接口存放目录 │ ├── risc-v # risc-v 架构 │ │ ├── nuclei # 芯来科技risc-v架构代码 │ │ └── riscv32 # risc-v官方通用架构代码 │ └── xtensa # xtensa 架构代码 │ └── lx6 # xtensa lx6架构代码 ├── components # 可选组件 │ ├── backtrace # 栈回溯功能 │ ├── cppsupport # C++支持 │ ├── cpup # CPUP功能 │ ├── dynlink # 动态加载与链接 │ ├── exchook # 异常钩子 │ ├── fs # 文件系统 │ ├── lmk # Low memory killer 机制 │ ├── lms # Lite memory sanitizer 机制 │ ├── net # Network功能 │ ├── power # 低功耗管理 │ ├── shell # shell功能 │ └── trace # trace 工具 ├── drivers # 驱动框架Kconfig ├── kal # 内核抽象层 │ ├── cmsis # cmsis标准接口支持 │ └── posix # posix标准接口支持 ├── kernel # 内核最小功能集支持 │ ├── include # 对外接口存放目录 │ └── src # 内核最小功能集源码 ├── targets # 板级工程目录 ├── testsuites # 内核测试用例 ├── tools # 内核工具 ├── utils # 通用公共目录 OpenHarmony LiteOS-M内核的编译构建系统是一个基于gn和ninja的组件化构建系统，支持按组件配置、裁剪和拼装，按需构建出定制化的产品。 LiteOS-A OpenHarmony LiteOS-A内核是基于Huawei LiteOS内核演进发展的新一代内核，是面向IoT领域构建的轻量级物联网操作系统。新增了丰富的内核机制、更加全面的POSIX标准接口以及统一驱动框架HDF（OpenHarmony Driver Foundation）等，为设备厂商提供了更统一的接入方式，为OpenHarmony的应用开发者提供了更友好的开发体验。 目录 /kernel/liteos_a ├── apps # 用户态的init和shell应用程序 ├── arch # 体系架构的目录，如arm等 │ └── arm # arm架构代码 ├── bsd # freebsd相关的驱动和适配层模块代码引入，例如USB等 ├── compat # 内核接口兼容性目录 │ └── posix # posix相关接口 ├── drivers # 内核驱动 │ └── char # 字符设备 │ ├── mem # 访问物理IO设备驱动 │ ├── quickstart # 系统快速启动接口目录 │ ├── random # 随机数设备驱动 │ └── video # framebuffer驱动框架 ├── fs # 文件系统模块，主要来源于NuttX开源项目 │ ├── fat # fat文件系统 │ ├── jffs2 # jffs2文件系统 │ ├── include # 对外暴露头文件存放目录 │ ├── nfs # nfs文件系统 │ ├── proc # proc文件系统 │ ├── ramfs # ramfs文件系统 │ └── vfs # vfs层 ├── kernel # 进程、内存、IPC等模块 │ ├── base # 基础内核，包括调度、内存等模块 │ ├── common # 内核通用组件 │ ├── extended # 扩展内核，包括动态加载、vdso、liteipc等模块 │ ├── include # 对外暴露头文件存放目录 │ └── user # 加载init进程 ├── lib # 内核的lib库 ├── net # 网络模块，主要来源于lwip开源项目 ├── platform # 支持不同的芯片平台代码，如Hi3516DV300等 │ ├── hw # 时钟与中断相关逻辑代码 │ ├── include # 对外暴露头文件存放目录 │ └── uart # 串口相关逻辑代码 ├── security # 安全特性相关的代码，包括进程权限管理和虚拟id映射管理 ├── syscall # 系统调用 └── tools # 构建工具及相关配置和代码 OpenHarmony LiteOS-A内核支持Hi3518EV300、Hi3516DV300单板，开发者可基于两种单板开发运行自己的应用程序。 以上就是关于内核的一些基本介绍。 参考文档 https://gitee.com/openharmony © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/OpenHarmony/13关于OpenHarmony分布式.html":{"url":"connent/OpenHarmony/13关于OpenHarmony分布式.html","title":"13关于OpenHarmony分布式","keywords":"","body":"OpenHarmony分布式 分布式总体设计思想 聚焦移动应用开发 通信能力突出 并未去中心化 分布式操作系统是什么 分布式操作系统一般指分布式软件系统。是支持分布式处理的软件系统，是在由通信网络互联的多处理机体系结构上执行任务的系统。 分布式操作系统的基本特征 分布式操作系统的基本特征是通过网络将多个远程微内核合并为单个微内核。各种系统服务包括进程创建，调试，文件及设备I/O通过微内核间的消息传递完成，其结果就是多台计算机组成的一个网络表现出一台计算机一样的行为，并且上述事实对在更高架构层次运行的所有服务透明。 分布式操作系统应该提供的有 节点之间的线程/进程之间的常规通信，进程交互和数据流 的实现，进程间通信是分布式操作系统底层设计的重中之重 进程管理/分布式调度，分布式调度会在所有分布式系统中的所有进程间进行，进程调度会跨越处理节点 资源管理/负载均衡机制。负载均衡可以通过中心节点实现，也可以通过去中心化实现 高可用/高可靠性，以及 防止错误和从错误中恢复的能力， 系统额外性能损耗尽可能的小 系统所管理的任务在不同节点上的作业可便携地同步进行，OS需要提供任务同步所需API\\ 分布式操作系统相对于集中式操作系统的优点 经济，微处理机提供了比大型机更好的性价比 速度，分布式系统总的计算能力比单个大型主机更强 固有的分布性，一些应用将涉及到空间上分散的机器 可靠性，如果一个机器崩溃那么整个系统还可以运转 渐增，计算能力能够逐渐增加 分布式操作系统相对对于个人计算机 数据共享，允许多个用户访问一个公共数据库 设备共享，允许多个用户共享昂贵的外围设备 通信，人们之间通信更加容易 灵活性，是用最有效的方式将工作符合分配到可用机器上面 分布式系统缺点 软件，目前为分布式系统开发软件还很少 网络，网络可能饱和而引起其他问题 安全，容易造成对保密数据的访问 分布式系统为了使得这个系统看上去像是一个操作系统，因此在设计方面提出了下面几个要求 透明性(transparency)，实现一个单系统映像 灵活性，考虑使用微内核方式将各个服务放在不同服务器上面，比如文件服务/目录服务放在不同机器上 可靠性，我们不希望分布是系统比单处理机系统更脆弱 性能 可伸缩性，就是说规模的扩大对于分布式系统不会产生太多的问题，特别是性能方面。 为了提供好的可伸缩性，应该在设计方面避免 a.集中式组件 b.集中式表 c.集中式算法 分布式系统设计实践-尽可能简单的思想 （1）系统中的组件数量要尽可能少。引入一个额外的组件，就引入了一个出错的可能。 （2）尽量不要使用复杂的商业系统，能用简单的办法就用简单的办法。复杂的商业系统不但极其昂贵，而且一旦出错，只能依赖厂商来解决，费时费力又不可控。 （3）不同服务之间的依赖要尽可能少，每个服务都按照微服务的理念运作，服务应该是自治的，有自己的数据和自己的处理，对外提供简单清晰的API。而且要自己部署，自己运营，有独立的团队。这样，每个服务的功能都足够简单，因此，其内部实现也一定不会太复杂，维护起来也会比较容易。此外，由于其功能简单，必要时，完全可以重写一遍。 （4）系统总体架构要简单，层次井然，各组件要职责清晰。开发及维护过程中，要始终遵循总的架构，不要图一时方便而破坏最初的架构。如果今天在模块A与模块B之间开个小门，明天给模块C加个本该由模块D来实现的API，时间一久，整个系统的架构就会变得面目全非而难以维护了。 （5）不要一开始就引入复杂的数据结构、算法、设计等，先用简单的设计构造出一个能用的系统，然后逐渐演化，仅优化或重写那些性能攸关的组件，尽量用简单的设计解决问题。 从简单的架构开始，逐渐演化，必要时推倒重来并重新设计架构，也是许多大的公司走过的路。这里面有很多原因：时间、成本、技术能力等。 好的，以上就是我所了解到的分布式系统的所有的一些要点，欢迎交流 分布式软总线 分布式文件系统 分布式数据库 分布式调度 https://bbs.huaweicloud.com/blogs/239194 © luckly all right reserved，powered by Gitbook该文件修订时间： 2023-03-15 20:29:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}